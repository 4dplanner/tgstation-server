<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tgstation.Server.Host</name>
    </assembly>
    <members>
        <member name="T:Tgstation.Server.Host.Components.Byond.ByondExecutableLock">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Byond.ByondExecutableLock.Version">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Byond.ByondExecutableLock.DreamDaemonPath">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Byond.ByondExecutableLock.DreamMakerPath">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.ByondExecutableLock.#ctor(System.Version,System.String,System.String)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Byond.ByondExecutableLock"/>
            </summary>
            <param name="version">The value of <see cref="P:Tgstation.Server.Host.Components.Byond.ByondExecutableLock.Version"/></param>
            <param name="dreamDaemonPath">The value of <see cref="P:Tgstation.Server.Host.Components.Byond.ByondExecutableLock.DreamDaemonPath"/></param>
            <param name="dreamMakerPath">The value of <see cref="P:Tgstation.Server.Host.Components.Byond.ByondExecutableLock.DreamMakerPath"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.ByondExecutableLock.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.ByondExecutableLock.DoNotDeleteThisSession">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Byond.ByondManager">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.ByondManager.BinPath">
            <summary>
            The path to the BYOND bin folder
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.ByondManager.VersionFileName">
            <summary>
            The file in which we store the <see cref="M:Tgstation.Server.Host.Components.Byond.ByondManager.VersionKey(System.Version)"/> for installations
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.ByondManager.ActiveVersionFileName">
            <summary>
            The file in which we store the <see cref="M:Tgstation.Server.Host.Components.Byond.ByondManager.VersionKey(System.Version)"/> for the active installation
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Byond.ByondManager.ActiveVersion">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Byond.ByondManager.InstalledVersions">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.ByondManager.ioManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Byond.ByondManager"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.ByondManager.byondInstaller">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Byond.IByondInstaller"/> for the <see cref="T:Tgstation.Server.Host.Components.Byond.ByondManager"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.ByondManager.eventConsumer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.IEventConsumer"/> for the <see cref="T:Tgstation.Server.Host.Components.Byond.ByondManager"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.ByondManager.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Components.Byond.ByondManager"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.ByondManager.installedVersions">
            <summary>
            Map of byond <see cref="T:System.Version"/>s to <see cref="T:System.Threading.Tasks.Task"/>s that complete when they are installed
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.ByondManager.semaphore">
            <summary>
            The <see cref="T:System.Threading.SemaphoreSlim"/> for the <see cref="T:Tgstation.Server.Host.Components.Byond.ByondManager"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.ByondManager.VersionKey(System.Version)">
            <summary>
            Converts a BYOND <paramref name="version"/> to a <see cref="T:System.String"/>
            </summary>
            <param name="version">The <see cref="T:System.Version"/> to convert</param>
            <returns>The <see cref="T:System.String"/> representation of <paramref name="version"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.ByondManager.#ctor(Tgstation.Server.Host.IO.IIOManager,Tgstation.Server.Host.Components.Byond.IByondInstaller,Tgstation.Server.Host.Components.IEventConsumer,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.Byond.ByondManager})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Byond.ByondManager"/>
            </summary>
            <param name="ioManager">The value of <see cref="F:Tgstation.Server.Host.Components.Byond.ByondManager.ioManager"/></param>
            <param name="byondInstaller">The value of <see cref="F:Tgstation.Server.Host.Components.Byond.ByondManager.byondInstaller"/></param>
            <param name="eventConsumer">The value of <see cref="F:Tgstation.Server.Host.Components.Byond.ByondManager.eventConsumer"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.Byond.ByondManager.logger"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.ByondManager.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.ByondManager.InstallVersion(System.Version,System.Threading.CancellationToken)">
            <summary>
            Installs a BYOND <paramref name="version"/> if it isn't already
            </summary>
            <param name="version">The BYOND <see cref="T:System.Version"/> to install</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.ByondManager.ChangeVersion(System.Version,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.ByondManager.UseExecutables(System.Version,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.ByondManager.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.ByondManager.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Byond.IByondExecutableLock">
            <summary>
            Represents usage of the two primary BYOND server executables
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Byond.IByondExecutableLock.Version">
            <summary>
            The <see cref="T:System.Version"/> of the locked executables
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Byond.IByondExecutableLock.DreamDaemonPath">
            <summary>
            The path to the DreamDaemon executable
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Byond.IByondExecutableLock.DreamMakerPath">
            <summary>
            The path to the dm/DreamMaker executable
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.IByondExecutableLock.DoNotDeleteThisSession">
            <summary>
            Call if, during a detach, this version should not be deleted
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Byond.IByondInstaller">
            <summary>
            For downloading and installing BYOND extractions for a given system
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Byond.IByondInstaller.DreamDaemonName">
            <summary>
            Get the file name of the DreamDaemon executable
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Byond.IByondInstaller.DreamMakerName">
            <summary>
            Get the file name of the DreamMaker executable
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.IByondInstaller.DownloadVersion(System.Version,System.Threading.CancellationToken)">
            <summary>
            Download a given BYOND <paramref name="version"/>
            </summary>
            <param name="version">The <see cref="T:System.Version"/> of BYOND to download</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:System.Byte"/>s of the zipfile</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.IByondInstaller.InstallByond(System.String,System.Version,System.Threading.CancellationToken)">
            <summary>
            Does actions necessary to get an extracted BYOND installation working
            </summary>
            <param name="path">The path to the BYOND installation</param>
            <param name="version">The <see cref="T:System.Version"/> of BYOND being installed</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.IByondInstaller.CleanCache(System.Threading.CancellationToken)">
            <summary>
            Attempts to cleans the BYOND cache folder for the system
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Byond.IByondManager">
            <summary>
            For managing the BYOND installation
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Byond.IByondManager.ActiveVersion">
            <summary>
            The currently active BYOND version
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Byond.IByondManager.InstalledVersions">
            <summary>
            The installed BYOND versions
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.IByondManager.ChangeVersion(System.Version,System.Threading.CancellationToken)">
            <summary>
            Change the active BYOND version
            </summary>
            <param name="version">The new <see cref="T:System.Version"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.IByondManager.UseExecutables(System.Version,System.Threading.CancellationToken)">
            <summary>
            Lock the current installation's location and return a <see cref="T:Tgstation.Server.Host.Components.Byond.IByondExecutableLock"/>
            </summary>
            <param name="requiredVersion">The BYOND <see cref="T:System.Version"/> required</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the requested <see cref="T:Tgstation.Server.Host.Components.Byond.IByondExecutableLock"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Byond.PosixByondInstaller">
            <summary>
            <see cref="T:Tgstation.Server.Host.Components.Byond.IByondInstaller"/> for Posix systems
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.PosixByondInstaller.ByondRevisionsURLTemplate">
            <summary>
            The URL format string for getting BYOND linux version {0}.{1} zipfile
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.PosixByondInstaller.ByondCachePath">
            <summary>
            Path to the BYOND cache
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Byond.PosixByondInstaller.DreamDaemonName">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Byond.PosixByondInstaller.DreamMakerName">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.PosixByondInstaller.ioManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Byond.PosixByondInstaller"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.PosixByondInstaller.postWriteHandler">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IPostWriteHandler"/> for the <see cref="T:Tgstation.Server.Host.Components.Byond.PosixByondInstaller"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.PosixByondInstaller.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Components.Byond.PosixByondInstaller"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.PosixByondInstaller.#ctor(Tgstation.Server.Host.IO.IIOManager,Tgstation.Server.Host.IO.IPostWriteHandler,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.Byond.PosixByondInstaller})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller"/>
            </summary>
            <param name="ioManager">The value of <see cref="F:Tgstation.Server.Host.Components.Byond.PosixByondInstaller.ioManager"/></param>
            <param name="postWriteHandler">The value of <see cref="F:Tgstation.Server.Host.Components.Byond.PosixByondInstaller.postWriteHandler"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.Byond.PosixByondInstaller.logger"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.PosixByondInstaller.CleanCache(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.PosixByondInstaller.DownloadVersion(System.Version,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.PosixByondInstaller.InstallByond(System.String,System.Version,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller">
            <summary>
            <see cref="T:Tgstation.Server.Host.Components.Byond.IByondInstaller"/> for windows systems
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.ByondRevisionsURLTemplate">
            <summary>
            The URL format string for getting BYOND windows version {0}.{1} zipfile
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.ByondConfigDir">
            <summary>
            Directory to byond installation configuration
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.ByondDDConfig">
            <summary>
            BYOND's DreamDaemon config file
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.ByondNoPromptTrustedMode">
            <summary>
            Setting to add to <see cref="F:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.ByondDDConfig"/> to suppress an invisible user prompt for running a trusted mode .dmb
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.ByondDXDir">
            <summary>
            The directory that contains the BYOND directx redistributable
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.DreamDaemonName">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.DreamMakerName">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.ioManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.processExecutor">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IProcessExecutor"/> for the <see cref="T:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.semaphore">
            <summary>
            The <see cref="T:System.Threading.SemaphoreSlim"/> for the <see cref="T:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.installedDirectX">
            <summary>
            If DirectX was installed
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.#ctor(Tgstation.Server.Host.IO.IIOManager,Tgstation.Server.Host.Core.IProcessExecutor,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.Byond.WindowsByondInstaller})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller"/>
            </summary>
            <param name="ioManager">The value of <see cref="F:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.ioManager"/></param>
            <param name="processExecutor">The value of <see cref="F:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.processExecutor"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.logger"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.CleanCache(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.DownloadVersion(System.Version,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Byond.WindowsByondInstaller.InstallByond(System.String,System.Version,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Channel">
            <summary>
            Represents a <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/> channel
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Channel.Id">
            <summary>
            Backing field for <see cref="P:Tgstation.Server.Host.Components.Chat.Channel.RealId"/>. Represented as a <see cref="T:System.String"/> to avoid BYOND percision loss
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Channel.RealId">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/> channel Id.
            </summary>
            <remarks><see cref="T:Tgstation.Server.Host.Components.Chat.Chat"/> remaps this to an internal id using <see cref="T:Tgstation.Server.Host.Components.Chat.ChannelMapping"/></remarks>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Channel.FriendlyName">
            <summary>
            The user friendly name of the <see cref="T:Tgstation.Server.Host.Components.Chat.Channel"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Channel.ConnectionName">
            <summary>
            The name of the connection the <see cref="T:Tgstation.Server.Host.Components.Chat.Channel"/> belongs to
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Channel.IsAdminChannel">
            <summary>
            If this is considered a channel for admin commands
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Channel.IsPrivateChannel">
            <summary>
            If this is a 1-to-1 chat channel
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Channel.Tag">
            <summary>
            For user use
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.ChannelMapping">
            <summary>
            Represents a mapping of a <see cref="P:Tgstation.Server.Host.Components.Chat.Channel.RealId"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.ChannelMapping.ProviderId">
            <summary>
            The Id of the <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.ChannelMapping.ProviderChannelId">
            <summary>
            The original <see cref="P:Tgstation.Server.Host.Components.Chat.Channel.RealId"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.ChannelMapping.IsWatchdogChannel">
            <summary>
            If <see cref="P:Tgstation.Server.Host.Components.Chat.ChannelMapping.Channel"/> is a watchdog channel
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.ChannelMapping.IsUpdatesChannel">
            <summary>
            If the <see cref="P:Tgstation.Server.Host.Components.Chat.ChannelMapping.Channel"/> is an updates channel
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.ChannelMapping.Channel">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Chat.Channel"/> with the mapped Id
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Chat">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.providerFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Chat.IProviderFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Chat"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.ioManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Chat"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.commandFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.ICommandFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Chat"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.restartRegistration">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IRestartRegistration"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Chat"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.asyncDelayer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IAsyncDelayer"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Chat"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.loggerFactory">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Chat"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Chat"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.builtinCommands">
            <summary>
            Unchanging <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.ICommand"/>s in the <see cref="T:Tgstation.Server.Host.Components.Chat.Chat"/> mapped by <see cref="P:Tgstation.Server.Host.Components.Chat.Commands.ICommand.Name"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.providers">
            <summary>
            Map of <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/>s in use, keyed by <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.Id"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.mappedChannels">
            <summary>
            Map of <see cref="P:Tgstation.Server.Host.Components.Chat.Channel.RealId"/>s to <see cref="T:Tgstation.Server.Host.Components.Chat.ChannelMapping"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.trackingContexts">
            <summary>
            The active <see cref="T:Tgstation.Server.Host.Components.Chat.IJsonTrackingContext"/>s for the <see cref="T:Tgstation.Server.Host.Components.Chat.Chat"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.handlerCts">
            <summary>
            The <see cref="T:System.Threading.CancellationTokenSource"/> for <see cref="F:Tgstation.Server.Host.Components.Chat.Chat.chatHandler"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.initialChatBots">
            <summary>
            The initial <see cref="T:Tgstation.Server.Host.Models.ChatBot"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Chat"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.customCommandHandler">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Chat.ICustomCommandHandler"/> for the <see cref="M:Tgstation.Server.Host.Components.Chat.Chat.ChangeChannels(System.Int64,System.Collections.Generic.IEnumerable{Tgstation.Server.Api.Models.ChatChannel},System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.chatHandler">
            <summary>
            The <see cref="T:System.Threading.Tasks.Task"/> that monitors incoming chat messages
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.connectionsUpdated">
            <summary>
            The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> that completes when <see cref="T:Tgstation.Server.Api.Models.Internal.ChatBot"/>s change
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.channelIdCounter">
            <summary>
            Used for remapping <see cref="P:Tgstation.Server.Host.Components.Chat.Channel.RealId"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Chat.started">
            <summary>
            If <see cref="M:Tgstation.Server.Host.Components.Chat.Chat.StartAsync(System.Threading.CancellationToken)"/> has been called
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Chat.#ctor(Tgstation.Server.Host.Components.Chat.IProviderFactory,Tgstation.Server.Host.IO.IIOManager,Tgstation.Server.Host.Components.Chat.Commands.ICommandFactory,Tgstation.Server.Host.Core.IServerControl,Tgstation.Server.Host.Core.IAsyncDelayer,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.Chat.Chat},System.Collections.Generic.IEnumerable{Tgstation.Server.Host.Models.ChatBot})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Chat.Chat"/>
            </summary>
            <param name="providerFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Chat.providerFactory"/></param>
            <param name="ioManager">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Chat.ioManager"/></param>
            <param name="commandFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Chat.commandFactory"/></param>
            <param name="serverControl">The <see cref="T:Tgstation.Server.Host.Core.IServerControl"/> to populate <see cref="F:Tgstation.Server.Host.Components.Chat.Chat.restartRegistration"/> with</param>
            <param name="asyncDelayer">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Chat.asyncDelayer"/></param>
            <param name="loggerFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Chat.loggerFactory"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Chat.logger"/></param>
            <param name="initialChatBots">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> used to populate <see cref="F:Tgstation.Server.Host.Components.Chat.Chat.initialChatBots"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Chat.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Chat.RemoveProvider(System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/> from <see cref="F:Tgstation.Server.Host.Components.Chat.Chat.providers"/> and <see cref="F:Tgstation.Server.Host.Components.Chat.Chat.mappedChannels"/> optionally updating the <see cref="F:Tgstation.Server.Host.Components.Chat.Chat.trackingContexts"/> as well
            </summary>
            <param name="connectionId">The <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.Id"/> of the <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/> to delete</param>
            <param name="updateTrackings">If <see cref="F:Tgstation.Server.Host.Components.Chat.Chat.trackingContexts"/> should be update</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/> being removed if it exists, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Chat.ProcessMessage(Tgstation.Server.Host.Components.Chat.Providers.IProvider,Tgstation.Server.Host.Components.Chat.Providers.Message,System.Threading.CancellationToken)">
            <summary>
            Processes a <paramref name="message"/>
            </summary>
            <param name="provider">The <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/> who recevied <paramref name="message"/></param>
            <param name="message">The <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.Message"/> to process</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Chat.MonitorMessages(System.Threading.CancellationToken)">
            <summary>
            Monitors active providers for new <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.Message"/>s
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Chat.ChangeChannels(System.Int64,System.Collections.Generic.IEnumerable{Tgstation.Server.Api.Models.ChatChannel},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Chat.ChangeSettings(Tgstation.Server.Api.Models.Internal.ChatBot,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Chat.SendMessage(System.String,System.Collections.Generic.IEnumerable{System.UInt64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Chat.SendWatchdogMessage(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Chat.SendUpdateMessage(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Chat.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Chat.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Chat.TrackJsons(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Chat.Connected(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Chat.RegisterCommandHandler(Tgstation.Server.Host.Components.Chat.ICustomCommandHandler)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Chat.DeleteConnection(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Chat.HandleRestart(System.Version,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.ChatFactory">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.ChatFactory.loggerFactory">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.ChatFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.ChatFactory.providerFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Chat.IProviderFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.ChatFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.ChatFactory.serverControl">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IServerControl"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.ChatFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.ChatFactory.asyncDelayer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IAsyncDelayer"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.ChatFactory"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.ChatFactory.#ctor(Tgstation.Server.Host.Components.Chat.IProviderFactory,Tgstation.Server.Host.Core.IServerControl,Tgstation.Server.Host.Core.IAsyncDelayer,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Chat.ChatFactory"/>
            </summary>
            <param name="providerFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.ChatFactory.providerFactory"/></param>
            <param name="serverControl">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.ChatFactory.serverControl"/></param>
            <param name="asyncDelayer">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.ChatFactory.asyncDelayer"/></param>
            <param name="loggerFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.ChatFactory.loggerFactory"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.ChatFactory.CreateChat(Tgstation.Server.Host.IO.IIOManager,Tgstation.Server.Host.Components.Chat.Commands.ICommandFactory,System.Collections.Generic.IEnumerable{Tgstation.Server.Host.Models.ChatBot})">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Commands.BoolConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> for decoding bools returned by BYOND
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.BoolConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.BoolConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.BoolConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Commands.ByondCommand">
            <summary>
            For displaying the installed Byond version
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.ByondCommand.Name">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.ByondCommand.HelpText">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.ByondCommand.AdminOnly">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.ByondCommand.byondManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Byond.IByondManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.ByondCommand"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.ByondCommand.watchdog">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.ByondCommand"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.ByondCommand.#ctor(Tgstation.Server.Host.Components.Byond.IByondManager,Tgstation.Server.Host.Components.Watchdog.IWatchdog)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.ByondCommand"/>
            </summary>
            <param name="byondManager">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Commands.ByondCommand.byondManager"/></param>
            <param name="watchdog">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Commands.ByondCommand.watchdog"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.ByondCommand.Invoke(System.String,Tgstation.Server.Host.Components.Chat.User,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory.application">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IApplication"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory.byondManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Byond.IByondManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory.repositoryManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Repository.IRepositoryManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory.databaseContextFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IDatabaseContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory.instance">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.Instance"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory.watchdog">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory.#ctor(Tgstation.Server.Host.Core.IApplication,Tgstation.Server.Host.Components.Byond.IByondManager,Tgstation.Server.Host.Components.Repository.IRepositoryManager,Tgstation.Server.Host.Core.IDatabaseContextFactory,Tgstation.Server.Host.Models.Instance)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory"/>
            </summary>
            <param name="application">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory.application"/></param>
            <param name="byondManager">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory.byondManager"/></param>
            <param name="repositoryManager">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory.repositoryManager"/></param>
            <param name="databaseContextFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory.databaseContextFactory"/></param>
            <param name="instance">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory.instance"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory.SetWatchdog(Tgstation.Server.Host.Components.Watchdog.IWatchdog)">
            <summary>
            Set a <paramref name="watchdog"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory"/>
            </summary>
            <param name="watchdog">The <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/> to set</param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.CommandFactory.GenerateCommands">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Commands.CustomCommand">
            <summary>
            Represents a command made from DM code
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.CustomCommand.Name">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.CustomCommand.HelpText">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.CustomCommand.AdminOnly">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.CustomCommand.handler">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Chat.ICustomCommandHandler"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.CustomCommand"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.CustomCommand.SetHandler(Tgstation.Server.Host.Components.Chat.ICustomCommandHandler)">
            <summary>
            Set a new <paramref name="handler"/>
            </summary>
            <param name="handler">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Commands.CustomCommand.handler"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.CustomCommand.Invoke(System.String,Tgstation.Server.Host.Components.Chat.User,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Commands.ICommand">
            <summary>
            Represents a command that can be invoked by talking to chat bots
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.ICommand.Name">
            <summary>
            The text to invoke the command. May not be "?" or "help" (case-insensitive)
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.ICommand.HelpText">
            <summary>
            The help text to display when queires are made about the command
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.ICommand.AdminOnly">
            <summary>
            If the command should only be available to <see cref="T:Tgstation.Server.Host.Components.Chat.User"/>s who's <see cref="P:Tgstation.Server.Host.Components.Chat.User.Channel"/> has <see cref="P:Tgstation.Server.Host.Components.Chat.Channel.IsAdminChannel"/> set
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.ICommand.Invoke(System.String,Tgstation.Server.Host.Components.Chat.User,System.Threading.CancellationToken)">
            <summary>
            Invoke the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.ICommand"/>
            </summary>
            <param name="arguments">The text after <see cref="P:Tgstation.Server.Host.Components.Chat.Commands.ICommand.Name"/> with leading whitespace trimmed</param>
            <param name="user">The <see cref="T:Tgstation.Server.Host.Components.Chat.User"/> who invoked the command</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in a <see cref="T:System.String"/> to send to the invoker</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Commands.ICommandFactory">
            <summary>
            Factory for built in <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.ICommand"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.ICommandFactory.GenerateCommands">
            <summary>
            Generate builtin <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.ICommand"/>s
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.ICommand"/>s</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Commands.KekCommand">
            <summary>
            kek
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.KekCommand.Kek">
            <summary>
            kek
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.KekCommand.Name">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.KekCommand.HelpText">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.KekCommand.AdminOnly">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.KekCommand.Invoke(System.String,Tgstation.Server.Host.Components.Chat.User,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand">
            <summary>
            Command for reading the active <see cref="T:Tgstation.Server.Api.Models.TestMerge"/>s
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand.Name">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand.HelpText">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand.AdminOnly">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand.watchdog">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand.repositoryManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Repository.IRepositoryManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand.databaseContextFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IDatabaseContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand.instance">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.Instance"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand.#ctor(Tgstation.Server.Host.Components.Watchdog.IWatchdog,Tgstation.Server.Host.Components.Repository.IRepositoryManager,Tgstation.Server.Host.Core.IDatabaseContextFactory,Tgstation.Server.Host.Models.Instance)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand"/>
            </summary>
            <param name="watchdog">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand.watchdog"/></param>
            <param name="repositoryManager">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand.repositoryManager"/></param>
            <param name="databaseContextFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand.databaseContextFactory"/></param>
            <param name="instance">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand.instance"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand.Invoke(System.String,Tgstation.Server.Host.Components.Chat.User,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Commands.RevisionCommand">
            <summary>
            For displaying <see cref="T:Tgstation.Server.Api.Models.Internal.RevisionInformation"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.RevisionCommand.Name">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.RevisionCommand.HelpText">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.RevisionCommand.AdminOnly">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.RevisionCommand.watchdog">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.RevisionCommand.repositoryManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Repository.IRepositoryManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.RevisionCommand.instance">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.Instance"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.PullRequestsCommand"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.RevisionCommand.#ctor(Tgstation.Server.Host.Components.Watchdog.IWatchdog,Tgstation.Server.Host.Components.Repository.IRepositoryManager,Tgstation.Server.Host.Models.Instance)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.RevisionCommand"/>
            </summary>
            <param name="watchdog">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Commands.RevisionCommand.watchdog"/></param>
            <param name="repositoryManager">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Commands.RevisionCommand.repositoryManager"/></param>
            <param name="instance">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Commands.RevisionCommand.instance"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.RevisionCommand.Invoke(System.String,Tgstation.Server.Host.Components.Chat.User,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Commands.VersionCommand">
            <summary>
            <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.ICommand"/> to return the <see cref="P:Tgstation.Server.Host.Core.IApplication.VersionString"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.VersionCommand.Name">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.VersionCommand.HelpText">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Commands.VersionCommand.AdminOnly">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Commands.VersionCommand.application">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IApplication"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.VersionCommand"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.VersionCommand.#ctor(Tgstation.Server.Host.Core.IApplication)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.VersionCommand"/>
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Commands.VersionCommand.Invoke(System.String,Tgstation.Server.Host.Components.Chat.User,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.IChat">
            <summary>
            For managing connected chat services
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.IChat.Connected(System.Int64)">
            <summary>
            If a given set of <see cref="T:Tgstation.Server.Api.Models.Internal.ChatBot"/> is connected
            </summary>
            <param name="connectionId">The <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.Id"/> of the connection</param>
            <returns><see langword="true"/> if it is connected, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.IChat.RegisterCommandHandler(Tgstation.Server.Host.Components.Chat.ICustomCommandHandler)">
            <summary>
            Registers a <paramref name="customCommandHandler"/> to use
            </summary>
            <param name="customCommandHandler">A <see cref="T:Tgstation.Server.Host.Components.Chat.ICustomCommandHandler"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.IChat.ChangeSettings(Tgstation.Server.Api.Models.Internal.ChatBot,System.Threading.CancellationToken)">
            <summary>
            Change chat settings. If the <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.Id"/> is not currently in use, a new connection will be made instead
            </summary>
            <param name="newSettings">The new <see cref="T:Tgstation.Server.Api.Models.Internal.ChatBot"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation. Will complete immediately if the <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.Enabled"/> property of <paramref name="newSettings"/> is <see langword="false"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.IChat.DeleteConnection(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Disconnects and deletes a given connection
            </summary>
            <param name="connectionId">The <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.Id"/> of the connection</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.IChat.ChangeChannels(System.Int64,System.Collections.Generic.IEnumerable{Tgstation.Server.Api.Models.ChatChannel},System.Threading.CancellationToken)">
            <summary>
            Change chat channels
            </summary>
            <param name="connectionId">The <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.Id"/> of the connection</param>
            <param name="newChannels">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the new list of <see cref="T:Tgstation.Server.Api.Models.ChatChannel"/>s</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.IChat.SendMessage(System.String,System.Collections.Generic.IEnumerable{System.UInt64},System.Threading.CancellationToken)">
            <summary>
            Send a chat <paramref name="message"/> to a given set of <paramref name="channelIds"/>
            </summary>
            <param name="message">The message being sent</param>
            <param name="channelIds">The <see cref="P:Tgstation.Server.Host.Models.ChatChannel.Id"/>s of the <see cref="T:Tgstation.Server.Host.Models.ChatChannel"/>s to send to</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.IChat.SendWatchdogMessage(System.String,System.Threading.CancellationToken)">
            <summary>
            Send a chat <paramref name="message"/> to configured watchdog channels
            </summary>
            <param name="message">The message being sent</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.IChat.SendUpdateMessage(System.String,System.Threading.CancellationToken)">
            <summary>
            Send a chat <paramref name="message"/> to configured update channels
            </summary>
            <param name="message">The message being sent</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.IChat.TrackJsons(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Start tracking json files for commands and channels
            </summary>
            <param name="basePath">The base path of the .jsons</param>
            <param name="channelsJsonName">The name of the chat channels json</param>
            <param name="commandsJsonName">The name of the chat commands json</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in a <see cref="T:System.IDisposable"/> tied to the lifetime of the json trackings</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.IChatFactory">
            <summary>
            For creating <see cref="T:Tgstation.Server.Host.Components.Chat.IChat"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.IChatFactory.CreateChat(Tgstation.Server.Host.IO.IIOManager,Tgstation.Server.Host.Components.Chat.Commands.ICommandFactory,System.Collections.Generic.IEnumerable{Tgstation.Server.Host.Models.ChatBot})">
            <summary>
            Create a <see cref="T:Tgstation.Server.Host.Components.Chat.IChat"/>
            </summary>
            <param name="ioManager">The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.IChat"/></param>
            <param name="commandFactory">The <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.ICommandFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.IChat"/></param>
            <param name="initialChatBots">The initial <see cref="T:Tgstation.Server.Host.Models.ChatBot"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.IChat"/></param>
            <returns>A new <see cref="T:Tgstation.Server.Host.Components.Chat.IChat"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.ICustomCommandHandler">
            <summary>
            Handles <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.ICommand"/>s that map to those defined in a <see cref="T:Tgstation.Server.Host.Components.Chat.IJsonTrackingContext"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.ICustomCommandHandler.HandleChatCommand(System.String,System.String,Tgstation.Server.Host.Components.Chat.User,System.Threading.CancellationToken)">
            <summary>
            Handle a chat command
            </summary>
            <param name="commandName">The command name</param>
            <param name="arguments">Everything typed after <paramref name="commandName"/> minus leading spaces</param>
            <param name="sender">The sending <see cref="T:Tgstation.Server.Host.Components.Chat.User"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the response text to send back</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.IJsonTrackingContext">
            <summary>
            Represents a tracking of dynamic chat json files
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.IJsonTrackingContext.Active">
            <summary>
            If the <see cref="T:Tgstation.Server.Host.Components.Chat.IJsonTrackingContext"/> should be used for <see cref="M:Tgstation.Server.Host.Components.Chat.IJsonTrackingContext.GetCustomCommands(System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.IJsonTrackingContext.GetCustomCommands(System.Threading.CancellationToken)">
            <summary>
            Read <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.CustomCommand"/>s from the <see cref="T:Tgstation.Server.Host.Components.Chat.IJsonTrackingContext"/>
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of <see cref="T:Tgstation.Server.Host.Components.Chat.Commands.CustomCommand"/>s in the <see cref="T:Tgstation.Server.Host.Components.Chat.IJsonTrackingContext"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.IJsonTrackingContext.SetChannels(System.Collections.Generic.IEnumerable{Tgstation.Server.Host.Components.Chat.Channel},System.Threading.CancellationToken)">
            <summary>
            Writes information about connected <paramref name="channels"/> to the <see cref="T:Tgstation.Server.Host.Components.Chat.IJsonTrackingContext"/>
            </summary>
            <param name="channels">The <see cref="T:Tgstation.Server.Host.Components.Chat.Channel"/>s to write out</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.IProviderFactory">
            <summary>
            Factory for <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.IProviderFactory.CreateProvider(Tgstation.Server.Api.Models.Internal.ChatBot)">
            <summary>
            Create a <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/>
            </summary>
            <param name="settings">The <see cref="T:Tgstation.Server.Api.Models.Internal.ChatBot"/> containing settings for the new provider</param>
            <returns>A new <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.JsonTrackingContext">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.JsonTrackingContext.Active">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.JsonTrackingContext.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.JsonTrackingContext.GetCustomCommands(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.JsonTrackingContext.SetChannels(System.Collections.Generic.IEnumerable{Tgstation.Server.Host.Components.Chat.Channel},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Providers.Message">
            <summary>
            Represents a message recieved by a <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Providers.Message.Content">
            <summary>
            The text of the message
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Providers.Message.User">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Chat.User"/> who sent the <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.Message"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider">
            <summary>
            <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/> for the Discord app
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider.Connected">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider.BotMention">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider.client">
            <summary>
            The <see cref="T:Discord.WebSocket.DiscordSocketClient"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider.botToken">
            <summary>
            The token used for connecting to discord
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider.mappedChannels">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> of mapped <see cref="T:Discord.ITextChannel"/> <see cref="P:Discord.IEntity`1.Id"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider.NormalizeMention(System.String)">
            <summary>
            Normalize a discord mention string
            </summary>
            <param name="fromDiscord">The mention <see cref="T:System.String"/> provided by the Discord library</param>
            <returns>The normalized mention <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider.#ctor(Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider},System.String)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider"/>
            </summary>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider.logger"/></param>
            <param name="botToken">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider.botToken"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider.Client_MessageReceived(Discord.WebSocket.SocketMessage)">
            <summary>
            Handle a message recieved from Discord
            </summary>
            <param name="e">The <see cref="T:Discord.WebSocket.SocketMessage"/></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider.Connect(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider.Disconnect(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider.MapChannels(System.Collections.Generic.IEnumerable{Tgstation.Server.Api.Models.ChatChannel},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.DiscordProvider.SendMessage(System.UInt64,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider">
            <summary>
            For interacting with a chat service
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Providers.IProvider.Connected">
            <summary>
            If the <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Providers.IProvider.BotMention">
            <summary>
            The <see cref="T:System.String"/> that indicates the <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/> was mentioned
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.IProvider.NextMessage(System.Threading.CancellationToken)">
            <summary>
            Get a <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the next <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.Message"/> the <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/> recieves or <see langword="null"/> on a disconnect
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the next available <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.Message"/></returns>
            <remarks>Note that private messages will come in the form of <see cref="T:Tgstation.Server.Host.Components.Chat.Channel"/>s not returned in <see cref="M:Tgstation.Server.Host.Components.Chat.Providers.IProvider.MapChannels(System.Collections.Generic.IEnumerable{Tgstation.Server.Api.Models.ChatChannel},System.Threading.CancellationToken)"/></remarks>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.IProvider.Connect(System.Threading.CancellationToken)">
            <summary>
            Attempt to connect the <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/>
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in <see langword="true"/> on success, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.IProvider.Disconnect(System.Threading.CancellationToken)">
            <summary>
            Gracefully disconnects the provider. Implies a call to <see cref="M:System.IDisposable.Dispose"/>
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.IProvider.MapChannels(System.Collections.Generic.IEnumerable{Tgstation.Server.Api.Models.ChatChannel},System.Threading.CancellationToken)">
            <summary>
            Get the <see cref="T:Tgstation.Server.Host.Components.Chat.Channel"/>s for given <paramref name="channels"/>
            </summary>
            <param name="channels">The <see cref="T:Tgstation.Server.Api.Models.ChatChannel"/>s to map</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of the <see cref="T:Tgstation.Server.Host.Components.Chat.Channel"/>s representing <paramref name="channels"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.IProvider.SendMessage(System.UInt64,System.String,System.Threading.CancellationToken)">
            <summary>
            Send a message to the <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/>
            </summary>
            <param name="channelId">The <see cref="P:Tgstation.Server.Host.Components.Chat.Channel.RealId"/> to send to</param>
            <param name="message">The message contents</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider">
            <summary>
            <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IProvider"/> for internet relay chat
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.Connected">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.BotMention">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.asyncDelayer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IAsyncDelayer"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.client">
            <summary>
            The <see cref="T:Meebey.SmartIrc4net.IrcFeatures"/> client
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.address">
            <summary>
            Address of the server to connect to
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.port">
            <summary>
            Port of the server to connect to
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.nickname">
            <summary>
            IRC nickname
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.password">
            <summary>
            Password which will used for authentication
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.passwordType">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.IrcPasswordType"/> of <see cref="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.password"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.channelIdMap">
            <summary>
            Map of <see cref="P:Tgstation.Server.Host.Components.Chat.Channel.RealId"/>s to channel names
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.queryChannelIdMap">
            <summary>
            Map of <see cref="P:Tgstation.Server.Host.Components.Chat.Channel.RealId"/>s to query users
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.channelIdCounter">
            <summary>
            Id counter for <see cref="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.channelIdMap"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.listenTask">
            <summary>
            The <see cref="T:System.Threading.Tasks.Task"/> used for <see cref="M:Meebey.SmartIrc4net.IrcConnection.Listen(System.Boolean)"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.disconnecting">
            <summary>
            If we are disconnecting
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.#ctor(Tgstation.Server.Host.Core.IApplication,Tgstation.Server.Host.Core.IAsyncDelayer,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.Chat.Providers.IrcProvider},System.String,System.UInt16,System.String,System.String,System.Nullable{Tgstation.Server.Api.Models.IrcPasswordType},System.Boolean)">
            <summary>
            Construct an <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider"/>
            </summary>
            <param name="application">The <see cref="T:Tgstation.Server.Host.Core.IApplication"/> to get the <see cref="P:Tgstation.Server.Host.Core.IApplication.VersionString"/> from</param>
            <param name="asyncDelayer">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.asyncDelayer"/></param>
            <param name="logger">The value of logger</param>
            <param name="address">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.address"/></param>
            <param name="port">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.port"/></param>
            <param name="nickname">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.nickname"/></param>
            <param name="password">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.password"/></param>
            <param name="passwordType">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.passwordType"/></param>
            <param name="useSsl">If <see cref="P:Meebey.SmartIrc4net.IrcConnection.UseSsl"/> should be used</param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.HandleMessage(Meebey.SmartIrc4net.IrcEventArgs,System.Boolean)">
            <summary>
            Handle an IRC message
            </summary>
            <param name="e">The <see cref="T:Meebey.SmartIrc4net.IrcEventArgs"/></param>
            <param name="isPrivate">If this is a query message</param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.Client_OnQueryMessage(System.Object,Meebey.SmartIrc4net.IrcEventArgs)">
            <summary>
            When a query message is received in IRC
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The <see cref="T:Meebey.SmartIrc4net.IrcEventArgs"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.Client_OnChannelMessage(System.Object,Meebey.SmartIrc4net.IrcEventArgs)">
            <summary>
            When a channel message is received in IRC
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The <see cref="T:Meebey.SmartIrc4net.IrcEventArgs"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.Connect(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.Disconnect(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.MapChannels(System.Collections.Generic.IEnumerable{Tgstation.Server.Api.Models.ChatChannel},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.IrcProvider.SendMessage(System.UInt64,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Providers.Provider">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.Provider.messageQueue">
            <summary>
            <see cref="T:System.Collections.Generic.Queue`1"/> of received <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.Message"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.Providers.Provider.nextMessage">
            <summary>
            <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> that completes while <see cref="F:Tgstation.Server.Host.Components.Chat.Providers.Provider.messageQueue"/> isn't empty
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.Provider.#ctor">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.Provider"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Providers.Provider.Connected">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Providers.Provider.BotMention">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.Provider.EnqueueMessage(Tgstation.Server.Host.Components.Chat.Providers.Message)">
            <summary>
            Queues a <paramref name="message"/> for <see cref="M:Tgstation.Server.Host.Components.Chat.Providers.Provider.NextMessage(System.Threading.CancellationToken)"/>
            </summary>
            <param name="message">The <see cref="T:Tgstation.Server.Host.Components.Chat.Providers.Message"/> to queue</param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.Provider.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.Provider.Connect(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.Provider.Disconnect(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.Provider.MapChannels(System.Collections.Generic.IEnumerable{Tgstation.Server.Api.Models.ChatChannel},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.Provider.NextMessage(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.Providers.Provider.SendMessage(System.UInt64,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.ProviderFactory">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.ProviderFactory.application">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IApplication"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.ProviderFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.ProviderFactory.asyncDelayer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IAsyncDelayer"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.ProviderFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Chat.ProviderFactory.loggerFactory">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Chat.ProviderFactory"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.ProviderFactory.#ctor(Tgstation.Server.Host.Core.IApplication,Tgstation.Server.Host.Core.IAsyncDelayer,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Chat.ProviderFactory"/>
            </summary>
            <param name="application">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.ProviderFactory.application"/></param>
            <param name="asyncDelayer">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.ProviderFactory.asyncDelayer"/></param>
            <param name="loggerFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Chat.ProviderFactory.loggerFactory"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Chat.ProviderFactory.CreateProvider(Tgstation.Server.Api.Models.Internal.ChatBot)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.Response">
            <summary>
            Represents a chat message requested by DD
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Response.Message">
            <summary>
            The message string
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.Response.ChannelIds">
            <summary>
            The list of internal channel ids to send <see cref="P:Tgstation.Server.Host.Components.Chat.Response.Message"/> to
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Chat.User">
            <summary>
            Represents a tgs_chat_user datum
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.User.Id">
            <summary>
            Backing field for <see cref="P:Tgstation.Server.Host.Components.Chat.User.RealId"/>. Represented as a <see cref="T:System.String"/> to avoid BYOND percision loss
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.User.RealId">
            <summary>
            The internal user id
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.User.FriendlyName">
            <summary>
            The friendly name of the user
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.User.Mention">
            <summary>
            The text to mention the user
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Chat.User.Channel">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Chat.Channel"/> the user spoke from
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Compiler.DmbFactory">
            <summary>
            Standard <see cref="T:Tgstation.Server.Host.Components.Compiler.IDmbFactory"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Compiler.DmbFactory.OnNewerDmb">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Compiler.DmbFactory.DmbAvailable">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DmbFactory.databaseContextFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IDatabaseContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Compiler.DmbFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DmbFactory.ioManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Compiler.DmbFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DmbFactory.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Components.Compiler.DmbFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DmbFactory.instance">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Instance"/> for the <see cref="T:Tgstation.Server.Host.Components.Compiler.DmbFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DmbFactory.cleanupCts">
            <summary>
            The <see cref="T:System.Threading.CancellationTokenSource"/> for <see cref="F:Tgstation.Server.Host.Components.Compiler.DmbFactory.cleanupTask"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DmbFactory.cleanupTask">
            <summary>
            <see cref="T:System.Threading.Tasks.Task"/> representing calls to <see cref="M:Tgstation.Server.Host.Components.Compiler.DmbFactory.CleanJob(Tgstation.Server.Host.Models.CompileJob)"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DmbFactory.newerDmbTcs">
            <summary>
            <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> resulting in the latest <see cref="T:Tgstation.Server.Host.Components.Compiler.DmbProvider"/> yet to exist
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DmbFactory.nextDmbProvider">
            <summary>
            The latest <see cref="T:Tgstation.Server.Host.Components.Compiler.DmbProvider"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.DmbFactory.#ctor(Tgstation.Server.Host.Core.IDatabaseContextFactory,Tgstation.Server.Host.IO.IIOManager,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.Compiler.DmbFactory},Tgstation.Server.Api.Models.Instance)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Compiler.DmbFactory"/>
            </summary>
            <param name="databaseContextFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Compiler.DmbFactory.databaseContextFactory"/></param>
            <param name="ioManager">The value of <see cref="F:Tgstation.Server.Host.Components.Compiler.DmbFactory.ioManager"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.Compiler.DmbFactory.logger"/></param>
            <param name="instance">The value of <see cref="F:Tgstation.Server.Host.Components.Compiler.DmbFactory.instance"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.DmbFactory.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.DmbFactory.CleanJob(Tgstation.Server.Host.Models.CompileJob)">
            <summary>
            Delete the <see cref="P:Tgstation.Server.Api.Models.Internal.CompileJob.DirectoryName"/> of <paramref name="job"/>
            </summary>
            <param name="job">The <see cref="T:Tgstation.Server.Host.Models.CompileJob"/> to clean</param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.DmbFactory.LoadCompileJob(Tgstation.Server.Host.Models.CompileJob,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.DmbFactory.LockNextDmb(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.DmbFactory.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.DmbFactory.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.DmbFactory.FromCompileJob(Tgstation.Server.Host.Models.CompileJob,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.DmbFactory.CleanUnusedCompileJobs(Tgstation.Server.Host.Models.CompileJob,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Compiler.DmbProvider">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Compiler.DmbProvider.DmbName">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Compiler.DmbProvider.PrimaryDirectory">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Compiler.DmbProvider.SecondaryDirectory">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Compiler.DmbProvider.RevisionInformation">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Compiler.DmbProvider.CompileJob">
            <summary>
            The <see cref="P:Tgstation.Server.Host.Components.Compiler.DmbProvider.CompileJob"/> for the <see cref="T:Tgstation.Server.Host.Components.Compiler.DmbProvider"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DmbProvider.ioManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Compiler.DmbProvider"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DmbProvider.onDispose">
            <summary>
            The <see cref="T:System.Action"/> to run when <see cref="M:Tgstation.Server.Host.Components.Compiler.DmbProvider.Dispose"/> is called
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.DmbProvider.#ctor(Tgstation.Server.Host.Models.CompileJob,Tgstation.Server.Host.IO.IIOManager,System.Action)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Compiler.DmbProvider"/>
            </summary>
            <param name="compileJob">The value of <see cref="P:Tgstation.Server.Host.Components.Compiler.DmbProvider.CompileJob"/></param>
            <param name="ioManager">The value of <see cref="F:Tgstation.Server.Host.Components.Compiler.DmbProvider.ioManager"/></param>
            <param name="onDispose">The value of <see cref="F:Tgstation.Server.Host.Components.Compiler.DmbProvider.onDispose"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.DmbProvider.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.DmbProvider.KeepAlive">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Compiler.DreamMaker">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.ADirectoryName">
            <summary>
            Name of the primary directory used for compilation
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.BDirectoryName">
            <summary>
            Name of the secondary directory used for compilation
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.DmbExtension">
            <summary>
            Extension for .dmbs
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.DmeExtension">
            <summary>
            Extension for .dmes
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.byond">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Byond.IByondManager"/> for <see cref="T:Tgstation.Server.Host.Components.Compiler.DreamMaker"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.ioManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for <see cref="T:Tgstation.Server.Host.Components.Compiler.DreamMaker"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.configuration">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.StaticFiles.IConfiguration"/> for <see cref="T:Tgstation.Server.Host.Components.Compiler.DreamMaker"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.sessionControllerFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionControllerFactory"/> for <see cref="T:Tgstation.Server.Host.Components.Compiler.DreamMaker"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.compileJobConsumer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Compiler.ICompileJobConsumer"/> for <see cref="T:Tgstation.Server.Host.Components.Compiler.DreamMaker"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.application">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IApplication"/> for <see cref="T:Tgstation.Server.Host.Components.Compiler.DreamMaker"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.eventConsumer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.IEventConsumer"/> for <see cref="T:Tgstation.Server.Host.Components.Compiler.DreamMaker"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.chat">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Chat.IChat"/> for <see cref="T:Tgstation.Server.Host.Components.Compiler.DreamMaker"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.processExecutor">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IProcessExecutor"/> for <see cref="T:Tgstation.Server.Host.Components.Compiler.DreamMaker"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.watchdog">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/> for <see cref="T:Tgstation.Server.Host.Components.Compiler.DreamMaker"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for <see cref="T:Tgstation.Server.Host.Components.Compiler.DreamMaker"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.compiling">
            <summary>
            If a compile job is running
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.DreamMaker.#ctor(Tgstation.Server.Host.Components.Byond.IByondManager,Tgstation.Server.Host.IO.IIOManager,Tgstation.Server.Host.Components.StaticFiles.IConfiguration,Tgstation.Server.Host.Components.Watchdog.ISessionControllerFactory,Tgstation.Server.Host.Components.Compiler.ICompileJobConsumer,Tgstation.Server.Host.Core.IApplication,Tgstation.Server.Host.Components.IEventConsumer,Tgstation.Server.Host.Components.Chat.IChat,Tgstation.Server.Host.Core.IProcessExecutor,Tgstation.Server.Host.Components.Watchdog.IWatchdog,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.Compiler.DreamMaker})">
            <summary>
            Construct <see cref="T:Tgstation.Server.Host.Components.Compiler.DreamMaker"/>
            </summary>
            <param name="byond">The value of <see cref="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.byond"/></param>
            <param name="ioManager">The value of <see cref="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.ioManager"/></param>
            <param name="configuration">The value of <see cref="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.configuration"/></param>
            <param name="sessionControllerFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.sessionControllerFactory"/></param>
            <param name="compileJobConsumer">The value of <see cref="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.compileJobConsumer"/></param>
            <param name="application">The value of <see cref="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.application"/></param>
            <param name="eventConsumer">The value of <see cref="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.eventConsumer"/></param>
            <param name="chat">The value of <see cref="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.chat"/></param>
            <param name="processExecutor">The value of <see cref="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.processExecutor"/></param>
            <param name="watchdog">The value of <see cref="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.watchdog"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.Compiler.DreamMaker.logger"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.DreamMaker.VerifyApi(System.UInt32,Tgstation.Server.Api.Models.DreamDaemonSecurity,Tgstation.Server.Host.Models.CompileJob,Tgstation.Server.Host.Components.Byond.IByondExecutableLock,System.UInt16,System.Threading.CancellationToken)">
            <summary>
            Run a quick DD instance to test the DMAPI is installed on the target code
            </summary>
            <param name="timeout">The timeout in seconds for validation</param>
            <param name="securityLevel">The <see cref="T:Tgstation.Server.Api.Models.DreamDaemonSecurity"/> level to use to validate the API</param>
            <param name="job">The <see cref="T:Tgstation.Server.Host.Models.CompileJob"/> for the operation</param>
            <param name="byondLock">The current <see cref="T:Tgstation.Server.Host.Components.Byond.IByondExecutableLock"/></param>
            <param name="portToUse">The port to use for API validation</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.DreamMaker.RunDreamMaker(System.String,Tgstation.Server.Host.Models.CompileJob,System.Threading.CancellationToken)">
            <summary>
            Compiles a .dme with DreamMaker
            </summary>
            <param name="dreamMakerPath">The path to the DreamMaker executable</param>
            <param name="job">The <see cref="T:Tgstation.Server.Host.Models.CompileJob"/> for the operation</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.DreamMaker.ModifyDme(Tgstation.Server.Host.Models.CompileJob,System.Threading.CancellationToken)">
            <summary>
            Adds server side includes to the .dme being compiled
            </summary>
            <param name="job">The <see cref="T:Tgstation.Server.Host.Models.CompileJob"/> for the operation</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.DreamMaker.Compile(Tgstation.Server.Host.Models.RevisionInformation,Tgstation.Server.Api.Models.DreamMaker,System.UInt32,Tgstation.Server.Host.Components.Repository.IRepository,System.Action{System.Int32},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Compiler.ICompileJobConsumer">
            <summary>
            Sink for <see cref="T:Tgstation.Server.Host.Models.CompileJob"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.ICompileJobConsumer.LoadCompileJob(Tgstation.Server.Host.Models.CompileJob,System.Threading.CancellationToken)">
            <summary>
            Load a new <paramref name="job"/> into the <see cref="T:Tgstation.Server.Host.Components.Compiler.ICompileJobConsumer"/>
            </summary>
            <param name="job">The <see cref="T:Tgstation.Server.Host.Models.CompileJob"/> to load</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Compiler.IDmbFactory">
            <summary>
            Factory for <see cref="T:Tgstation.Server.Host.Components.IDmbProvider"/>s
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Compiler.IDmbFactory.OnNewerDmb">
            <summary>
            Get a <see cref="T:System.Threading.Tasks.Task"/> that completes when the result of a call to <see cref="M:Tgstation.Server.Host.Components.Compiler.IDmbFactory.LockNextDmb(System.Int32)"/> will be different than the previous call if any
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Compiler.IDmbFactory.DmbAvailable">
            <summary>
            If <see cref="M:Tgstation.Server.Host.Components.Compiler.IDmbFactory.LockNextDmb(System.Int32)"/> will succeed
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.IDmbFactory.LockNextDmb(System.Int32)">
            <summary>
            Gets the next <see cref="T:Tgstation.Server.Host.Components.IDmbProvider"/>
            </summary>
            <param name="lockCount">The amount of locks to give the resulting <see cref="T:Tgstation.Server.Host.Components.IDmbProvider"/>. It's <see cref="M:System.IDisposable.Dispose"/> must be called this many times to properly clean the job</param>
            <returns>A new <see cref="T:Tgstation.Server.Host.Components.IDmbProvider"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.IDmbFactory.FromCompileJob(Tgstation.Server.Host.Models.CompileJob,System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:Tgstation.Server.Host.Components.IDmbProvider"/> for a given <see cref="T:Tgstation.Server.Host.Models.CompileJob"/>
            </summary>
            <param name="compileJob">The <see cref="T:Tgstation.Server.Host.Models.CompileJob"/> to make the <see cref="T:Tgstation.Server.Host.Components.IDmbProvider"/> for</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in a new <see cref="T:Tgstation.Server.Host.Components.IDmbProvider"/> representing the <see cref="T:Tgstation.Server.Host.Models.CompileJob"/> on success, <see langword="null"/> on failure</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.IDmbFactory.CleanUnusedCompileJobs(Tgstation.Server.Host.Models.CompileJob,System.Threading.CancellationToken)">
            <summary>
            Deletes all compile jobs that are inactive in the Game folder <paramref name="exceptThisOne"/>
            </summary>
            <param name="exceptThisOne">An optional compile job to not delete</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Compiler.IDreamMaker">
            <summary>
            For managing the compiler
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.IDreamMaker.Compile(Tgstation.Server.Host.Models.RevisionInformation,Tgstation.Server.Api.Models.DreamMaker,System.UInt32,Tgstation.Server.Host.Components.Repository.IRepository,System.Action{System.Int32},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Starts a compile
            </summary>
            <param name="revisionInformation">The <see cref="T:Tgstation.Server.Host.Models.RevisionInformation"/> being compiled from the <paramref name="repository"/></param>
            <param name="dreamMakerSettings">The <see cref="T:Tgstation.Server.Api.Models.DreamMaker"/> for the compile</param>
            <param name="apiValidateTimeout">The time in seconds to wait while validating the API</param>
            <param name="repository">The <see cref="T:Tgstation.Server.Host.Components.Repository.IRepository"/> to copy from</param>
            <param name="progressReporter">The <see cref="T:System.Action`1"/> to report compilation progress</param>
            <param name="estimatedDuration">The estimated amount of time the compile will take</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the partially populated <see cref="T:Tgstation.Server.Host.Models.CompileJob"/> for the operation. In particular, note the <see cref="P:Tgstation.Server.Host.Models.CompileJob.RevisionInformation"/> field will only have it's <see cref="P:Tgstation.Server.Api.Models.Internal.RevisionInformation.CommitSha"/> field populated</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Compiler.TemporaryDmbProvider">
            <summary>
            Temporary <see cref="T:Tgstation.Server.Host.Components.IDmbProvider"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Compiler.TemporaryDmbProvider.DmbName">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Compiler.TemporaryDmbProvider.PrimaryDirectory">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Compiler.TemporaryDmbProvider.SecondaryDirectory">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Compiler.TemporaryDmbProvider.CompileJob">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.TemporaryDmbProvider.#ctor(System.String,System.String,Tgstation.Server.Host.Models.CompileJob)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Compiler.TemporaryDmbProvider"/>
            </summary>
            <param name="directory">The value of <see cref="P:Tgstation.Server.Host.Components.Compiler.TemporaryDmbProvider.PrimaryDirectory"/></param>
            <param name="dmb">The value of <see cref="P:Tgstation.Server.Host.Components.Compiler.TemporaryDmbProvider.DmbName"/></param>
            <param name="compileJob">The value of <see cref="P:Tgstation.Server.Host.Components.Compiler.TemporaryDmbProvider.CompileJob"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Compiler.TemporaryDmbProvider.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.EventConsumer">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.EventConsumer.configuration">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.StaticFiles.IConfiguration"/> for the <see cref="T:Tgstation.Server.Host.Components.EventConsumer"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.EventConsumer.watchdog">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/> for the 
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.EventConsumer.#ctor(Tgstation.Server.Host.Components.StaticFiles.IConfiguration)">
            <summary>
            Construct an <see cref="T:Tgstation.Server.Host.Components.IEventConsumer"/>
            </summary>
            <param name="configuration">The value of <see cref="F:Tgstation.Server.Host.Components.EventConsumer.configuration"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.EventConsumer.HandleEvent(Tgstation.Server.Host.Components.EventType,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.EventConsumer.SetWatchdog(Tgstation.Server.Host.Components.Watchdog.IWatchdog)">
            <summary>
            Set the <paramref name="watchdog"/> for the <see cref="T:Tgstation.Server.Host.Components.EventConsumer"/>
            </summary>
            <param name="watchdog">The value of <see cref="F:Tgstation.Server.Host.Components.EventConsumer.watchdog"/></param>
        </member>
        <member name="T:Tgstation.Server.Host.Components.EventType">
            <summary>
            Types of events. Mirror in tgs.dm
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.EventType.RepoResetOrigin">
            <summary>
            Parameters: Reference name, commit sha
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.EventType.RepoCheckout">
            <summary>
            Parameters: Checkout target
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.EventType.RepoFetch">
            <summary>
            No parameters
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.EventType.RepoMergePullRequest">
            <summary>
            Parameters: Pull request number, pull request sha, merger message
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.EventType.RepoPreSynchronize">
            <summary>
            Parameters: Absolute path to repository root
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.EventType.ByondInstallStart">
            <summary>
            Parameters: Version being installed
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.EventType.ByondInstallFail">
            <summary>
            Parameters: Error string
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.EventType.ByondActiveVersionChange">
            <summary>
            Parameters: Old active version, new active version
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.EventType.CompileStart">
            <summary>
            Parameters: Game directory path, origin commit sha
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.EventType.CompileCancelled">
            <summary>
            No parameters
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.EventType.CompileFailure">
            <summary>
            Parameters: Game directory path, "1" if compile succeeded and api validation failed, "0" otherwise
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.EventType.CompileComplete">
            <summary>
            Parameters: Game directory path
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.EventType.InstanceAutoUpdateStart">
            <summary>
            No parameters
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.EventType.RepoMergeConflict">
            <summary>
            Parameters: Base sha, target sha, base reference, target reference
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.IDmbProvider">
            <summary>
            Provides absolute paths to the latest compiled .dmbs
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.IDmbProvider.DmbName">
            <summary>
            The file name of the .dmb
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.IDmbProvider.PrimaryDirectory">
            <summary>
            The primary game directory with a trailing directory separator
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.IDmbProvider.SecondaryDirectory">
            <summary>
            The secondary game directory with a trailing directory separator
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.IDmbProvider.CompileJob">
            <summary>
            The <see cref="P:Tgstation.Server.Host.Components.IDmbProvider.CompileJob"/> of the .dmb
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.IDmbProvider.KeepAlive">
            <summary>
            Disposing the <see cref="T:Tgstation.Server.Host.Components.IDmbProvider"/> won't cause a cleanup of the working directory
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.IEventConsumer">
            <summary>
            Consumes <see cref="T:Tgstation.Server.Host.Components.EventType"/>s and takes the appropriate actions
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.IEventConsumer.HandleEvent(Tgstation.Server.Host.Components.EventType,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Handle a given <paramref name="eventType"/>
            </summary>
            <param name="eventType">The <see cref="T:Tgstation.Server.Host.Components.EventType"/></param>
            <param name="parameters">The parameters for <paramref name="eventType"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in <see langword="true"/> if more <see cref="T:Tgstation.Server.Host.Components.IEventConsumer"/> should run, <see langword="false"/> otherwise</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.IInstance">
            <summary>
            For interacting with the instance services
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.IInstance.RepositoryManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Repository.IRepositoryManager"/> for the <see cref="T:Tgstation.Server.Host.Components.IInstance"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.IInstance.ByondManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Byond.IByondManager"/> for the <see cref="T:Tgstation.Server.Host.Components.IInstance"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.IInstance.Watchdog">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/> for the <see cref="T:Tgstation.Server.Host.Components.IInstance"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.IInstance.Chat">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Chat.IChat"/> for the <see cref="T:Tgstation.Server.Host.Components.IInstance"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.IInstance.Configuration">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.StaticFiles.IConfiguration"/> for the <see cref="T:Tgstation.Server.Host.Components.IInstance"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.IInstance.LatestCompileJob">
            <summary>
            The latest staged <see cref="T:Tgstation.Server.Host.Models.CompileJob"/>
            </summary>
            <returns>The latest <see cref="T:Tgstation.Server.Host.Models.CompileJob"/> if it exists</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.IInstance.Rename(System.String)">
            <summary>
            Rename the <see cref="T:Tgstation.Server.Host.Components.IInstance"/>
            </summary>
            <param name="newName">The new name for the <see cref="T:Tgstation.Server.Host.Components.IInstance"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.IInstance.SetAutoUpdateInterval(System.UInt32)">
            <summary>
            Change the <see cref="P:Tgstation.Server.Api.Models.Instance.AutoUpdateInterval"/> for the <see cref="T:Tgstation.Server.Host.Components.IInstance"/>
            </summary>
            <param name="newInterval">The new auto update inteval</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.IInstance.CompileProcess(Tgstation.Server.Host.Models.Job,Tgstation.Server.Host.Models.IDatabaseContext,System.Action{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Run the compile job and insert it into the database. Meant to be called by a <see cref="T:Tgstation.Server.Host.Core.IJobManager"/>
            </summary>
            <param name="job">The running <see cref="T:Tgstation.Server.Host.Models.Job"/></param>
            <param name="databaseContext">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> for the operation</param>
            <param name="progressReporter">The <see cref="T:System.Action`1"/> to report compilation progress</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.IInstanceFactory">
            <summary>
            Factory for creating <see cref="T:Tgstation.Server.Host.Components.IInstance"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.IInstanceFactory.CreateInstance(Tgstation.Server.Host.Models.Instance)">
            <summary>
            Create an <see cref="T:Tgstation.Server.Host.Components.IInstance"/>
            </summary>
            <param name="metadata">The <see cref="T:Tgstation.Server.Host.Models.Instance"/></param>
            <returns>A new <see cref="T:Tgstation.Server.Host.Components.IInstance"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.IInstanceManager">
            <summary>
            For managing <see cref="T:Tgstation.Server.Host.Components.IInstance"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.IInstanceManager.GetInstance(Tgstation.Server.Host.Models.Instance)">
            <summary>
            Get the <see cref="T:Tgstation.Server.Host.Components.IInstance"/> associated with given <paramref name="metadata"/>
            </summary>
            <param name="metadata">The <see cref="T:Tgstation.Server.Host.Models.Instance"/> of the desired <see cref="T:Tgstation.Server.Host.Components.IInstance"/></param>
            <returns>The <see cref="T:Tgstation.Server.Host.Components.IInstance"/> associated with the given <paramref name="metadata"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.IInstanceManager.OnlineInstance(Tgstation.Server.Host.Models.Instance,System.Threading.CancellationToken)">
            <summary>
            Online an <see cref="T:Tgstation.Server.Host.Components.IInstance"/>
            </summary>
            <param name="metadata">The <see cref="T:Tgstation.Server.Host.Models.Instance"/> of the desired <see cref="T:Tgstation.Server.Host.Components.IInstance"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.IInstanceManager.OfflineInstance(Tgstation.Server.Host.Models.Instance,Tgstation.Server.Host.Models.User,System.Threading.CancellationToken)">
            <summary>
            Offline an <see cref="T:Tgstation.Server.Host.Components.IInstance"/>
            </summary>
            <param name="metadata">The <see cref="T:Tgstation.Server.Host.Models.Instance"/> of the desired <see cref="T:Tgstation.Server.Host.Components.IInstance"/></param>
            <param name="user">The <see cref="T:Tgstation.Server.Host.Models.User"/> performing the operation</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.IInstanceManager.MoveInstance(Tgstation.Server.Host.Models.Instance,System.String,System.Threading.CancellationToken)">
            <summary>
            Move an <see cref="T:Tgstation.Server.Host.Components.IInstance"/>
            </summary>
            <param name="metadata">The <see cref="T:Tgstation.Server.Host.Models.Instance"/> of the desired <see cref="T:Tgstation.Server.Host.Components.IInstance"/></param>
            <param name="newPath">The new path of the <see cref="T:Tgstation.Server.Host.Components.IInstance"/>. <paramref name="metadata"/> will have this set on <see cref="P:Tgstation.Server.Api.Models.Instance.Path"/> if the operation completes successfully</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Instance">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Instance.RepositoryManager">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Instance.ByondManager">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Instance.Watchdog">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Instance.Chat">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Instance.Configuration">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Instance.dreamMaker">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Compiler.IDreamMaker"/> for the <see cref="T:Tgstation.Server.Host.Components.Instance"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Instance.compileJobConsumer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Compiler.ICompileJobConsumer"/> for the <see cref="T:Tgstation.Server.Host.Components.Instance"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Instance.databaseContextFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IDatabaseContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Instance"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Instance.dmbFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Compiler.IDmbFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Instance"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Instance.jobManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IJobManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Instance"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Instance.eventConsumer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.IEventConsumer"/> for the <see cref="T:Tgstation.Server.Host.Components.Instance"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Instance.gitHubClientFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IGitHubClientFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Instance"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Instance.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Components.Instance"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Instance.metadata">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Instance"/> for the <see cref="T:Tgstation.Server.Host.Components.Instance"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Instance.timerTask">
            <summary>
            The auto update <see cref="T:System.Threading.Tasks.Task"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Instance.timerCts">
            <summary>
            <see cref="T:System.Threading.CancellationTokenSource"/> for <see cref="F:Tgstation.Server.Host.Components.Instance.timerTask"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Instance.#ctor(Tgstation.Server.Api.Models.Instance,Tgstation.Server.Host.Components.Repository.IRepositoryManager,Tgstation.Server.Host.Components.Byond.IByondManager,Tgstation.Server.Host.Components.Compiler.IDreamMaker,Tgstation.Server.Host.Components.Watchdog.IWatchdog,Tgstation.Server.Host.Components.Chat.IChat,Tgstation.Server.Host.Components.StaticFiles.IConfiguration,Tgstation.Server.Host.Components.Compiler.ICompileJobConsumer,Tgstation.Server.Host.Core.IDatabaseContextFactory,Tgstation.Server.Host.Components.Compiler.IDmbFactory,Tgstation.Server.Host.Core.IJobManager,Tgstation.Server.Host.Components.IEventConsumer,Tgstation.Server.Host.Core.IGitHubClientFactory,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.Instance})">
            <summary>
            Construct an <see cref="T:Tgstation.Server.Host.Components.Instance"/>
            </summary>
            <param name="metadata">The value of <see cref="F:Tgstation.Server.Host.Components.Instance.metadata"/></param>
            <param name="repositoryManager">The value of <see cref="P:Tgstation.Server.Host.Components.Instance.RepositoryManager"/></param>
            <param name="byondManager">The value of <see cref="P:Tgstation.Server.Host.Components.Instance.ByondManager"/></param>
            <param name="dreamMaker">The value of <see cref="F:Tgstation.Server.Host.Components.Instance.dreamMaker"/></param>
            <param name="watchdog">The value of <see cref="P:Tgstation.Server.Host.Components.Instance.Watchdog"/></param>
            <param name="chat">The value of <see cref="P:Tgstation.Server.Host.Components.Instance.Chat"/></param>
            <param name="configuration">The value of <see cref="P:Tgstation.Server.Host.Components.Instance.Configuration"/></param>
            <param name="compileJobConsumer">The value of <see cref="F:Tgstation.Server.Host.Components.Instance.compileJobConsumer"/></param>
            <param name="databaseContextFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Instance.databaseContextFactory"/></param>
            <param name="dmbFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Instance.dmbFactory"/></param>
            <param name="jobManager">The value of <see cref="F:Tgstation.Server.Host.Components.Instance.jobManager"/></param>
            <param name="eventConsumer">The value of <see cref="F:Tgstation.Server.Host.Components.Instance.eventConsumer"/></param>
            <param name="gitHubClientFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Instance.gitHubClientFactory"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.Instance.logger"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Instance.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Instance.CompileProcess(Tgstation.Server.Host.Models.Job,Tgstation.Server.Host.Models.IDatabaseContext,System.Action{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Instance.TimerLoop(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Pull the repository and compile for every set of given <paramref name="minutes"/>
            </summary>
            <param name="minutes">How many minutes the operation should repeat. Does not include running time</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Instance.Rename(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Instance.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Instance.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Instance.SetAutoUpdateInterval(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Instance.LatestCompileJob">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.InstanceFactory">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.ioManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.databaseContextFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IDatabaseContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.application">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IApplication"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.loggerFactory">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.byondTopicSender">
            <summary>
            The <see cref="T:Byond.TopicSender.IByondTopicSender"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.cryptographySuite">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Security.ICryptographySuite"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.synchronousIOManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.ISynchronousIOManager"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.symlinkFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.ISymlinkFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.byondInstaller">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Byond.IByondInstaller"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.chatFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Chat.IProviderFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.processExecutor">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IProcessExecutor"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.postWriteHandler">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IPostWriteHandler"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.watchdogFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdogFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.jobManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IJobManager"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.credentialsProvider">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Repository.ICredentialsProvider"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.networkPromptReaper">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Watchdog.INetworkPromptReaper"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.gitHubClientFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IGitHubClientFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceFactory.platformIdentifier">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IPlatformIdentifier"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.InstanceFactory.#ctor(Tgstation.Server.Host.IO.IIOManager,Tgstation.Server.Host.Core.IDatabaseContextFactory,Tgstation.Server.Host.Core.IApplication,Microsoft.Extensions.Logging.ILoggerFactory,Byond.TopicSender.IByondTopicSender,Tgstation.Server.Host.Security.ICryptographySuite,Tgstation.Server.Host.IO.ISynchronousIOManager,Tgstation.Server.Host.IO.ISymlinkFactory,Tgstation.Server.Host.Components.Byond.IByondInstaller,Tgstation.Server.Host.Components.Chat.IChatFactory,Tgstation.Server.Host.Core.IProcessExecutor,Tgstation.Server.Host.IO.IPostWriteHandler,Tgstation.Server.Host.Components.Watchdog.IWatchdogFactory,Tgstation.Server.Host.Core.IJobManager,Tgstation.Server.Host.Components.Repository.ICredentialsProvider,Tgstation.Server.Host.Components.Watchdog.INetworkPromptReaper,Tgstation.Server.Host.Core.IGitHubClientFactory,Tgstation.Server.Host.Core.IPlatformIdentifier)">
            <summary>
            Construct an <see cref="T:Tgstation.Server.Host.Components.InstanceFactory"/>
            </summary>
            <param name="ioManager">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.ioManager"/></param>
            <param name="databaseContextFactory">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.databaseContextFactory"/></param>
            <param name="application">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.application"/></param>
            <param name="loggerFactory">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.loggerFactory"/></param>
            <param name="byondTopicSender">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.byondTopicSender"/></param>
            <param name="cryptographySuite">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.cryptographySuite"/></param>
            <param name="synchronousIOManager">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.synchronousIOManager"/></param>
            <param name="symlinkFactory">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.symlinkFactory"/></param>
            <param name="byondInstaller">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.byondInstaller"/></param>
            <param name="chatFactory">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.chatFactory"/></param>
            <param name="processExecutor">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.processExecutor"/></param>
            <param name="postWriteHandler">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.postWriteHandler"/></param>
            <param name="watchdogFactory">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.watchdogFactory"/></param>
            <param name="jobManager">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.jobManager"/></param>
            <param name="credentialsProvider">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.credentialsProvider"/></param>
            <param name="networkPromptReaper">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.networkPromptReaper"/></param>
            <param name="gitHubClientFactory">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.gitHubClientFactory"/></param>
            <param name="platformIdentifier">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceFactory.platformIdentifier"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.InstanceFactory.CreateInstance(Tgstation.Server.Host.Models.Instance)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.InstanceFactory.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.InstanceFactory.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.InstanceManager">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceManager.instanceFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.IInstanceFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceManager"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceManager.ioManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceManager"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceManager.databaseContextFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IDatabaseContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceManager"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceManager.application">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IApplication"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceManager"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceManager.jobManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IJobManager"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceManager"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceManager.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Components.InstanceManager"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceManager.instances">
            <summary>
            Map of <see cref="P:Tgstation.Server.Api.Models.Instance.Id"/>s to respective <see cref="T:Tgstation.Server.Host.Components.IInstance"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceManager.downgradeVersion">
            <summary>
            Used in <see cref="M:Tgstation.Server.Host.Components.InstanceManager.StopAsync(System.Threading.CancellationToken)"/> to determine if database downgrades must be made
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.InstanceManager.disposed">
            <summary>
            If the <see cref="T:Tgstation.Server.Host.Components.InstanceManager"/> has been <see cref="M:Tgstation.Server.Host.Components.InstanceManager.Dispose"/>d
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.InstanceManager.#ctor(Tgstation.Server.Host.Components.IInstanceFactory,Tgstation.Server.Host.IO.IIOManager,Tgstation.Server.Host.Core.IDatabaseContextFactory,Tgstation.Server.Host.Core.IApplication,Tgstation.Server.Host.Core.IJobManager,Tgstation.Server.Host.Core.IServerControl,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.InstanceManager})">
            <summary>
            Construct an <see cref="T:Tgstation.Server.Host.Components.InstanceManager"/>
            </summary>
            <param name="instanceFactory">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceManager.instanceFactory"/></param>
            <param name="ioManager">The value of <paramref name="ioManager"/></param>
            <param name="databaseContextFactory">The value of <paramref name="databaseContextFactory"/></param>
            <param name="application">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceManager.application"/></param>
            <param name="jobManager">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceManager.jobManager"/></param>
            <param name="serverControl">The <see cref="T:Tgstation.Server.Host.Core.IServerControl"/> used to register the <see cref="T:Tgstation.Server.Host.Components.InstanceManager"/> as a <see cref="T:Tgstation.Server.Host.Core.IRestartHandler"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.InstanceManager.logger"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.InstanceManager.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.InstanceManager.GetInstance(Tgstation.Server.Host.Models.Instance)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.InstanceManager.MoveInstance(Tgstation.Server.Host.Models.Instance,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.InstanceManager.OfflineInstance(Tgstation.Server.Host.Models.Instance,Tgstation.Server.Host.Models.User,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.InstanceManager.OnlineInstance(Tgstation.Server.Host.Models.Instance,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.InstanceManager.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.InstanceManager.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.InstanceManager.HandleRestart(System.Version,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Interop.ChatCommand">
            <summary>
            Represents a chat command to be handled by DD
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.ChatCommand.Command">
            <summary>
            The command name
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.ChatCommand.Params">
            <summary>
            The command params
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.ChatCommand.User">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Chat.User"/> that sent the command
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Interop.CommCommand">
            <summary>
            Represents a command from DD
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.CommCommand.Parameters">
            <summary>
            The dictionary of the <see cref="T:Tgstation.Server.Host.Components.Interop.CommCommand"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.CommCommand.RawJson">
            <summary>
            The raw JSON of the <see cref="T:Tgstation.Server.Host.Components.Interop.CommCommand"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Interop.CommContext">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.CommContext.ioManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Interop.CommContext"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.CommContext.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Components.Interop.CommContext"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.CommContext.fileSystemWatcher">
            <summary>
            The <see cref="T:System.IO.FileSystemWatcher"/> for the <see cref="T:Tgstation.Server.Host.Components.Interop.CommContext"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.CommContext.cancellationTokenSource">
            <summary>
            The <see cref="T:System.Threading.CancellationTokenSource"/> for the <see cref="T:Tgstation.Server.Host.Components.Interop.CommContext"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.CommContext.cancellationToken">
            <summary>
            The <see cref="T:System.Threading.CancellationToken"/> for the <see cref="T:Tgstation.Server.Host.Components.Interop.CommContext"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.CommContext.handler">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Interop.ICommHandler"/> for the <see cref="T:Tgstation.Server.Host.Components.Interop.CommContext"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.CommContext.disposed">
            <summary>
            If the <see cref="T:Tgstation.Server.Host.Components.Interop.CommContext"/> has been disposed
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Interop.CommContext.#ctor(Tgstation.Server.Host.IO.IIOManager,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.Interop.CommContext},System.String,System.String)">
            <summary>
            Construct an <see cref="T:Tgstation.Server.Host.Components.Interop.CommContext"/>
            </summary>
            <param name="ioManager">The value of <see cref="F:Tgstation.Server.Host.Components.Interop.CommContext.ioManager"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.Interop.CommContext.logger"/></param>
            <param name="directory">The path to watch</param>
            <param name="filter">The filter to watch for</param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Interop.CommContext.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Interop.CommContext.HandleWrite(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Runs when the <see cref="F:Tgstation.Server.Host.Components.Interop.CommContext.fileSystemWatcher"/> triggers
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The <see cref="T:System.IO.FileSystemEventArgs"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Interop.CommContext.RegisterHandler(Tgstation.Server.Host.Components.Interop.ICommHandler)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Interop.Constants">
            <summary>
            Constants used for communication with the DMAPI
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.Constants.DMParamHostVersion">
            <summary>
            Identifies a TGS execution. The server version
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.Constants.DMParamInfoJson">
            <summary>
            Path to the <see cref="T:Tgstation.Server.Host.Components.Interop.JsonFile"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.Constants.DMInteropAccessIdentifier">
            <summary>
            The <see cref="P:Tgstation.Server.Host.Components.Interop.JsonFile.AccessIdentifier"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.Constants.DMResponseSuccess">
            <summary>
            Generic OK response
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.Constants.DMTopicChangePort">
            <summary>
            Change port
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.Constants.DMTopicChangeReboot">
            <summary>
            Change reboot mode
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.Constants.DMTopicChatCommand">
            <summary>
            Chat command
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.Constants.DMTopicEvent">
            <summary>
            Notify of an <see cref="T:Tgstation.Server.Host.Components.EventType"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.Constants.DMTopicInteropResponse">
            <summary>
            Response to an interop export from DM
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.Constants.DMCommandNewPort">
            <summary>
            Set port command
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.Constants.DMCommandApiValidate">
            <summary>
            API validation command
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.Constants.DMCommandServerPrimed">
            <summary>
            Server primed command
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.Constants.DMCommandWorldReboot">
            <summary>
            World reboot command
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.Constants.DMCommandEndProcess">
            <summary>
            Terminate process command
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.Constants.DMCommandChat">
            <summary>
            Chat send command
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.Constants.DMParameterCommand">
            <summary>
            Topic command parameter
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Interop.Constants.DMParameterData">
            <summary>
            Command data
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Interop.EventNotification">
            <summary>
            For notifying DD of <see cref="T:Tgstation.Server.Host.Components.EventType"/>s
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.EventNotification.Type">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.EventType"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.EventNotification.Parameters">
            <summary>
            The event parameters
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Interop.ICommContext">
            <summary>
            Represents a registration of an interop session
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Interop.ICommContext.RegisterHandler(Tgstation.Server.Host.Components.Interop.ICommHandler)">
            <summary>
            Register a <paramref name="handler"/> with the <see cref="T:Tgstation.Server.Host.Components.Interop.ICommContext"/>
            </summary>
            <param name="handler">The <see cref="T:Tgstation.Server.Host.Components.Interop.ICommHandler"/> to register</param>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Interop.ICommHandler">
            <summary>
            Handles <see cref="T:Tgstation.Server.Host.Components.Interop.CommCommand"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Interop.ICommHandler.HandleInterop(Tgstation.Server.Host.Components.Interop.CommCommand,System.Threading.CancellationToken)">
            <summary>
            Handle a <paramref name="command"/>
            </summary>
            <param name="command">The <see cref="T:Tgstation.Server.Host.Components.Interop.CommCommand"/> to handle</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Interop.JsonFile">
            <summary>
            Representation of the initial json passed to DreamDaemon
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.JsonFile.AccessIdentifier">
            <summary>
            The code used by the server to authenticate command Topics
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.JsonFile.ApiValidateOnly">
            <summary>
            If DD should just respond if it's API is working and then exit
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.JsonFile.InstanceName">
            <summary>
            The <see cref="P:Tgstation.Server.Api.Models.Instance.Name"/> of the owner at the time of launch
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.JsonFile.ChatChannelsJson">
            <summary>
            JSON file name that contains current active chat channel information
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.JsonFile.ChatCommandsJson">
            <summary>
            JSON file DD should write to with available chat commands
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.JsonFile.ServerCommandsJson">
            <summary>
            JSON file DD should write to to send commands to the server
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.JsonFile.Revision">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Internal.RevisionInformation"/> of the launch
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.JsonFile.SecurityLevel">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.DreamDaemonSecurity"/> level of the launch
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.JsonFile.TestMerges">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Interop.TestMerge"/>s in the launch
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Interop.JsonSubFileList">
            <summary>
            Information used in for reattaching and interop
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.JsonSubFileList.ChatCommandsJson">
            <summary>
            Path to the chat commands json file
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.JsonSubFileList.ChatChannelsJson">
            <summary>
            Path to the chat channels json file
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.JsonSubFileList.ServerCommandsJson">
            <summary>
            Path to the server commands json file
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Interop.JsonSubFileList.#ctor">
            <summary>
            Construct an <see cref="T:Tgstation.Server.Host.Components.Interop.JsonSubFileList"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Interop.JsonSubFileList.#ctor(Tgstation.Server.Host.Components.Interop.JsonSubFileList)">
            <summary>
            Construct an <see cref="T:Tgstation.Server.Host.Components.Interop.JsonSubFileList"/> from a <paramref name="copy"/>
            </summary>
            <param name="copy">An <see cref="T:Tgstation.Server.Host.Components.Interop.JsonSubFileList"/> to copy</param>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Interop.TestMerge">
            <summary>
            This model mirrors /datum/tgs_revision_information/test_merge
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.TestMerge.TimeMerged">
            <summary>
            The unix time of when the test merge was applied
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Interop.TestMerge.Revision">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Internal.RevisionInformation"/> of the <see cref="T:Tgstation.Server.Host.Components.Interop.TestMerge"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Interop.TestMerge.#ctor(Tgstation.Server.Host.Models.TestMerge,Tgstation.Server.Api.Models.Internal.RevisionInformation)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Interop.TestMerge"/>
            </summary>
            <param name="testMerge">The <see cref="T:Tgstation.Server.Host.Models.TestMerge"/> to build from</param>
            <param name="revision">The value of <see cref="P:Tgstation.Server.Host.Components.Interop.TestMerge.Revision"/></param>
        </member>
        <member name="T:Tgstation.Server.Host.Components.ReattachInfoHandler">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.ReattachInfoHandler.databaseContextFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IDatabaseContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.ReattachInfoHandler"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.ReattachInfoHandler.dmbFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Compiler.IDmbFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.ReattachInfoHandler"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.ReattachInfoHandler.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Components.ReattachInfoHandler"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.ReattachInfoHandler.metadata">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Instance"/> for the <see cref="T:Tgstation.Server.Host.Components.ReattachInfoHandler"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.ReattachInfoHandler.#ctor(Tgstation.Server.Host.Core.IDatabaseContextFactory,Tgstation.Server.Host.Components.Compiler.IDmbFactory,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.ReattachInfoHandler},Tgstation.Server.Api.Models.Instance)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.ReattachInfoHandler"/>
            </summary>
            <param name="databaseContextFactory">The value of <see cref="F:Tgstation.Server.Host.Components.ReattachInfoHandler.databaseContextFactory"/></param>
            <param name="dmbFactory">The value of <see cref="F:Tgstation.Server.Host.Components.ReattachInfoHandler.dmbFactory"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.ReattachInfoHandler.logger"/></param>
            <param name="metadata">The value of <see cref="F:Tgstation.Server.Host.Components.ReattachInfoHandler.metadata"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.ReattachInfoHandler.Save(Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.ReattachInfoHandler.Load(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Repository.CredentialsProvider">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Repository.CredentialsProvider.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Components.Repository.CredentialsProvider"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.CredentialsProvider.#ctor(Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.Repository.CredentialsProvider})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Repository.CredentialsProvider"/>
            </summary>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.Repository.CredentialsProvider.logger"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.CredentialsProvider.GenerateHandler(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Repository.ICredentialsProvider">
            <summary>
            For generating <see cref="T:LibGit2Sharp.Handlers.CredentialsHandler"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.ICredentialsProvider.GenerateHandler(System.String,System.String)">
            <summary>
            Generate a <see cref="T:LibGit2Sharp.Handlers.CredentialsHandler"/> from a given <paramref name="username"/> and <paramref name="password"/>
            </summary>
            <param name="username">The optional username to use in the <see cref="T:LibGit2Sharp.Handlers.CredentialsHandler"/></param>
            <param name="password">The optional password to use in the <see cref="T:LibGit2Sharp.Handlers.CredentialsHandler"/></param>
            <returns>A new <see cref="T:LibGit2Sharp.Handlers.CredentialsHandler"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Repository.IRepository">
            <summary>
            Represents an on-disk git repository
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.IRepository.IsGitHubRepository">
            <summary>
            If the <see cref="T:Tgstation.Server.Host.Components.Repository.IRepository"/> was cloned from GitHub.com
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.IRepository.GitHubOwner">
            <summary>
            The <see cref="P:Octokit.Repository.Owner"/> if this <see cref="P:Tgstation.Server.Host.Components.Repository.IRepository.IsGitHubRepository"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.IRepository.GitHubRepoName">
            <summary>
            The <see cref="P:Octokit.Repository.Name"/> if this <see cref="P:Tgstation.Server.Host.Components.Repository.IRepository.IsGitHubRepository"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.IRepository.Tracking">
            <summary>
            If <see cref="P:Tgstation.Server.Host.Components.Repository.IRepository.Reference"/> tracks an upstream branch
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.IRepository.Head">
            <summary>
            The SHA of the <see cref="T:Tgstation.Server.Host.Components.Repository.IRepository"/> HEAD
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.IRepository.Reference">
            <summary>
            The current reference the <see cref="T:Tgstation.Server.Host.Components.Repository.IRepository"/> HEAD is using. This can be a branch or tag
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.IRepository.Origin">
            <summary>
            The current origin remote the <see cref="T:Tgstation.Server.Host.Components.Repository.IRepository"/> is using
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.IRepository.IsSha(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if a given <paramref name="committish"/> is a sha
            </summary>
            <param name="committish">The git object to check</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in <see langword="true"/> if <paramref name="committish"/> is a sha, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.IRepository.CheckoutObject(System.String,System.Action{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Checks out a given <paramref name="committish"/>
            </summary>
            <param name="committish">The sha or reference to checkout</param>
            <param name="progressReporter"><see cref="T:System.Action`1"/> to report 0-100 <see cref="T:System.Int32"/> progress of the operation</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.IRepository.AddTestMerge(Tgstation.Server.Api.Models.TestMergeParameters,System.String,System.String,System.String,System.String,System.Action{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Attempt to merge a GitHub pull request into HEAD
            </summary>
            <param name="testMergeParameters">The <see cref="T:Tgstation.Server.Api.Models.TestMergeParameters"/> of the pull request</param>
            <param name="committerName">The name of the merge committer</param>
            <param name="committerEmail">The e-mail of the merge committer</param>
            <param name="username">The username to fetch from the origin repository</param>
            <param name="password">The password to fetch from the origin repository</param>
            <param name="progressReporter"><see cref="T:System.Action`1"/> to report 0-100 <see cref="T:System.Int32"/> progress of the operation</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in a <see cref="T:System.Nullable`1"/> <see cref="T:System.Boolean"/> representing the merge result that is <see langword="true"/> after a fast forward or up to date, <see langword="false"/> on a non-fast-forward, <see langword="null"/> on a conflict</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.IRepository.FetchOrigin(System.String,System.String,System.Action{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Fetch commits from the origin repository
            </summary>
            <param name="username">The username to fetch from the origin repository</param>
            <param name="password">The password to fetch from the origin repository</param>
            <param name="progressReporter"><see cref="T:System.Action`1"/> to report 0-100 <see cref="T:System.Int32"/> progress of the operation</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.IRepository.ResetToOrigin(System.Action{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Requires the current HEAD to be a tracked reference. Hard resets the reference to what it tracks on the origin repository
            </summary>
            <param name="progressReporter"><see cref="T:System.Action`1"/> to report 0-100 <see cref="T:System.Int32"/> progress of the operation</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the SHA of the new HEAD</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.IRepository.ResetToSha(System.String,System.Action{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Requires the current HEAD to be a reference. Hard resets the reference to the given sha
            </summary>
            <param name="sha">The sha hash to reset to</param>
            <param name="progressReporter"><see cref="T:System.Action`1"/> to report 0-100 <see cref="T:System.Int32"/> progress of the operation</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the SHA of the new HEAD</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.IRepository.MergeOrigin(System.String,System.String,System.Action{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Requires the current HEAD to be a tracked reference. Merges the reference to what it tracks on the origin repository
            </summary>
            <param name="committerName">The name of the merge committer</param>
            <param name="committerEmail">The e-mail of the merge committer</param>
            <param name="progressReporter"><see cref="T:System.Action`1"/> to report 0-100 <see cref="T:System.Int32"/> progress of the operation</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in a <see cref="T:System.Nullable`1"/> <see cref="T:System.Boolean"/> representing the merge result that is <see langword="true"/> after a fast forward, <see langword="false"/> on a merge or up to date, <see langword="null"/> on a conflict</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.IRepository.Sychronize(System.String,System.String,System.String,System.String,System.Action{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Runs the synchronize event script and attempts to push any changes made to the <see cref="T:Tgstation.Server.Host.Components.Repository.IRepository"/> if on a tracked branch
            </summary>
            <param name="username">The username to fetch from the origin repository</param>
            <param name="password">The password to fetch from the origin repository</param>
            <param name="committerName">The name of the potential committer</param>
            <param name="committerEmail">The e-mail of the potential committer</param>
            <param name="progressReporter"><see cref="T:System.Action`1"/> to report 0-100 <see cref="T:System.Int32"/> progress of the operation</param>
            <param name="synchronizeTrackedBranch">If the synchronizations should be made to the tracked reference as opposed to a temporary branch</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in <see langword="true"/> if commits were pushed to the tracked origin reference, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.IRepository.CopyTo(System.String,System.Threading.CancellationToken)">
            <summary>
            Copies the current working directory to a given <paramref name="path"/>
            </summary>
            <param name="path">The path to copy repository contents to</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Repository.IRepositoryManager">
            <summary>
            Factory for creating and loading <see cref="T:Tgstation.Server.Host.Components.Repository.IRepository"/>s
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.IRepositoryManager.InUse">
            <summary>
            If something is holding a lock on the repository
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.IRepositoryManager.CloneInProgress">
            <summary>
            If a <see cref="M:Tgstation.Server.Host.Components.Repository.IRepositoryManager.CloneRepository(System.Uri,System.String,System.String,System.String,System.Action{System.Int32},System.Threading.CancellationToken)"/> operation is in progress
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.IRepositoryManager.LoadRepository(System.Threading.CancellationToken)">
            <summary>
            Attempt to load the <see cref="T:Tgstation.Server.Host.Components.Repository.IRepository"/> from the default location
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>The loaded <see cref="T:Tgstation.Server.Host.Components.Repository.IRepository"/> if it exists, <see langword="null"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.IRepositoryManager.CloneRepository(System.Uri,System.String,System.String,System.String,System.Action{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Clone the repository at <paramref name="url"/>
            </summary>
            <param name="url">The <see cref="T:System.Uri"/> of the remote repository to clone</param>
            <param name="initialBranch">The branch to clone</param>
            <param name="username">The username to clone from <paramref name="url"/></param>
            <param name="password">The password to clone from <paramref name="url"/></param>
            <param name="progressReporter">A function to report 0-100 progress of the clone</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>The newly cloned <see cref="T:Tgstation.Server.Host.Components.Repository.IRepository"/>, <see langword="null"/> if one already exists</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.IRepositoryManager.DeleteRepository(System.Threading.CancellationToken)">
            <summary>
            Delete the current repository
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Repository.Repository">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Repository.Repository.GitHubUrl">
            <summary>
            Indication of a GitHub repository
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Repository.Repository.OriginTrackingErrorTemplate">
            <summary>
            Template error message for when tracking of the most recent origin commit fails
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Repository.Repository.RemoteTemporaryBranchName">
            <summary>
            The branch name used for publishing testmerge commits
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.Repository.IsGitHubRepository">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.Repository.GitHubOwner">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.Repository.GitHubRepoName">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.Repository.Tracking">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.Repository.Head">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.Repository.Reference">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.Repository.Origin">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Repository.Repository.repository">
            <summary>
            The <see cref="T:LibGit2Sharp.IRepository"/> for the <see cref="T:Tgstation.Server.Host.Components.Repository.Repository"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Repository.Repository.ioMananger">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Repository.Repository"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Repository.Repository.eventConsumer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.IEventConsumer"/> for the <see cref="T:Tgstation.Server.Host.Components.Repository.Repository"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Repository.Repository.credentialsProvider">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Repository.ICredentialsProvider"/> for the <see cref="T:Tgstation.Server.Host.Components.Repository.Repository"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Repository.Repository.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Components.Repository.Repository"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Repository.Repository.onDispose">
            <summary>
            <see cref="T:System.Action"/> to be taken when <see cref="M:Tgstation.Server.Host.Components.Repository.Repository.Dispose"/> is called
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.Repository.CheckoutProgressHandler(System.Action{System.Int32})">
            <summary>
            Converts a given <paramref name="progressReporter"/> to a <see cref="T:LibGit2Sharp.Handlers.CheckoutProgressHandler"/>
            </summary>
            <param name="progressReporter"><see cref="T:System.Action`1"/> to report 0-100 <see cref="T:System.Int32"/> progress of the operation</param>
            <returns>A <see cref="T:LibGit2Sharp.Handlers.CheckoutProgressHandler"/> based on <paramref name="progressReporter"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.Repository.#ctor(LibGit2Sharp.IRepository,Tgstation.Server.Host.IO.IIOManager,Tgstation.Server.Host.Components.IEventConsumer,Tgstation.Server.Host.Components.Repository.ICredentialsProvider,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.Repository.Repository},System.Action)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Repository.Repository"/>
            </summary>
            <param name="repository">The value of <see cref="F:Tgstation.Server.Host.Components.Repository.Repository.repository"/></param>
            <param name="ioMananger">The value of <see cref="F:Tgstation.Server.Host.Components.Repository.Repository.ioMananger"/></param>
            <param name="eventConsumer">The value of <see cref="F:Tgstation.Server.Host.Components.Repository.Repository.eventConsumer"/></param>
            <param name="credentialsProvider">The value of <see cref="F:Tgstation.Server.Host.Components.Repository.Repository.credentialsProvider"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.Repository.Repository.logger"/></param>
            <param name="onDispose">The value if <see cref="F:Tgstation.Server.Host.Components.Repository.Repository.onDispose"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.Repository.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.Repository.GeneratePushOptions(System.Action{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Generate a standard set of <see cref="T:LibGit2Sharp.PushOptions"/>
            </summary>
            <param name="progressReporter"><see cref="T:System.Action`1"/> to report 0-100 <see cref="T:System.Int32"/> progress of the operation</param>
            <param name="username">The username for the <see cref="F:Tgstation.Server.Host.Components.Repository.Repository.credentialsProvider"/></param>
            <param name="password">The password for the <see cref="F:Tgstation.Server.Host.Components.Repository.Repository.credentialsProvider"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A new set of <see cref="T:LibGit2Sharp.PushOptions"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.Repository.RawCheckout(System.String,System.Action{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Runs a blocking force checkout to <paramref name="committish"/>
            </summary>
            <param name="committish">The committish to checkout</param>
            <param name="progressReporter">Progress reporter <see cref="T:System.Action`1"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.Repository.AddTestMerge(Tgstation.Server.Api.Models.TestMergeParameters,System.String,System.String,System.String,System.String,System.Action{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.Repository.CheckoutObject(System.String,System.Action{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.Repository.FetchOrigin(System.String,System.String,System.Action{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.Repository.PushHeadToTemporaryBranch(System.String,System.String,System.Action{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Force push the current repository HEAD to <see cref="F:Tgstation.Server.Host.Components.Repository.Repository.RemoteTemporaryBranchName"/>;
            </summary>
            <param name="username">The username to fetch from the origin repository</param>
            <param name="password">The password to fetch from the origin repository</param>
            <param name="progressReporter"><see cref="T:System.Action`1"/> to report 0-100 <see cref="T:System.Int32"/> progress of the operation</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.Repository.ResetToOrigin(System.Action{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.Repository.ResetToSha(System.String,System.Action{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.Repository.CopyTo(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.Repository.MergeOrigin(System.String,System.String,System.Action{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.Repository.Sychronize(System.String,System.String,System.String,System.String,System.Action{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.Repository.IsSha(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Repository.RepositoryManager">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.RepositoryManager.InUse">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Repository.RepositoryManager.CloneInProgress">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Repository.RepositoryManager.ioManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Repository.RepositoryManager"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Repository.RepositoryManager.eventConsumer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.IEventConsumer"/> for the <see cref="T:Tgstation.Server.Host.Components.Repository.RepositoryManager"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Repository.RepositoryManager.credentialsProvider">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Repository.ICredentialsProvider"/> for the <see cref="T:Tgstation.Server.Host.Components.Repository.RepositoryManager"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Repository.RepositoryManager.repositoryLogger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> created <see cref="T:Tgstation.Server.Host.Components.Repository.Repository"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Repository.RepositoryManager.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Components.Repository.RepositoryManager"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Repository.RepositoryManager.repositorySettings">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Internal.RepositorySettings"/> for the <see cref="T:Tgstation.Server.Host.Components.Repository.RepositoryManager"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Repository.RepositoryManager.semaphore">
            <summary>
            Used for controlling single access to the <see cref="T:Tgstation.Server.Host.Components.Repository.IRepository"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.RepositoryManager.#ctor(Tgstation.Server.Api.Models.Internal.RepositorySettings,Tgstation.Server.Host.IO.IIOManager,Tgstation.Server.Host.Components.IEventConsumer,Tgstation.Server.Host.Components.Repository.ICredentialsProvider,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.Repository.Repository},Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.Repository.RepositoryManager})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Repository.RepositoryManager"/>
            </summary>
            <param name="repositorySettings">The value of <see cref="F:Tgstation.Server.Host.Components.Repository.RepositoryManager.repositorySettings"/></param>
            <param name="ioManager">The value of <see cref="F:Tgstation.Server.Host.Components.Repository.RepositoryManager.ioManager"/></param>
            <param name="eventConsumer">The value of <see cref="F:Tgstation.Server.Host.Components.Repository.RepositoryManager.eventConsumer"/></param>
            <param name="credentialsProvider">The value of <see cref="F:Tgstation.Server.Host.Components.Repository.RepositoryManager.credentialsProvider"/></param>
            <param name="repositoryLogger">The value of <see cref="F:Tgstation.Server.Host.Components.Repository.RepositoryManager.repositoryLogger"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.Repository.RepositoryManager.logger"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.RepositoryManager.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.RepositoryManager.CloneRepository(System.Uri,System.String,System.String,System.String,System.Action{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.RepositoryManager.LoadRepository(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Repository.RepositoryManager.DeleteRepository(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.StaticFiles.Configuration">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.StaticIgnoreFile">
            <summary>
            Name of the ignore file in <see cref="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.GameStaticFilesSubdirectory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.ioManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for <see cref="T:Tgstation.Server.Host.Components.StaticFiles.Configuration"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.synchronousIOManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.ISynchronousIOManager"/> for <see cref="T:Tgstation.Server.Host.Components.StaticFiles.Configuration"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.symlinkFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.ISymlinkFactory"/> for <see cref="T:Tgstation.Server.Host.Components.StaticFiles.Configuration"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.processExecutor">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IProcessExecutor"/> for <see cref="T:Tgstation.Server.Host.Components.StaticFiles.Configuration"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.postWriteHandler">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IPostWriteHandler"/> for <see cref="T:Tgstation.Server.Host.Components.StaticFiles.Configuration"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.platformIdentifier">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IPlatformIdentifier"/> for <see cref="T:Tgstation.Server.Host.Components.StaticFiles.Configuration"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for <see cref="T:Tgstation.Server.Host.Components.StaticFiles.Configuration"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.semaphore">
            <summary>
            The <see cref="T:System.Threading.SemaphoreSlim"/> for <see cref="T:Tgstation.Server.Host.Components.StaticFiles.Configuration"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.Configuration.#ctor(Tgstation.Server.Host.IO.IIOManager,Tgstation.Server.Host.IO.ISynchronousIOManager,Tgstation.Server.Host.IO.ISymlinkFactory,Tgstation.Server.Host.Core.IProcessExecutor,Tgstation.Server.Host.IO.IPostWriteHandler,Tgstation.Server.Host.Core.IPlatformIdentifier,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.StaticFiles.Configuration})">
            <summary>
            Construct <see cref="T:Tgstation.Server.Host.Components.StaticFiles.Configuration"/>
            </summary>
            <param name="ioManager">The value of <see cref="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.ioManager"/></param>
            <param name="synchronousIOManager">The value of <see cref="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.synchronousIOManager"/></param>
            <param name="symlinkFactory">The value of <see cref="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.symlinkFactory"/></param>
            <param name="processExecutor">The value of <see cref="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.processExecutor"/></param>
            <param name="postWriteHandler">The value of <see cref="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.postWriteHandler"/></param>
            <param name="platformIdentifier">The value of <see cref="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.platformIdentifier"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.logger"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.Configuration.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.Configuration.StaticIgnorePath">
            <summary>
            Get the proper path to <see cref="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.StaticIgnoreFile"/>
            </summary>
            <returns>The <see cref="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.ioManager"/> relative path to <see cref="F:Tgstation.Server.Host.Components.StaticFiles.Configuration.StaticIgnoreFile"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.Configuration.EnsureDirectories(System.Threading.CancellationToken)">
            <summary>
            Ensures standard configuration directories exist
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.Configuration.CopyDMFilesTo(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.Configuration.ListDirectory(System.String,Tgstation.Server.Host.Security.ISystemIdentity,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.Configuration.Read(System.String,Tgstation.Server.Host.Security.ISystemIdentity,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.Configuration.SymlinkStaticFilesTo(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.Configuration.Write(System.String,Tgstation.Server.Host.Security.ISystemIdentity,System.Byte[],System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.Configuration.CreateDirectory(System.String,Tgstation.Server.Host.Security.ISystemIdentity,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.Configuration.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.Configuration.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.Configuration.HandleEvent(Tgstation.Server.Host.Components.EventType,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.Configuration.DeleteDirectory(System.String,Tgstation.Server.Host.Security.ISystemIdentity,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.StaticFiles.IConfiguration">
            <summary>
            For managing the Configuration directory
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.IConfiguration.CopyDMFilesTo(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Copies all files in the CodeModifications directory to <paramref name="destination"/>
            </summary>
            <param name="dmeFile">The .dme file being compiled</param>
            <param name="destination">Path to the destination folder</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Tgstation.Server.Host.Components.StaticFiles.ServerSideModifications"/> if any</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.IConfiguration.SymlinkStaticFilesTo(System.String,System.Threading.CancellationToken)">
            <summary>
            Symlinks all directories in the GameData directory to <paramref name="destination"/>
            </summary>
            <param name="destination">Path to the destination folder</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.IConfiguration.ListDirectory(System.String,Tgstation.Server.Host.Security.ISystemIdentity,System.Threading.CancellationToken)">
            <summary>
            Get <see cref="T:Tgstation.Server.Api.Models.ConfigurationFile"/> for all items in a given <paramref name="configurationRelativePath"/>
            </summary>
            <param name="configurationRelativePath">The relative path in the Configuration directory</param>
            <param name="systemIdentity">The <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> for the operation. If <see langword="null"/>, the operation will be performed as the user of the <see cref="T:Tgstation.Server.Host.Core.Application"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Tgstation.Server.Api.Models.ConfigurationFile"/>s for the items in the directory. <see cref="P:Tgstation.Server.Api.Models.ConfigurationFile.Content"/> and <see cref="P:Tgstation.Server.Api.Models.ConfigurationFile.LastReadHash"/> will both be <see langword="null"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.IConfiguration.Read(System.String,Tgstation.Server.Host.Security.ISystemIdentity,System.Threading.CancellationToken)">
            <summary>
            Reads a given <paramref name="configurationRelativePath"/>
            </summary>
            <param name="configurationRelativePath">The relative path in the Configuration directory</param>
            <param name="systemIdentity">The <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> for the operation. If <see langword="null"/>, the operation will be performed as the user of the <see cref="T:Tgstation.Server.Host.Core.Application"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Tgstation.Server.Api.Models.ConfigurationFile"/> of the file</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.IConfiguration.CreateDirectory(System.String,Tgstation.Server.Host.Security.ISystemIdentity,System.Threading.CancellationToken)">
            <summary>
            Create an empty directory at <paramref name="configurationRelativePath"/>
            </summary>
            <param name="configurationRelativePath">The relative path in the Configuration directory</param>
            <param name="systemIdentity">The <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> for the operation. If <see langword="null"/>, the operation will be performed as the user of the <see cref="T:Tgstation.Server.Host.Core.Application"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation. Usage may result in partial writes</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in <see langword="true"/> if the directory already existed, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.IConfiguration.DeleteDirectory(System.String,Tgstation.Server.Host.Security.ISystemIdentity,System.Threading.CancellationToken)">
            <summary>
            Attempt to delete an empty directory at <paramref name="configurationRelativePath"/>
            </summary>
            <param name="configurationRelativePath">The path of the empty directory to delete</param>
            <param name="systemIdentity">The <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> for the operation. If <see langword="null"/>, the operation will be performed as the user of the <see cref="T:Tgstation.Server.Host.Core.Application"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns><see langword="true"/> if the directory was empty and deleted, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.IConfiguration.Write(System.String,Tgstation.Server.Host.Security.ISystemIdentity,System.Byte[],System.String,System.Threading.CancellationToken)">
            <summary>
            Writes to a given <paramref name="configurationRelativePath"/>
            </summary>
            <param name="configurationRelativePath">The relative path in the Configuration directory</param>
            <param name="systemIdentity">The <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> for the operation. If <see langword="null"/>, the operation will be performed as the user of the <see cref="T:Tgstation.Server.Host.Core.Application"/></param>
            <param name="data">The data to write. If <see langword="null"/>, the file is deleted</param>
            <param name="previousHash">The hash any existing file must match in order for the write to succeed</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation. Usage may result in partial writes</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the updated <see cref="T:Tgstation.Server.Api.Models.ConfigurationFile"/> or <see langword="null"/> if the write failed due to <see cref="P:Tgstation.Server.Api.Models.ConfigurationFile.LastReadHash"/> conflicts</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.StaticFiles.ServerSideModifications">
            <summary>
            Represents code modifications via configuration
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.StaticFiles.ServerSideModifications.TotalDmeOverwrite">
            <summary>
            If the target dme was completely overwitten
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.StaticFiles.ServerSideModifications.HeadIncludeLine">
            <summary>
            The #include line which should be added to the beginning of the .dme if any
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.StaticFiles.ServerSideModifications.TailIncludeLine">
            <summary>
            The #include line which should be added to the end of the .dme if any
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.StaticFiles.ServerSideModifications.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Construct <see cref="T:Tgstation.Server.Host.Components.StaticFiles.ServerSideModifications"/>
            </summary>
            <param name="headIncludeLine">The value of <see cref="P:Tgstation.Server.Host.Components.StaticFiles.ServerSideModifications.HeadIncludeLine"/></param>
            <param name="tailIncludeLine">The value of <see cref="P:Tgstation.Server.Host.Components.StaticFiles.ServerSideModifications.TailIncludeLine"/></param>
            <param name="totalDmeOverwrite">The value of <see cref="P:Tgstation.Server.Host.Components.StaticFiles.ServerSideModifications.TotalDmeOverwrite"/></param>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.ApiValidationStatus">
            <summary>
            Status of DMAPI validation
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.ApiValidationStatus.NeverValidated">
            <summary>
            The DMAPI never contacted the server for validation
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.ApiValidationStatus.UnaskedValidationRequest">
            <summary>
            The server was contacted for validation but it was never requested
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.ApiValidationStatus.BadValidationRequest">
            <summary>
            The validation request was malformed
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.ApiValidationStatus.RequiresSafe">
            <summary>
            Valid API. The game must be run with a minimum security level of <see cref="F:Tgstation.Server.Api.Models.DreamDaemonSecurity.Safe"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.ApiValidationStatus.RequiresTrusted">
            <summary>
            Valid API. The game must be run with a security level of <see cref="F:Tgstation.Server.Api.Models.DreamDaemonSecurity.Trusted"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.ApiValidationStatus.RequiresUltrasafe">
            <summary>
            Valid API. The game must be run with a minimum security level of <see cref="F:Tgstation.Server.Api.Models.DreamDaemonSecurity.Ultrasafe"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.DeadSessionController">
            <summary>
            Implements a fake "dead" <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionController"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.LaunchResult">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.IsPrimary">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.TerminationWasRequested">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.ApiValidationStatus">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.Dmb">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.Port">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.ClosePortOnReboot">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.RebootState">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.OnReboot">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.Lifetime">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.disposed">
            <summary>
            If the <see cref="T:Tgstation.Server.Host.Components.Watchdog.DeadSessionController"/> was <see cref="M:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.Dispose"/>d
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.#ctor(Tgstation.Server.Host.Components.IDmbProvider)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Watchdog.DeadSessionController"/>
            </summary>
            <param name="dmbProvider">The value of <see cref="P:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.Dmb"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.EnableCustomChatCommands">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.Release">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.ResetRebootState">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.SendCommand(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.SetHighPriority">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.SetPort(System.UInt16,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.DeadSessionController.SetRebootState(Tgstation.Server.Host.Components.Watchdog.RebootState,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.INetworkPromptReaper">
            <summary>
            On Windows, DreamDaemon will show an unskippable prompt when using /world/proc/OpenPort(). This looks out for those prompts and immediately clicks "Yes" if the owning process has registered for it
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.INetworkPromptReaper.RegisterProcess(Tgstation.Server.Host.Core.IProcess)">
            <summary>
            Register a given <paramref name="process"/> for network prompt reaping
            </summary>
            <param name="process">The <see cref="T:Tgstation.Server.Host.Core.IProcess"/> to register</param>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.IReattachInfoHandler">
            <summary>
            Handles saving and loading <see cref="T:Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.IReattachInfoHandler.Save(Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation,System.Threading.CancellationToken)">
            <summary>
            Save some <paramref name="reattachInformation"/>
            </summary>
            <param name="reattachInformation">The <see cref="T:Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation"/> to save</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.IReattachInfoHandler.Load(System.Threading.CancellationToken)">
            <summary>
            Load a saved <see cref="T:Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation"/>
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the stored <see cref="T:Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation"/> if any</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.ISessionController">
            <summary>
            Handles communication with a DreamDaemon <see cref="T:Tgstation.Server.Host.Core.IProcess"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.ISessionController.LaunchResult">
            <summary>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when DreamDaemon starts pumping the windows message queue after loading a .dmb or when it crashes
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.ISessionController.IsPrimary">
            <summary>
            If the <see cref="P:Tgstation.Server.Host.Components.IDmbProvider.PrimaryDirectory"/> of <see cref="P:Tgstation.Server.Host.Components.Watchdog.ISessionController.Dmb"/> is being used
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.ISessionController.TerminationWasRequested">
            <summary>
            If the DreamDaemon instance sent a
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.ISessionController.ApiValidationStatus">
            <summary>
            The DMAPI <see cref="T:Tgstation.Server.Host.Components.Watchdog.ApiValidationStatus"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.ISessionController.Dmb">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.IDmbProvider"/> being used
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.ISessionController.Port">
            <summary>
            The current port DreamDaemon is listening on
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.ISessionController.ClosePortOnReboot">
            <summary>
            If the port should be rotated off when the world reboots
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.ISessionController.RebootState">
            <summary>
            The current <see cref="P:Tgstation.Server.Host.Components.Watchdog.ISessionController.RebootState"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.ISessionController.OnReboot">
            <summary>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the server calls /world/Reboot()
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.ISessionController.Release">
            <summary>
            Releases the <see cref="T:Tgstation.Server.Host.Core.IProcess"/> without terminating it. Also calls <see cref="M:System.IDisposable.Dispose"/>
            </summary>
            <returns><see cref="T:Tgstation.Server.Host.Components.Watchdog.ReattachInformation"/> which can be used to create a new <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionController"/> similar to this one</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.ISessionController.SendCommand(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a command to DreamDaemon through /world/Topic()
            </summary>
            <param name="command">The sanitized command to send</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the result of /world/Topic()</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.ISessionController.SetPort(System.UInt16,System.Threading.CancellationToken)">
            <summary>
            Causes the world to start listening on a <paramref name="newPort"/>
            </summary>
            <param name="newPort">The port to change to</param>
            <param name="cancellatonToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in <see langword="true"/> if the operation succeeded, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.ISessionController.SetRebootState(Tgstation.Server.Host.Components.Watchdog.RebootState,System.Threading.CancellationToken)">
            <summary>
            Attempts to change the current <see cref="P:Tgstation.Server.Host.Components.Watchdog.ISessionController.RebootState"/> to <paramref name="newRebootState"/>
            </summary>
            <param name="newRebootState">The new <see cref="P:Tgstation.Server.Host.Components.Watchdog.ISessionController.RebootState"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in <see langword="true"/> if the operation succeeded, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.ISessionController.ResetRebootState">
            <summary>
            Changes <see cref="P:Tgstation.Server.Host.Components.Watchdog.ISessionController.RebootState"/> to <see cref="F:Tgstation.Server.Host.Components.Watchdog.RebootState.Normal"/> without telling the DMAPI
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.ISessionController.EnableCustomChatCommands">
            <summary>
            Enables the reading of custom chat commands from the <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionController"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.ISessionControllerFactory">
            <summary>
            Factory for <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionController"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.ISessionControllerFactory.LaunchNew(Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters,Tgstation.Server.Host.Components.IDmbProvider,Tgstation.Server.Host.Components.Byond.IByondExecutableLock,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Create a <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionController"/> from a freshly launch DreamDaemon instance
            </summary>
            <param name="launchParameters">The <see cref="T:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters"/> to use. <see cref="P:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters.SecurityLevel"/> will be updated with the minumum required security level for the launch</param>
            <param name="dmbProvider">The <see cref="T:Tgstation.Server.Host.Components.IDmbProvider"/> to use</param>
            <param name="currentByondLock">The current <see cref="T:Tgstation.Server.Host.Components.Byond.IByondExecutableLock"/> if any</param>
            <param name="primaryPort">If the <see cref="P:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters.PrimaryPort"/> of <paramref name="launchParameters"/> should be used</param>
            <param name="primaryDirectory">If the <see cref="P:Tgstation.Server.Host.Components.IDmbProvider.PrimaryDirectory"/> of <paramref name="dmbProvider"/> should be used</param>
            <param name="apiValidate">If the <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionController"/> should only validate the DMAPI then exit</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in a new <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionController"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.ISessionControllerFactory.Reattach(Tgstation.Server.Host.Components.Watchdog.ReattachInformation,System.Threading.CancellationToken)">
            <summary>
            Create a <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionController"/> from an existing DreamDaemon instance
            </summary>
            <param name="reattachInformation">The <see cref="T:Tgstation.Server.Host.Components.Watchdog.ReattachInformation"/> to use</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in a new <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionController"/> on success or <see langword="null"/> on failure to reattach</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.ISessionControllerFactory.CreateDeadSession(Tgstation.Server.Host.Components.IDmbProvider)">
            <summary>
            Creates a <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionController"/> that appears to have started and died with exit code -1
            </summary>
            <param name="dmbProvider">The <see cref="T:Tgstation.Server.Host.Components.IDmbProvider"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionController"/></param>
            <returns>A dead <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionController"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog">
            <summary>
            Runs and monitors the twin server controllers
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.IWatchdog.Running">
            <summary>
            If the watchdog is running
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.IWatchdog.AlphaIsActive">
            <summary>
            If the alpha server is the active server
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.IWatchdog.ActiveCompileJob">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Internal.CompileJob"/> currently running on the server
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.IWatchdog.ActiveLaunchParameters">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters"/> the active server is using
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.IWatchdog.LastLaunchParameters">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters"/> to be applied
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.IWatchdog.RebootState">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Watchdog.RebootState"/> of the active server
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.IWatchdog.Launch(System.Threading.CancellationToken)">
            <summary>
            Start the <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/>
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.IWatchdog.ChangeSettings(Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters,System.Threading.CancellationToken)">
            <summary>
            Changes the <see cref="P:Tgstation.Server.Host.Components.Watchdog.IWatchdog.ActiveLaunchParameters"/>. If currently <see cref="P:Tgstation.Server.Host.Components.Watchdog.IWatchdog.Running"/> triggers a graceful restart
            </summary>
            <param name="launchParameters">The new <see cref="T:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters"/>. May be modified</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.IWatchdog.Restart(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Restarts the watchdog
            </summary>
            <param name="graceful">If <see langword="true"/> the restart will be delayed until a reboot is detected in the active server's DMAPI and this function will retrun immediately</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.IWatchdog.Terminate(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Stops the watchdog
            </summary>
            <param name="graceful">If <see langword="true"/> the termination will be delayed until a reboot is detected in the active server's DMAPI and this function will return immediately</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.IWatchdog.ResetRebootState(System.Threading.CancellationToken)">
            <summary>
            Cancels pending graceful actions
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.IWatchdogFactory">
            <summary>
            For creating <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.IWatchdogFactory.CreateWatchdog(Tgstation.Server.Host.Components.Chat.IChat,Tgstation.Server.Host.Components.Compiler.IDmbFactory,Tgstation.Server.Host.Components.Watchdog.IReattachInfoHandler,Tgstation.Server.Host.Components.IEventConsumer,Tgstation.Server.Host.Components.Watchdog.ISessionControllerFactory,Tgstation.Server.Api.Models.Instance,Tgstation.Server.Api.Models.Internal.DreamDaemonSettings)">
            <summary>
            Creates a <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/>
            </summary>
            <param name="chat">The <see cref="T:Tgstation.Server.Host.Components.Chat.IChat"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/></param>
            <param name="dmbFactory">The <see cref="T:Tgstation.Server.Host.Components.Compiler.IDmbFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/> with</param>
            <param name="reattachInfoHandler">The <see cref="T:Tgstation.Server.Host.Components.Watchdog.IReattachInfoHandler"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/></param>
            <param name="eventConsumer">The <see cref="T:Tgstation.Server.Host.Components.IEventConsumer"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/></param>
            <param name="sessionControllerFactory">The <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionControllerFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/></param>
            <param name="instance">The <see cref="T:Tgstation.Server.Host.Components.Instance"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/></param>
            <param name="settings">The initial <see cref="T:Tgstation.Server.Api.Models.Internal.DreamDaemonSettings"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/></param>
            <returns>A new <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.LaunchResult">
            <summary>
            Represents the result of trying to start a DD process
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.LaunchResult.StartupTime">
            <summary>
            The time it took for <see cref="M:System.Diagnostics.Process.WaitForInputIdle"/> to return. If <see langword="null"/> the startup timed out
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.LaunchResult.ExitCode">
            <summary>
            The <see cref="P:System.Diagnostics.Process.ExitCode"/> if it exited
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.LaunchResult.ToString">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.MonitorAction">
            <summary>
            The action for the monitor loop to take when control is returned to it
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.MonitorAction.Continue">
            <summary>
            The monitor should continue as normal
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.MonitorAction.Skip">
            <summary>
            Skips the next call to HandleMonitorWakeup action
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.MonitorAction.Restart">
            <summary>
            The monitor should kill and restart both servers
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.MonitorAction.Break">
            <summary>
            The monitor should stop checking actions for this iteration and continue its loop
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.MonitorAction.Exit">
            <summary>
            The monitor should exit. Does not kill servers
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.MonitorActivationReason">
            <summary>
            Reasons for the monitor to wake up
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.MonitorActivationReason.ActiveServerCrashed">
            <summary>
            The active server crashed or exited
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.MonitorActivationReason.InactiveServerCrashed">
            <summary>
            The inactive server crashed or exited
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.MonitorActivationReason.ActiveServerRebooted">
            <summary>
            The active server called /world/Reboot()
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.MonitorActivationReason.InactiveServerRebooted">
            <summary>
            The inactive server called /world/Reboot()
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.MonitorActivationReason.InactiveServerStartupComplete">
            <summary>
            The inactive server is past that point where DD hangs when you press "Go"
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.MonitorActivationReason.NewDmbAvailable">
            <summary>
            A new .dmb was deployed
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.MonitorActivationReason.ActiveLaunchParametersUpdated">
            <summary>
            Server launch parameters were changed
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.MonitorState">
            <summary>
            The (absolute) state of the <see cref="T:Tgstation.Server.Host.Components.Watchdog.Watchdog"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.MonitorState.RebootingInactiveServer">
            <summary>
            If the inactive server is being rebooted
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.MonitorState.InactiveServerCritFail">
            <summary>
            If the inactive server is in an unrecoverable state
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.MonitorState.NextAction">
            <summary>
            The next <see cref="T:Tgstation.Server.Host.Components.Watchdog.MonitorAction"/> to take in <see cref="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.MonitorLifetimes(System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.MonitorState.ActiveServer">
            <summary>
            The active <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionController"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.MonitorState.InactiveServer">
            <summary>
            The inactive <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionController"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.PosixNetworkPromptReaper">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.PosixNetworkPromptReaper.RegisterProcess(Tgstation.Server.Host.Core.IProcess)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.ReattachInformation">
            <summary>
            Parameters necessary for duplicating a <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionController"/> session
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.ReattachInformation.Dmb">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.IDmbProvider"/> used by DreamDaemon
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.ReattachInformation.#ctor">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Watchdog.ReattachInformation"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.ReattachInformation.#ctor(Tgstation.Server.Host.Models.ReattachInformation,Tgstation.Server.Host.Components.IDmbProvider)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Watchdog.ReattachInformation"/> from a given <paramref name="copy"/> and <paramref name="dmb"/>
            </summary>
            <param name="copy">The <see cref="T:Tgstation.Server.Host.Models.ReattachInformation"/> to copy values from</param>
            <param name="dmb">The value of <see cref="P:Tgstation.Server.Host.Components.Watchdog.ReattachInformation.Dmb"/></param>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.RebootState">
            <summary>
            Represents the action to take when /world/Reboot() is called
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.RebootState.Normal">
            <summary>
            Run DreamDaemon's normal reboot process
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.RebootState.Shutdown">
            <summary>
            Shutdown DreamDaemon
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.RebootState.Restart">
            <summary>
            Restart the DreamDaemon process
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.SessionController">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.SessionController.IsPrimary">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.SessionController.ApiValidationStatus">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.SessionController.Dmb">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.SessionController.Port">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.SessionController.RebootState">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.SessionController.ClosePortOnReboot">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.SessionController.TerminationWasRequested">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.SessionController.LaunchResult">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.SessionController.Lifetime">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.SessionController.OnReboot">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionController.reattachInformation">
            <summary>
            The up to date <see cref="T:Tgstation.Server.Host.Components.Watchdog.ReattachInformation"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionController.byondTopicSender">
            <summary>
            The <see cref="T:Byond.TopicSender.IByondTopicSender"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionController.interopContext">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Interop.ICommContext"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionController.process">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IProcess"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionController.byondLock">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Byond.IByondExecutableLock"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionController.chatJsonTrackingContext">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Chat.IJsonTrackingContext"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionController.chat">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Chat.IChat"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionController.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionController.launchSecurityLevel">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.DreamDaemonSecurity"/> level the <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionController.process"/> was launched with
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionController.portAssignmentTcs">
            <summary>
            The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> <see cref="M:Tgstation.Server.Host.Components.Watchdog.SessionController.SetPort(System.UInt16,System.Threading.CancellationToken)"/> waits on when DreamDaemon currently has it's ports closed
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionController.nextPort">
            <summary>
            The port to assign DreamDaemon when it queries for it
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionController.rebootTcs">
            <summary>
            The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> that completes when DD tells us about a reboot
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionController.portClosedForReboot">
            <summary>
            If we know DreamDaemon currently has it's port closed
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionController.disposed">
            <summary>
            If the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionController"/> has been disposed
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionController.apiValidationStatus">
            <summary>
            The <see cref="P:Tgstation.Server.Host.Components.Watchdog.SessionController.ApiValidationStatus"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionController.released">
            <summary>
            If <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionController.process"/> should be kept alive instead
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionController.#ctor(Tgstation.Server.Host.Components.Watchdog.ReattachInformation,Tgstation.Server.Host.Core.IProcess,Tgstation.Server.Host.Components.Byond.IByondExecutableLock,Byond.TopicSender.IByondTopicSender,Tgstation.Server.Host.Components.Chat.IJsonTrackingContext,Tgstation.Server.Host.Components.Interop.ICommContext,Tgstation.Server.Host.Components.Chat.IChat,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.Watchdog.SessionController},System.Nullable{Tgstation.Server.Api.Models.DreamDaemonSecurity},System.Nullable{System.UInt32})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionController"/>
            </summary>
            <param name="reattachInformation">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionController.reattachInformation"/></param>
            <param name="process">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionController.process"/></param>
            <param name="byondLock">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionController.byondLock"/></param>
            <param name="byondTopicSender">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionController.byondTopicSender"/></param>
            <param name="interopContext">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionController.interopContext"/></param>
            <param name="chat">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionController.chat"/></param>
            <param name="chatJsonTrackingContext">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionController.chatJsonTrackingContext"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionController.logger"/></param>
            <param name="launchSecurityLevel">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionController.launchSecurityLevel"/></param>
            <param name="startupTimeout">The optional time to wait before failing the <see cref="P:Tgstation.Server.Host.Components.Watchdog.SessionController.LaunchResult"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionController.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionController"/> class.
            </summary>
            <remarks>The finalizer dispose pattern is necessary so we don't accidentally leak the executable</remarks>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionController.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionController.Dispose(System.Boolean)">
            <summary>
            Implements the <see cref="T:System.IDisposable"/> pattern
            </summary>
            <param name="disposing">If this function was NOT called by the finalizer</param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionController.HandleInterop(Tgstation.Server.Host.Components.Interop.CommCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionController.CheckDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if <see cref="M:Tgstation.Server.Host.Components.Watchdog.SessionController.Dispose(System.Boolean)"/> has been called
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionController.EnableCustomChatCommands">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionController.Release">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionController.SendCommand(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionController.SetPort(System.UInt16,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionController.SetRebootState(Tgstation.Server.Host.Components.Watchdog.RebootState,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionController.ResetRebootState">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionController.SetHighPriority">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.processExecutor">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IProcessExecutor"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.byond">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Byond.IByondManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.byondTopicSender">
            <summary>
            The <see cref="T:Byond.TopicSender.IByondTopicSender"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.cryptographySuite">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Security.ICryptographySuite"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.application">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IApplication"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.ioManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.chat">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Chat.IChat"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.networkPromptReaper">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Watchdog.INetworkPromptReaper"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.platformIdentifier">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IPlatformIdentifier"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.loggerFactory">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.instance">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Instance"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.SecurityWord(Tgstation.Server.Api.Models.DreamDaemonSecurity)">
            <summary>
            Change a given <paramref name="securityLevel"/> into the appropriate DreamDaemon command line word
            </summary>
            <param name="securityLevel">The <see cref="T:Tgstation.Server.Api.Models.DreamDaemonSecurity"/> level to change</param>
            <returns>A <see cref="T:System.String"/> representation of the command line parameter</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.#ctor(Tgstation.Server.Host.Core.IProcessExecutor,Tgstation.Server.Host.Components.Byond.IByondManager,Byond.TopicSender.IByondTopicSender,Tgstation.Server.Host.Security.ICryptographySuite,Tgstation.Server.Host.Core.IApplication,Tgstation.Server.Host.IO.IIOManager,Tgstation.Server.Host.Components.Chat.IChat,Tgstation.Server.Host.Components.Watchdog.INetworkPromptReaper,Tgstation.Server.Host.Core.IPlatformIdentifier,Microsoft.Extensions.Logging.ILoggerFactory,Tgstation.Server.Api.Models.Instance)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory"/>
            </summary>
            <param name="processExecutor">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.processExecutor"/></param>
            <param name="byond">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.byond"/></param>
            <param name="byondTopicSender">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.byondTopicSender"/></param>
            <param name="cryptographySuite">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.cryptographySuite"/></param>
            <param name="application">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.application"/></param>
            <param name="instance">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.instance"/></param>
            <param name="ioManager">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.ioManager"/></param>
            <param name="chat">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.chat"/></param>
            <param name="networkPromptReaper">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.networkPromptReaper"/></param>
            <param name="platformIdentifier">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.platformIdentifier"/></param>
            <param name="loggerFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.loggerFactory"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.LaunchNew(Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters,Tgstation.Server.Host.Components.IDmbProvider,Tgstation.Server.Host.Components.Byond.IByondExecutableLock,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.Reattach(Tgstation.Server.Host.Components.Watchdog.ReattachInformation,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.SessionControllerFactory.CreateDeadSession(Tgstation.Server.Host.Components.IDmbProvider)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.Watchdog">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.AlphaBravoStartupSeperationInterval">
            <summary>
            The time in seconds to wait from starting <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.alphaServer"/> to start <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.bravoServer"/>. Does not take responsiveness into account
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.Watchdog.Running">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.Watchdog.AlphaIsActive">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.Watchdog.ActiveCompileJob">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.Watchdog.ActiveLaunchParameters">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.Watchdog.LastLaunchParameters">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.Watchdog.RebootState">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.chat">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Chat.IChat"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.Watchdog"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.sessionControllerFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Watchdog.ISessionControllerFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.Watchdog"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.dmbFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Compiler.IDmbFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.Watchdog"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.reattachInfoHandler">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.Watchdog.IReattachInfoHandler"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.Watchdog"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.databaseContextFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IDatabaseContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.Watchdog"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.byondTopicSender">
            <summary>
            The <see cref="T:Byond.TopicSender.IByondTopicSender"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.Watchdog"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.eventConsumer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.IEventConsumer"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.Watchdog"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.jobManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IJobManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.Watchdog"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.restartRegistration">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IRestartRegistration"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.Watchdog"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.asyncDelayer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IAsyncDelayer"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.Watchdog"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.Watchdog"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.semaphore">
            <summary>
            The <see cref="T:System.Threading.SemaphoreSlim"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.Watchdog"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.instance">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Instance"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.Watchdog"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.autoStart">
            <summary>
            If the <see cref="T:Tgstation.Server.Host.Components.Watchdog.Watchdog"/> should <see cref="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.LaunchImplNoLock(System.Boolean,System.Boolean,Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation,System.Threading.CancellationToken)"/> in <see cref="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.StartAsync(System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.monitorCts">
            <summary>
            The <see cref="T:System.Threading.CancellationTokenSource"/> for the monitor loop
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.monitorTask">
            <summary>
            The <see cref="T:System.Threading.Tasks.Task"/> running the monitor loop
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.activeParametersUpdated">
            <summary>
            <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> that completes when <see cref="P:Tgstation.Server.Host.Components.Watchdog.Watchdog.ActiveLaunchParameters"/> are changed and we are <see cref="P:Tgstation.Server.Host.Components.Watchdog.Watchdog.Running"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.alphaServer">
            <summary>
            Server designation alpha
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.bravoServer">
            <summary>
            Server designation bravo
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.releaseServers">
            <summary>
            If the servers should be released instead of shutdown
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.#ctor(Tgstation.Server.Host.Components.Chat.IChat,Tgstation.Server.Host.Components.Watchdog.ISessionControllerFactory,Tgstation.Server.Host.Components.Compiler.IDmbFactory,Tgstation.Server.Host.Components.Watchdog.IReattachInfoHandler,Tgstation.Server.Host.Core.IDatabaseContextFactory,Byond.TopicSender.IByondTopicSender,Tgstation.Server.Host.Components.IEventConsumer,Tgstation.Server.Host.Core.IJobManager,Tgstation.Server.Host.Core.IServerControl,Tgstation.Server.Host.Core.IAsyncDelayer,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.Watchdog.Watchdog},Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters,Tgstation.Server.Api.Models.Instance,System.Boolean)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/>
            </summary>
            <param name="chat">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.chat"/></param>
            <param name="sessionControllerFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.sessionControllerFactory"/></param>
            <param name="dmbFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.dmbFactory"/></param>
            <param name="reattachInfoHandler">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.reattachInfoHandler"/></param>
            <param name="databaseContextFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.databaseContextFactory"/></param>
            <param name="byondTopicSender">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.byondTopicSender"/></param>
            <param name="eventConsumer">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.eventConsumer"/></param>
            <param name="jobManager">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.jobManager"/></param>
            <param name="serverControl">The <see cref="T:Tgstation.Server.Host.Core.IServerControl"/> to populate <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.restartRegistration"/> with</param>
            <param name="asyncDelayer">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.asyncDelayer"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.logger"/></param>
            <param name="initialLaunchParameters">The initial value of <see cref="P:Tgstation.Server.Host.Components.Watchdog.Watchdog.ActiveLaunchParameters"/>. May be modified</param>
            <param name="instance">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.instance"/></param>
            <param name="autoStart">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.autoStart"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.DisposeAndNullControllers">
            <summary>
            Call <see cref="M:System.IDisposable.Dispose"/> on <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.alphaServer"/> and <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.bravoServer"/> and set them to <see langword="null"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.TerminateNoLock(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Implementation of <see cref="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.Terminate(System.Boolean,System.Threading.CancellationToken)"/>. Does not lock <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.semaphore"/>
            </summary>
            <param name="graceful">If <see langword="true"/> the termination will be delayed until a reboot is detected in the active server's DMAPI and this function will return immediately</param>
            <param name="announce">If <see langword="true"/> the termination will be announced using <see cref="F:Tgstation.Server.Host.Components.Watchdog.Watchdog.chat"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.HandlerMonitorWakeup(Tgstation.Server.Host.Components.Watchdog.MonitorActivationReason,Tgstation.Server.Host.Components.Watchdog.MonitorState,System.Threading.CancellationToken)">
            <summary>
            Handles the actions to take when the monitor has to "wake up"
            </summary>
            <param name="activationReason">The <see cref="T:Tgstation.Server.Host.Components.Watchdog.MonitorActivationReason"/> that caused the invocation</param>
            <param name="monitorState">The current <see cref="T:Tgstation.Server.Host.Components.Watchdog.MonitorState"/>. Will be modified upon retrn</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.MonitorLifetimes(System.Threading.CancellationToken)">
            <summary>
            The loop that watches the watchdog
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.StopMonitor">
            <summary>
            Stops <see cref="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.MonitorLifetimes(System.Threading.CancellationToken)"/>. Doesn't kill the servers
            </summary>
            <returns><see langword="true"/> if the monitor was running, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.ChangeSettings(Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.LaunchImplNoLock(System.Boolean,System.Boolean,Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation,System.Threading.CancellationToken)">
            <summary>
            Launches the <see cref="T:Tgstation.Server.Host.Components.Watchdog.Watchdog"/>
            </summary>
            <param name="startMonitor">If <see cref="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.MonitorLifetimes(System.Threading.CancellationToken)"/> should be started by this function</param>
            <param name="announce">If the launch should be announced to chat by this function</param>
            <param name="reattachInfo"><see cref="T:Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation"/> to use, if any</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.Launch(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.ResetRebootState(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.Restart(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.Terminate(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.HandleEvent(Tgstation.Server.Host.Components.EventType,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.HandleChatCommand(System.String,System.String,Tgstation.Server.Host.Components.Chat.User,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.Watchdog.HandleRestart(System.Version,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory.serverControl">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IServerControl"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory.loggerFactory">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory.databaseContextFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IDatabaseContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory.byondTopicSender">
            <summary>
            The <see cref="T:Byond.TopicSender.IByondTopicSender"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory.jobManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IJobManager"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory.asyncDelayer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IAsyncDelayer"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory.#ctor(Tgstation.Server.Host.Core.IServerControl,Microsoft.Extensions.Logging.ILoggerFactory,Tgstation.Server.Host.Core.IDatabaseContextFactory,Byond.TopicSender.IByondTopicSender,Tgstation.Server.Host.Core.IJobManager,Tgstation.Server.Host.Core.IAsyncDelayer)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory"/>
            </summary>
            <param name="serverControl">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory.serverControl"/></param>
            <param name="loggerFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory.loggerFactory"/></param>
            <param name="databaseContextFactory">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory.databaseContextFactory"/></param>
            <param name="byondTopicSender">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory.byondTopicSender"/></param>
            <param name="jobManager">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory.jobManager"/></param>
            <param name="asyncDelayer">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory.asyncDelayer"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.WatchdogFactory.CreateWatchdog(Tgstation.Server.Host.Components.Chat.IChat,Tgstation.Server.Host.Components.Compiler.IDmbFactory,Tgstation.Server.Host.Components.Watchdog.IReattachInfoHandler,Tgstation.Server.Host.Components.IEventConsumer,Tgstation.Server.Host.Components.Watchdog.ISessionControllerFactory,Tgstation.Server.Api.Models.Instance,Tgstation.Server.Api.Models.Internal.DreamDaemonSettings)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation">
            <summary>
            Reattach information for a <see cref="T:Tgstation.Server.Host.Components.Watchdog.IWatchdog"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation.Alpha">
            <summary>
            <see cref="T:Tgstation.Server.Host.Components.Watchdog.ReattachInformation"/> for the Alpha session
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation.Bravo">
            <summary>
            <see cref="T:Tgstation.Server.Host.Components.Watchdog.ReattachInformation"/> for the Bravo session
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation.#ctor">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation.#ctor(Tgstation.Server.Host.Models.WatchdogReattachInformation,Tgstation.Server.Host.Components.IDmbProvider,Tgstation.Server.Host.Components.IDmbProvider)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation"/> from a given <paramref name="copy"/> with a given <paramref name="dmbAlpha"/> and <paramref name="dmbBravo"/>
            </summary>
            <param name="copy">The <see cref="T:Tgstation.Server.Host.Models.WatchdogReattachInformationBase"/> to copy information from</param>
            <param name="dmbAlpha">The <see cref="T:Tgstation.Server.Host.Components.IDmbProvider"/> used to build <see cref="P:Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation.Alpha"/></param>
            <param name="dmbBravo">The <see cref="T:Tgstation.Server.Host.Components.IDmbProvider"/> used to build <see cref="P:Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation.Bravo"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation.ToString">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper.SendMessageCount">
            <summary>
            Number of times to send the button click message. Should be at least 2 or it may fail to focus the window
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper.RecheckDelayMs">
            <summary>
            Check for prompts each time this amount of milliseconds pass
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper.asyncDelayer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IAsyncDelayer"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper.cancellationTokenSource">
            <summary>
            The <see cref="T:System.Threading.CancellationTokenSource"/> for the <see cref="T:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper.registeredProcesses">
            <summary>
            The list of <see cref="T:Tgstation.Server.Host.Core.IProcess"/>s registered
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper.runTask">
            <summary>
            The <see cref="T:System.Threading.Tasks.Task"/> representing the lifetime of the <see cref="T:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper.#ctor(Tgstation.Server.Host.Core.IAsyncDelayer,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper"/>
            </summary>
            <param name="asyncDelayer">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper.asyncDelayer"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper.logger"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Components.Watchdog.WindowsNetworkPromptReaper.RegisterProcess(Tgstation.Server.Host.Core.IProcess)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Configuration.DatabaseConfiguration">
            <summary>
            Configuration options for the <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.DatabaseConfiguration.Section">
            <summary>
            The key for the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection"/> the <see cref="T:Tgstation.Server.Host.Configuration.DatabaseConfiguration"/> resides in
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Configuration.DatabaseConfiguration.DatabaseType">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Configuration.DatabaseType"/> to create
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Configuration.DatabaseConfiguration.ResetAdminPassword">
            <summary>
            If the admin user should be enabled and have it's password reset
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Configuration.DatabaseConfiguration.ConnectionString">
            <summary>
            The connection string for the database
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Configuration.DatabaseConfiguration.DropDatabase">
            <summary>
            If the database should be deleted on application startup. Should not be used in production!
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Configuration.DatabaseConfiguration.MySqlServerVersion">
            <summary>
            The <see cref="T:System.String"/> form of the <see cref="T:System.Version"/> of a target MySQL/MariaDB server
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Configuration.DatabaseType">
            <summary>
            Type of database to user
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.DatabaseType.SqlServer">
            <summary>
            Use Microsoft SQL Server
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.DatabaseType.MySql">
            <summary>
            Use MySQL
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.DatabaseType.MariaDB">
            <summary>
            Use MariaDB
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Configuration.FileLoggingConfiguration">
            <summary>
            File logging configuration options
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.FileLoggingConfiguration.Section">
            <summary>
            The key for the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection"/> the <see cref="T:Tgstation.Server.Host.Configuration.FileLoggingConfiguration"/> resides in
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.FileLoggingConfiguration.DefaultLogLevel">
            <summary>
            Default value for <see cref="P:Tgstation.Server.Host.Configuration.FileLoggingConfiguration.LogLevel"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.FileLoggingConfiguration.DefaultMicrosoftLogLevel">
            <summary>
            Default value for <see cref="P:Tgstation.Server.Host.Configuration.FileLoggingConfiguration.MicrosoftLogLevel"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Configuration.FileLoggingConfiguration.Directory">
            <summary>
            Where log files are stored
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Configuration.FileLoggingConfiguration.Disable">
            <summary>
            If file logging is disabled
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Configuration.FileLoggingConfiguration.LogLevel">
            <summary>
            The minimum <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> to display in logs
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Configuration.FileLoggingConfiguration.MicrosoftLogLevel">
            <summary>
            The minimum <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> to display in logs for Microsoft library sources
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Configuration.GeneralConfiguration">
            <summary>
            General configuration options
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.GeneralConfiguration.Section">
            <summary>
            The key for the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection"/> the <see cref="T:Tgstation.Server.Host.Configuration.GeneralConfiguration"/> resides in
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.GeneralConfiguration.DefaultMinimumPasswordLength">
            <summary>
            The default value for <see cref="P:Tgstation.Server.Host.Configuration.GeneralConfiguration.MinimumPasswordLength"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.GeneralConfiguration.DefaultByondTopicTimeout">
            <summary>
            The default value for <see cref="P:Tgstation.Server.Host.Configuration.GeneralConfiguration.ByondTopicTimeout"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Configuration.GeneralConfiguration.MinimumPasswordLength">
            <summary>
            Minimum length of database user passwords
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Configuration.GeneralConfiguration.GitHubAccessToken">
            <summary>
            A GitHub personal access token to use for bypassing rate limits on requests. Requires no scopes
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Configuration.GeneralConfiguration.SetupWizardMode">
            <summary>
            The <see cref="P:Tgstation.Server.Host.Configuration.GeneralConfiguration.SetupWizardMode"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Configuration.GeneralConfiguration.ByondTopicTimeout">
            <summary>
            The timeout in milliseconds for sending and receiving topics to/from DreamDaemon. Note that a single topic exchange can take up to twice this value
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Configuration.SetupWizardMode">
            <summary>
            Determines if the <see cref="T:Tgstation.Server.Host.Core.ISetupWizard"/> will run
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.SetupWizardMode.Autodetect">
            <summary>
            Run the wizard if the appsettings.{Environment}.json is not present or empty
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.SetupWizardMode.Force">
            <summary>
            Force run the wizard
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.SetupWizardMode.Only">
            <summary>
            Only run the wizard and exit
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.SetupWizardMode.Never">
            <summary>
            Never run the wizard
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Configuration.UpdatesConfiguration">
            <summary>
            Configuration for the automatic update system
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.UpdatesConfiguration.Section">
            <summary>
            The key for the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection"/> the <see cref="T:Tgstation.Server.Host.Configuration.UpdatesConfiguration"/> resides in
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.UpdatesConfiguration.DefaultGitHubRepositoryId">
            <summary>
            The tgstation/tgstation-server <see cref="P:Octokit.Repository.Id"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.UpdatesConfiguration.DefaultGitTagPrefix">
            <summary>
            The default value of <see cref="P:Tgstation.Server.Host.Configuration.UpdatesConfiguration.GitTagPrefix"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Configuration.UpdatesConfiguration.DefaultUpdatePackageAssetName">
            <summary>
            The default value of <see cref="P:Tgstation.Server.Host.Configuration.UpdatesConfiguration.UpdatePackageAssetName"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Configuration.UpdatesConfiguration.GitHubRepositoryId">
            <summary>
            The <see cref="P:Octokit.Repository.Id"/> of the tgstation-server fork to recieve updates from
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Configuration.UpdatesConfiguration.GitTagPrefix">
            <summary>
            Prefix before the <see cref="T:System.Version"/> of TGS published in git tags
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Configuration.UpdatesConfiguration.UpdatePackageAssetName">
            <summary>
            Asset package containing the new <see cref="N:Tgstation.Server.Host"/> assembly in zip form
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Controllers.AdministrationController">
            <summary>
            <see cref="T:Tgstation.Server.Host.Controllers.ModelController`1"/> for <see cref="T:Tgstation.Server.Api.Models.Administration"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.AdministrationController.gitHubClientFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IGitHubClientFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.AdministrationController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.AdministrationController.serverUpdater">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IServerControl"/> for the <see cref="T:Tgstation.Server.Host.Controllers.AdministrationController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.AdministrationController.application">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IApplication"/> for the <see cref="T:Tgstation.Server.Host.Controllers.AdministrationController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.AdministrationController.ioManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the <see cref="T:Tgstation.Server.Host.Controllers.AdministrationController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.AdministrationController.platformIdentifier">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IPlatformIdentifier"/> for the <see cref="T:Tgstation.Server.Host.Controllers.AdministrationController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.AdministrationController.updatesConfiguration">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Configuration.UpdatesConfiguration"/> for the <see cref="T:Tgstation.Server.Host.Controllers.AdministrationController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.AdministrationController.generalConfiguration">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Configuration.GeneralConfiguration"/> for the <see cref="T:Tgstation.Server.Host.Controllers.AdministrationController"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.AdministrationController.#ctor(Tgstation.Server.Host.Models.IDatabaseContext,Tgstation.Server.Host.Security.IAuthenticationContextFactory,Tgstation.Server.Host.Core.IGitHubClientFactory,Tgstation.Server.Host.Core.IServerControl,Tgstation.Server.Host.Core.IApplication,Tgstation.Server.Host.IO.IIOManager,Tgstation.Server.Host.Core.IPlatformIdentifier,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Controllers.AdministrationController},Microsoft.Extensions.Options.IOptions{Tgstation.Server.Host.Configuration.UpdatesConfiguration},Microsoft.Extensions.Options.IOptions{Tgstation.Server.Host.Configuration.GeneralConfiguration})">
            <summary>
            Construct an <see cref="T:Tgstation.Server.Host.Controllers.AdministrationController"/>
            </summary>
            <param name="databaseContext">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="authenticationContextFactory">The <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="gitHubClientFactory">The value of <see cref="F:Tgstation.Server.Host.Controllers.AdministrationController.gitHubClientFactory"/></param>
            <param name="serverUpdater">The value of <see cref="F:Tgstation.Server.Host.Controllers.AdministrationController.serverUpdater"/></param>
            <param name="application">The value of <see cref="F:Tgstation.Server.Host.Controllers.AdministrationController.application"/></param>
            <param name="ioManager">The value of <see cref="F:Tgstation.Server.Host.Controllers.AdministrationController.ioManager"/></param>
            <param name="platformIdentifier">The value of <see cref="F:Tgstation.Server.Host.Controllers.AdministrationController.platformIdentifier"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="updatesConfigurationOptions">The <see cref="T:Microsoft.Extensions.Options.IOptions`1"/> containing value of <see cref="F:Tgstation.Server.Host.Controllers.AdministrationController.updatesConfiguration"/></param>
            <param name="generalConfigurationOptions">The <see cref="T:Microsoft.Extensions.Options.IOptions`1"/> containing value of <see cref="F:Tgstation.Server.Host.Controllers.AdministrationController.generalConfiguration"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.AdministrationController.Read(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.AdministrationController.Update(Tgstation.Server.Api.Models.Administration,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.AdministrationController.Delete">
            <summary>
            Attempts to restart the server
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> of the request</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Controllers.ApiController">
            <summary>
            A <see cref="T:Microsoft.AspNetCore.Mvc.Controller"/> for API functions
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Controllers.ApiController.ApiHeaders">
            <summary>
            The <see cref="P:Tgstation.Server.Host.Controllers.ApiController.ApiHeaders"/> for the operation
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Controllers.ApiController.DatabaseContext">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> for the operation
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Controllers.ApiController.AuthenticationContext">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContext"/> for the operation
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Controllers.ApiController.Logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Controllers.ApiController.Instance">
            <summary>
            The <see cref="P:Tgstation.Server.Host.Controllers.ApiController.Instance"/> for the operation
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.ApiController.requireInstance">
            <summary>
            If <see cref="P:Tgstation.Server.Host.Security.IAuthenticationContext.InstanceUser"/> permissions are required to access the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ApiController.#ctor(Tgstation.Server.Host.Models.IDatabaseContext,Tgstation.Server.Host.Security.IAuthenticationContextFactory,Microsoft.Extensions.Logging.ILogger,System.Boolean)">
            <summary>
            Construct an <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/>
            </summary>
            <param name="databaseContext">The value of <see cref="P:Tgstation.Server.Host.Controllers.ApiController.DatabaseContext"/></param>
            <param name="authenticationContextFactory">The <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="logger">The value of <see cref="P:Tgstation.Server.Host.Controllers.ApiController.Logger"/></param>
            <param name="requireInstance">The value of <see cref="F:Tgstation.Server.Host.Controllers.ApiController.requireInstance"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ApiController.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Controllers.ByondController">
            <summary>
            Controller for managing <see cref="P:Tgstation.Server.Api.Models.Byond.Version"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.ByondController.instanceManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.IInstanceManager"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ByondController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.ByondController.jobManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IJobManager"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ByondController"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ByondController.#ctor(Tgstation.Server.Host.Models.IDatabaseContext,Tgstation.Server.Host.Security.IAuthenticationContextFactory,Tgstation.Server.Host.Components.IInstanceManager,Tgstation.Server.Host.Core.IJobManager,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Controllers.ByondController})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.ByondController"/>
            </summary>
            <param name="databaseContext">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="authenticationContextFactory">The <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="instanceManager">The value of <see cref="F:Tgstation.Server.Host.Controllers.ByondController.instanceManager"/></param>
            <param name="jobManager">The value of <see cref="F:Tgstation.Server.Host.Controllers.ByondController.jobManager"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ByondController.Read(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ByondController.List(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ByondController.Update(Tgstation.Server.Api.Models.Byond,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Controllers.ChatController">
            <summary>
            <see cref="T:Tgstation.Server.Host.Controllers.ModelController`1"/> for managing <see cref="T:Tgstation.Server.Api.Models.ChatBot"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.ChatController.instanceManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.IInstanceManager"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ChatController"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ChatController.#ctor(Tgstation.Server.Host.Models.IDatabaseContext,Tgstation.Server.Host.Security.IAuthenticationContextFactory,Tgstation.Server.Host.Components.IInstanceManager,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Controllers.ChatController})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.ChatController"/>
            </summary>
            <param name="databaseContext">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="authenticationContextFactory">The <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="instanceManager">The value of <see cref="F:Tgstation.Server.Host.Controllers.ChatController.instanceManager"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ChatController.ConvertApiChatChannel(Tgstation.Server.Api.Models.ChatChannel)">
            <summary>
            Converts <paramref name="api"/> to a <see cref="T:Tgstation.Server.Host.Models.ChatChannel"/>
            </summary>
            <param name="api">The <see cref="T:Tgstation.Server.Api.Models.ChatChannel"/> </param>
            <returns>A <see cref="T:Tgstation.Server.Host.Models.ChatChannel"/> based on <paramref name="api"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ChatController.Create(Tgstation.Server.Api.Models.ChatBot,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ChatController.Delete(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ChatController.List(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ChatController.GetId(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ChatController.Update(Tgstation.Server.Api.Models.ChatBot,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Controllers.ConfigurationController">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Controllers.ModelController`1"/> for <see cref="T:Tgstation.Server.Api.Models.ConfigurationFile"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.ConfigurationController.instanceManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.IInstanceManager"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ConfigurationController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.ConfigurationController.ioManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ConfigurationController"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ConfigurationController.#ctor(Tgstation.Server.Host.Models.IDatabaseContext,Tgstation.Server.Host.Security.IAuthenticationContextFactory,Tgstation.Server.Host.Components.IInstanceManager,Tgstation.Server.Host.IO.IIOManager,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Controllers.ConfigurationController})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.UserController"/>
            </summary>
            <param name="databaseContext">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="authenticationContextFactory">The <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="instanceManager">The value of <see cref="F:Tgstation.Server.Host.Controllers.ConfigurationController.instanceManager"/></param>
            <param name="ioManager">The value of <see cref="F:Tgstation.Server.Host.Controllers.ConfigurationController.ioManager"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ConfigurationController.ForbidDueToModeConflicts(System.String,Tgstation.Server.Host.Security.ISystemIdentity@)">
            <summary>
            If a <see cref="T:Microsoft.AspNetCore.Mvc.ForbidResult"/> should be returned from actions due to conflicts with one or both of the <see cref="P:Tgstation.Server.Api.Models.Instance.ConfigurationType"/> or the <see cref="P:Tgstation.Server.Host.Security.IAuthenticationContext.SystemIdentity"/> or a given <paramref name="path"/> tries to access parent directories
            </summary>
            <param name="path">The path to validate if any</param>
            <param name="systemIdentityToUse">The <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> to use when calling into <see cref="T:Tgstation.Server.Host.Components.StaticFiles.IConfiguration"/></param>
            <returns><see langword="true"/> if a <see cref="T:Microsoft.AspNetCore.Mvc.ForbidResult"/> should be returned, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ConfigurationController.Update(Tgstation.Server.Api.Models.ConfigurationFile,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ConfigurationController.File(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the contents of a file at a <paramref name="filePath"/>
            </summary>
            <param name="filePath">The path of the file to get</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> for the operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ConfigurationController.Directory(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the contents of a directory at a <paramref name="directoryPath"/>
            </summary>
            <param name="directoryPath">The path of the directory to get</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> for the operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ConfigurationController.List(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ConfigurationController.Create(Tgstation.Server.Api.Models.ConfigurationFile,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ConfigurationController.Delete(Tgstation.Server.Api.Models.ConfigurationFile,System.Threading.CancellationToken)">
            <summary>
            Deletes an empty <paramref name="directory"/>
            </summary>
            <param name="directory">A <see cref="T:Tgstation.Server.Api.Models.ConfigurationFile"/> representing the path to the directory to delete</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> of the operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Controllers.DreamDaemonController">
            <summary>
            <see cref="T:Tgstation.Server.Host.Controllers.ModelController`1"/> for managing the <see cref="T:Tgstation.Server.Api.Models.DreamDaemon"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.DreamDaemonController.jobManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IJobManager"/> for the <see cref="T:Tgstation.Server.Host.Controllers.DreamMakerController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.DreamDaemonController.instanceManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.IInstanceManager"/> for the <see cref="T:Tgstation.Server.Host.Controllers.DreamMakerController"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.DreamDaemonController.#ctor(Tgstation.Server.Host.Models.IDatabaseContext,Tgstation.Server.Host.Security.IAuthenticationContextFactory,Tgstation.Server.Host.Core.IJobManager,Tgstation.Server.Host.Components.IInstanceManager,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Controllers.DreamDaemonController})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.DreamDaemonController"/>
            </summary>
            <param name="databaseContext">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="authenticationContextFactory">The <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="jobManager">The value of <see cref="F:Tgstation.Server.Host.Controllers.DreamDaemonController.jobManager"/></param>
            <param name="instanceManager">The value of <see cref="F:Tgstation.Server.Host.Controllers.DreamDaemonController.instanceManager"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.DreamDaemonController.Create(Tgstation.Server.Api.Models.DreamDaemon,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.DreamDaemonController.Read(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.DreamDaemonController.ReadImpl(Tgstation.Server.Host.Models.DreamDaemonSettings,System.Threading.CancellationToken)">
            <summary>
            Implementation of <see cref="M:Tgstation.Server.Host.Controllers.DreamDaemonController.Read(System.Threading.CancellationToken)"/>
            </summary>
            <param name="settings">The <see cref="T:Tgstation.Server.Host.Models.DreamDaemonSettings"/> to operate on if any</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> of the operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.DreamDaemonController.Delete(System.Threading.CancellationToken)">
            <summary>
            Stops DreamDaemon if it's running
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> of the operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.DreamDaemonController.Update(Tgstation.Server.Api.Models.DreamDaemon,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.DreamDaemonController.Restart(System.Threading.CancellationToken)">
            <summary>
            Handle a HTTP PATCH to the <see cref="T:Tgstation.Server.Host.Controllers.DreamDaemonController"/>
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> of the request</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Controllers.DreamMakerController">
            <summary>
            Controller for managing the compiler
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.DreamMakerController.jobManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IJobManager"/> for the <see cref="T:Tgstation.Server.Host.Controllers.DreamMakerController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.DreamMakerController.instanceManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.IInstanceManager"/> for the <see cref="T:Tgstation.Server.Host.Controllers.DreamMakerController"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.DreamMakerController.#ctor(Tgstation.Server.Host.Models.IDatabaseContext,Tgstation.Server.Host.Security.IAuthenticationContextFactory,Tgstation.Server.Host.Core.IJobManager,Tgstation.Server.Host.Components.IInstanceManager,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Controllers.DreamMakerController})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.DreamMakerController"/>
            </summary>
            <param name="databaseContext">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="authenticationContextFactory">The <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="jobManager">The value of <see cref="F:Tgstation.Server.Host.Controllers.DreamMakerController.jobManager"/></param>
            <param name="instanceManager">The value of <see cref="F:Tgstation.Server.Host.Controllers.DreamMakerController.instanceManager"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.DreamMakerController.Read(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.DreamMakerController.GetId(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.DreamMakerController.List(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.DreamMakerController.Create(Tgstation.Server.Api.Models.DreamMaker,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.DreamMakerController.Update(Tgstation.Server.Api.Models.DreamMaker,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Controllers.HomeController">
            <summary>
            Main <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/> for the <see cref="T:Tgstation.Server.Host.Core.Application"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.HomeController.tokenFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Security.ITokenFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.HomeController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.HomeController.systemIdentityFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Security.ISystemIdentityFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.HomeController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.HomeController.cryptographySuite">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Security.ICryptographySuite"/> for the <see cref="T:Tgstation.Server.Host.Controllers.HomeController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.HomeController.application">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IApplication"/> for the <see cref="T:Tgstation.Server.Host.Controllers.HomeController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.HomeController.identityCache">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Security.IIdentityCache"/> for the <see cref="T:Tgstation.Server.Host.Controllers.HomeController"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.HomeController.#ctor(Tgstation.Server.Host.Models.IDatabaseContext,Tgstation.Server.Host.Security.IAuthenticationContextFactory,Tgstation.Server.Host.Security.ITokenFactory,Tgstation.Server.Host.Security.ISystemIdentityFactory,Tgstation.Server.Host.Security.ICryptographySuite,Tgstation.Server.Host.Core.IApplication,Tgstation.Server.Host.Security.IIdentityCache,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Controllers.HomeController})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.HomeController"/>
            </summary>
            <param name="databaseContext">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="authenticationContextFactory">The <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="tokenFactory">The value of <see cref="F:Tgstation.Server.Host.Controllers.HomeController.tokenFactory"/></param>
            <param name="systemIdentityFactory">The value of <see cref="F:Tgstation.Server.Host.Controllers.HomeController.systemIdentityFactory"/></param>
            <param name="cryptographySuite">The value of <see cref="F:Tgstation.Server.Host.Controllers.HomeController.cryptographySuite"/></param>
            <param name="application">The value of <see cref="F:Tgstation.Server.Host.Controllers.HomeController.application"/></param>
            <param name="identityCache">The value of <see cref="F:Tgstation.Server.Host.Controllers.HomeController.identityCache"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.HomeController.Home">
            <summary>
            Returns the version of the <see cref="T:Tgstation.Server.Host.Core.Application"/>
            </summary>
            <returns><see cref="P:Tgstation.Server.Host.Core.Application.Version"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.HomeController.CreateToken(System.Threading.CancellationToken)">
            <summary>
            Attempt to authenticate a <see cref="T:Tgstation.Server.Host.Models.User"/> using <see cref="P:Tgstation.Server.Host.Controllers.ApiController.ApiHeaders"/>
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> of the operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Controllers.InstanceController">
            <summary>
            Controller for managing <see cref="T:Tgstation.Server.Host.Components.Instance"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.InstanceController.InstanceAttachFileName">
            <summary>
            File name to allow attaching instances
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.InstanceController.jobManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IJobManager"/> for the <see cref="T:Tgstation.Server.Host.Controllers.InstanceController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.InstanceController.instanceManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.IInstanceManager"/> for the <see cref="T:Tgstation.Server.Host.Controllers.InstanceController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.InstanceController.ioManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the <see cref="T:Tgstation.Server.Host.Controllers.InstanceController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.InstanceController.application">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IApplication"/> for the <see cref="T:Tgstation.Server.Host.Controllers.InstanceController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.InstanceController.platformIdentifier">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IPlatformIdentifier"/> for the <see cref="T:Tgstation.Server.Host.Controllers.InstanceController"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.InstanceController.#ctor(Tgstation.Server.Host.Models.IDatabaseContext,Tgstation.Server.Host.Security.IAuthenticationContextFactory,Tgstation.Server.Host.Core.IJobManager,Tgstation.Server.Host.Components.IInstanceManager,Tgstation.Server.Host.IO.IIOManager,Tgstation.Server.Host.Core.IApplication,Tgstation.Server.Host.Core.IPlatformIdentifier,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Controllers.InstanceController})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.InstanceController"/>
            </summary>
            <param name="databaseContext">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="authenticationContextFactory">The <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="jobManager">The value of <see cref="F:Tgstation.Server.Host.Controllers.InstanceController.jobManager"/></param>
            <param name="instanceManager">The value of <see cref="F:Tgstation.Server.Host.Controllers.InstanceController.instanceManager"/></param>
            <param name="ioManager">The value of <see cref="F:Tgstation.Server.Host.Controllers.InstanceController.ioManager"/></param>
            <param name="application">The value of <see cref="F:Tgstation.Server.Host.Controllers.InstanceController.application"/></param>
            <param name="platformIdentifier">The value of <see cref="F:Tgstation.Server.Host.Controllers.InstanceController.platformIdentifier"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.InstanceController.Create(Tgstation.Server.Api.Models.Instance,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.InstanceController.Delete(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.InstanceController.Update(Tgstation.Server.Api.Models.Instance,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.InstanceController.List(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.InstanceController.GetId(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Controllers.InstanceUserController">
            <summary>
            For managing <see cref="T:Tgstation.Server.Host.Models.User"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.InstanceUserController.#ctor(Tgstation.Server.Host.Models.IDatabaseContext,Tgstation.Server.Host.Security.IAuthenticationContextFactory,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Controllers.InstanceUserController})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.UserController"/>
            </summary>
            <param name="databaseContext">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="authenticationContextFactory">The <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.InstanceUserController.StandardModelChecks(Tgstation.Server.Api.Models.InstanceUser)">
            <summary>
            Checks a <paramref name="model"/> for errors
            </summary>
            <param name="model">The <see cref="T:Tgstation.Server.Api.Models.InstanceUser"/> to check</param>
            <returns>A <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult"/> explaining any errors, <see langword="null"/> if none</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.InstanceUserController.Create(Tgstation.Server.Api.Models.InstanceUser,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.InstanceUserController.Update(Tgstation.Server.Api.Models.InstanceUser,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.InstanceUserController.Read(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.InstanceUserController.List(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.InstanceUserController.GetId(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.InstanceUserController.Delete(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Controllers.JobController">
            <summary>
            <see cref="T:Tgstation.Server.Host.Controllers.ModelController`1"/> for <see cref="T:Tgstation.Server.Api.Models.Job"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.JobController.jobManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IJobManager"/> for the <see cref="T:Tgstation.Server.Host.Controllers.JobController"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.JobController.#ctor(Tgstation.Server.Host.Models.IDatabaseContext,Tgstation.Server.Host.Security.IAuthenticationContextFactory,Tgstation.Server.Host.Core.IJobManager,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Controllers.JobController})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.HomeController"/>
            </summary>
            <param name="databaseContext">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="authenticationContextFactory">The <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="jobManager">The value of <see cref="F:Tgstation.Server.Host.Controllers.JobController.jobManager"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.JobController.Read(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.JobController.List(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.JobController.Delete(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.JobController.GetId(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Controllers.ModelController`1">
            <summary>
            An <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/> representing a <typeparamref name="TModel"/>
            </summary>
            <typeparam name="TModel">The model being represented</typeparam>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ModelController`1.#ctor(Tgstation.Server.Host.Models.IDatabaseContext,Tgstation.Server.Host.Security.IAuthenticationContextFactory,Microsoft.Extensions.Logging.ILogger,System.Boolean)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.ModelController`1"/>
            </summary>
            <param name="databaseContext">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="authenticationContextFactory">The <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="requireInstance">If the <see cref="T:Tgstation.Server.Host.Controllers.ModelController`1"/> requires an <see cref="P:Tgstation.Server.Host.Security.IAuthenticationContext.InstanceUser"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ModelController`1.Create(`0,System.Threading.CancellationToken)">
            <summary>
            Attempt to create a <paramref name="model"/>
            </summary>
            <param name="model">The <typeparamref name="TModel"/> being created</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> of the operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ModelController`1.Read(System.Threading.CancellationToken)">
            <summary>
            Attempt to read a <typeparamref name="TModel"/>
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> of the operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ModelController`1.GetId(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Attempt to get a specific a <typeparamref name="TModel"/>
            </summary>
            <param name="id">The ID of the model to get</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> of the operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ModelController`1.Update(`0,System.Threading.CancellationToken)">
            <summary>
            Attempt to update a <paramref name="model"/>
            </summary>
            <param name="model">The <typeparamref name="TModel"/> being updated</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> of the operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ModelController`1.Delete(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Attempt to delete a model with a particular <paramref name="id"/>
            </summary>
            <param name="id">The ID of the model to delete</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> of the operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.ModelController`1.List(System.Threading.CancellationToken)">
            <summary>
            Attempt to list entries of the <typeparamref name="TModel"/>
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> of the operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Controllers.RepositoryController">
            <summary>
            Controller for managing the <see cref="T:Tgstation.Server.Api.Models.Repository"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.RepositoryController.instanceManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Components.IInstanceManager"/> for the <see cref="T:Tgstation.Server.Host.Controllers.RepositoryController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.RepositoryController.gitHubClientFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IGitHubClientFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.RepositoryController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.RepositoryController.jobManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IJobManager"/> for the <see cref="T:Tgstation.Server.Host.Controllers.RepositoryController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.RepositoryController.generalConfiguration">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Configuration.GeneralConfiguration"/> for the <see cref="T:Tgstation.Server.Host.Controllers.RepositoryController"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.RepositoryController.#ctor(Tgstation.Server.Host.Models.IDatabaseContext,Tgstation.Server.Host.Security.IAuthenticationContextFactory,Tgstation.Server.Host.Components.IInstanceManager,Tgstation.Server.Host.Core.IGitHubClientFactory,Tgstation.Server.Host.Core.IJobManager,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Controllers.RepositoryController},Microsoft.Extensions.Options.IOptions{Tgstation.Server.Host.Configuration.GeneralConfiguration})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.RepositoryController"/>
            </summary>
            <param name="databaseContext">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="authenticationContextFactory">The <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="instanceManager">The value of <see cref="F:Tgstation.Server.Host.Controllers.RepositoryController.instanceManager"/></param>
            <param name="gitHubClientFactory">The value of <see cref="F:Tgstation.Server.Host.Controllers.RepositoryController.gitHubClientFactory"/></param>
            <param name="jobManager">The value of <see cref="F:Tgstation.Server.Host.Controllers.RepositoryController.jobManager"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="generalConfigurationOptions">The <see cref="T:Microsoft.Extensions.Options.IOptions`1"/> containing value of <see cref="F:Tgstation.Server.Host.Controllers.RepositoryController.generalConfiguration"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.RepositoryController.Create(Tgstation.Server.Api.Models.Repository,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.RepositoryController.Delete(System.Threading.CancellationToken)">
            <summary>
            Delete the <see cref="T:Tgstation.Server.Api.Models.Repository"/>
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> of the operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.RepositoryController.Read(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.RepositoryController.Update(Tgstation.Server.Api.Models.Repository,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute">
            <summary>
            Helper for using the <see cref="T:Microsoft.AspNetCore.Authorization.AuthorizeAttribute"/> with the <see cref="N:Tgstation.Server.Api.Rights"/> system
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute.#ctor">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute.#ctor(Tgstation.Server.Api.Rights.AdministrationRights)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute"/> for <see cref="T:Tgstation.Server.Api.Rights.AdministrationRights"/>
            </summary>
            <param name="requiredRights">The rights required</param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute.#ctor(Tgstation.Server.Api.Rights.InstanceManagerRights)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute"/> for <see cref="T:Tgstation.Server.Api.Rights.InstanceManagerRights"/>
            </summary>
            <param name="requiredRights">The rights required</param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute.#ctor(Tgstation.Server.Api.Rights.RepositoryRights)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute"/> for <see cref="T:Tgstation.Server.Api.Rights.RepositoryRights"/>
            </summary>
            <param name="requiredRights">The rights required</param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute.#ctor(Tgstation.Server.Api.Rights.ByondRights)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute"/> for <see cref="T:Tgstation.Server.Api.Rights.ByondRights"/>
            </summary>
            <param name="requiredRights">The rights required</param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute.#ctor(Tgstation.Server.Api.Rights.DreamMakerRights)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute"/> for <see cref="T:Tgstation.Server.Api.Rights.DreamMakerRights"/>
            </summary>
            <param name="requiredRights">The rights required</param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute.#ctor(Tgstation.Server.Api.Rights.DreamDaemonRights)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute"/> for <see cref="T:Tgstation.Server.Api.Rights.DreamDaemonRights"/>
            </summary>
            <param name="requiredRights">The rights required</param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute.#ctor(Tgstation.Server.Api.Rights.ChatBotRights)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute"/> for <see cref="T:Tgstation.Server.Api.Rights.ChatBotRights"/>
            </summary>
            <param name="requiredRights">The rights required</param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute.#ctor(Tgstation.Server.Api.Rights.ConfigurationRights)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute"/> for <see cref="T:Tgstation.Server.Api.Rights.ConfigurationRights"/>
            </summary>
            <param name="requiredRights">The rights required</param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute.#ctor(Tgstation.Server.Api.Rights.InstanceUserRights)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute"/> for <see cref="T:Tgstation.Server.Api.Rights.InstanceUserRights"/>
            </summary>
            <param name="requiredRights">The rights required</param>
        </member>
        <member name="T:Tgstation.Server.Host.Controllers.UserController">
            <summary>
            For managing <see cref="T:Tgstation.Server.Host.Models.User"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.UserController.systemIdentityFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Security.ISystemIdentityFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.UserController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.UserController.cryptographySuite">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Security.ICryptographySuite"/> for the <see cref="T:Tgstation.Server.Host.Controllers.UserController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.UserController.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Controllers.UserController"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Controllers.UserController.generalConfiguration">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Configuration.GeneralConfiguration"/> for the <see cref="T:Tgstation.Server.Host.Controllers.UserController"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.UserController.#ctor(Tgstation.Server.Host.Models.IDatabaseContext,Tgstation.Server.Host.Security.IAuthenticationContextFactory,Tgstation.Server.Host.Security.ISystemIdentityFactory,Tgstation.Server.Host.Security.ICryptographySuite,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Controllers.UserController},Microsoft.Extensions.Options.IOptions{Tgstation.Server.Host.Configuration.GeneralConfiguration})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Controllers.UserController"/>
            </summary>
            <param name="databaseContext">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="authenticationContextFactory">The <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Controllers.ApiController"/></param>
            <param name="systemIdentityFactory">The value of <see cref="F:Tgstation.Server.Host.Controllers.UserController.systemIdentityFactory"/></param>
            <param name="cryptographySuite">The value of <see cref="F:Tgstation.Server.Host.Controllers.UserController.cryptographySuite"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Controllers.UserController.logger"/></param>
            <param name="generalConfigurationOptions">The <see cref="T:Microsoft.Extensions.Options.IOptions`1"/> containing the value of <see cref="F:Tgstation.Server.Host.Controllers.UserController.generalConfiguration"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.UserController.Create(Tgstation.Server.Api.Models.UserUpdate,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.UserController.Update(Tgstation.Server.Api.Models.UserUpdate,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.UserController.Read(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.UserController.List(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Controllers.UserController.GetId(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Core.Application">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Core.Application.VersionPrefix">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Core.Application.Version">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Core.Application.VersionString">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Core.Application.configuration">
            <summary>
            The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> for the <see cref="T:Tgstation.Server.Host.Core.Application"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Core.Application.hostingEnvironment">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Hosting.IHostingEnvironment"/> for the <see cref="T:Tgstation.Server.Host.Core.Application"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Core.Application.startupTcs">
            <summary>
            The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> used for determining when the <see cref="T:Tgstation.Server.Host.Core.Application"/> is <see cref="M:Tgstation.Server.Host.Core.Application.Ready(System.Exception)"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Core.Application.tokenFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Security.ITokenFactory"/> for the <see cref="T:Tgstation.Server.Host.Core.Application"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.Application.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Construct an <see cref="T:Tgstation.Server.Host.Core.Application"/>
            </summary>
            <param name="configuration">The value of <see cref="F:Tgstation.Server.Host.Core.Application.configuration"/></param>
            <param name="hostingEnvironment">The value of <see cref="F:Tgstation.Server.Host.Core.Application.hostingEnvironment"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Core.Application.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure dependency injected services
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to configure</param>
        </member>
        <member name="M:Tgstation.Server.Host.Core.Application.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Tgstation.Server.Host.Core.IServerControl,Tgstation.Server.Host.Security.ITokenFactory,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Core.Application})">
            <summary>
            Configure the <see cref="T:Tgstation.Server.Host.Core.Application"/>
            </summary>
            <param name="applicationBuilder">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> to configure</param>
            <param name="serverControl">The <see cref="T:Tgstation.Server.Host.Core.IServerControl"/> for the <see cref="T:Tgstation.Server.Host.Core.Application"/></param>
            <param name="tokenFactory">The value of <see cref="F:Tgstation.Server.Host.Core.Application.tokenFactory"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Core.Application"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Core.Application.Ready(System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Core.ApplicationBuilderExtensions">
            <summary>
            Extensions for <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.ApplicationBuilderExtensions.GetLogger(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Gets a <see cref="T:Microsoft.Extensions.Logging.ILogger"/> from a given <paramref name="httpContext"/>
            </summary>
            <param name="httpContext">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> to get the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> from</param>
            <returns>A new <see cref="T:Microsoft.Extensions.Logging.ILogger"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.ApplicationBuilderExtensions.UseDbConflictHandling(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Return a <see cref="T:Microsoft.AspNetCore.Mvc.ConflictObjectResult"/> for <see cref="T:Microsoft.EntityFrameworkCore.DbUpdateException"/>s
            </summary>
            <param name="applicationBuilder">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> to configure</param>
        </member>
        <member name="M:Tgstation.Server.Host.Core.ApplicationBuilderExtensions.UseCancelledRequestSuppression(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Suppress TaskCanceledException warnings when a user aborts a request
            </summary>
            <param name="applicationBuilder">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> to configure</param>
        </member>
        <member name="T:Tgstation.Server.Host.Core.AsyncDelayer">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Core.AsyncDelayer.Delay(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Core.DatabaseContextFactory">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Core.DatabaseContextFactory.scopeFactory">
            <summary>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory"/> for the <see cref="T:Tgstation.Server.Host.Core.DatabaseContextFactory"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.DatabaseContextFactory.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Core.DatabaseContextFactory"/>
            </summary>
            <param name="scopeFactory">The value of <see cref="F:Tgstation.Server.Host.Core.DatabaseContextFactory.scopeFactory"/>. Created scopes must be able to provide instances of <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Core.DatabaseContextFactory.UseContext(System.Func{Tgstation.Server.Host.Models.IDatabaseContext,System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Core.DBConnectionFactory">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Core.DBConnectionFactory.CreateConnection(System.String,Tgstation.Server.Host.Configuration.DatabaseType)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Core.GitHubClientFactory">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Core.GitHubClientFactory.application">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IApplication"/> for the <see cref="T:Tgstation.Server.Host.Core.GitHubClientFactory"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.GitHubClientFactory.#ctor(Tgstation.Server.Host.Core.IApplication)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Core.GitHubClientFactory"/>
            </summary>
            <param name="application">The value of <see cref="F:Tgstation.Server.Host.Core.GitHubClientFactory.application"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Core.GitHubClientFactory.CreateBaseClient">
            <summary>
            Create a <see cref="T:Octokit.GitHubClient"/>
            </summary>
            <returns>A new <see cref="T:Octokit.GitHubClient"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.GitHubClientFactory.CreateClient">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Core.GitHubClientFactory.CreateClient(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Core.IApplication">
            <summary>
            Configures the ASP.NET Core web application
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Core.IApplication.VersionPrefix">
            <summary>
            Prefix to <see cref="P:Tgstation.Server.Host.Core.IApplication.VersionString"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Core.IApplication.VersionString">
            <summary>
            A more verbose version of <see cref="P:Tgstation.Server.Host.Core.IApplication.Version"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Core.IApplication.Version">
            <summary>
            The version of the <see cref="T:Tgstation.Server.Host.Core.Application"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IApplication.Ready(System.Exception)">
            <summary>
            Mark the <see cref="T:Tgstation.Server.Host.Core.IApplication"/> as ready to run
            </summary>
            <param name="initializationError">The <see cref="T:System.Exception"/> that put the application in a corrupted state if any</param>
        </member>
        <member name="T:Tgstation.Server.Host.Core.IAsyncDelayer">
            <summary>
            For waiting asynchronously
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IAsyncDelayer.Delay(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Create a <see cref="T:System.Threading.Tasks.Task"/> that completes after a given <paramref name="timeSpan"/>
            </summary>
            <param name="timeSpan">The <see cref="T:System.TimeSpan"/> that must elapse</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Core.IDatabaseContextFactory">
            <summary>
            Factory for scoping usage of <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/>s. Meant for use by <see cref="N:Tgstation.Server.Host.Components"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IDatabaseContextFactory.UseContext(System.Func{Tgstation.Server.Host.Models.IDatabaseContext,System.Threading.Tasks.Task})">
            <summary>
            Run an <paramref name="operation"/> in the scope of an <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/>
            </summary>
            <param name="operation">The operation to run</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running <paramref name="operation"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Core.IDBConnectionFactory">
            <summary>
            For creating <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IDBConnectionFactory.CreateConnection(System.String,Tgstation.Server.Host.Configuration.DatabaseType)">
            <summary>
            Create a <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
            <param name="connectionString">The <see cref="P:System.Data.Common.DbConnection.ConnectionString"/></param>
            <param name="databaseType">The <see cref="T:Tgstation.Server.Host.Configuration.DatabaseType"/> to create</param>
            <returns>A new <see cref="T:System.Data.Common.DbConnection"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Core.IGitHubClientFactory">
            <summary>
            For creating <see cref="T:Octokit.IGitHubClient"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IGitHubClientFactory.CreateClient">
            <summary>
            Create a client with anonymous authentication. Low rate limit
            </summary>
            <returns>A new <see cref="T:Octokit.IGitHubClient"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IGitHubClientFactory.CreateClient(System.String)">
            <summary>
            Create a client with authentication using a personal access token
            </summary>
            <param name="accessToken">The GitHub personal access token</param>
            <returns>A new <see cref="T:Octokit.IGitHubClient"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Core.IJobManager">
            <summary>
            Manages the runtime of <see cref="T:Tgstation.Server.Host.Models.Job"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IJobManager.JobProgress(Tgstation.Server.Host.Models.Job)">
            <summary>
            Get the <see cref="P:Tgstation.Server.Api.Models.Job.Progress"/> for a <paramref name="job"/>
            </summary>
            <param name="job">The <see cref="T:Tgstation.Server.Host.Models.Job"/> to get <see cref="P:Tgstation.Server.Api.Models.Job.Progress"/> for</param>
            <returns>The <see cref="P:Tgstation.Server.Api.Models.Job.Progress"/> of <paramref name="job"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IJobManager.RegisterOperation(Tgstation.Server.Host.Models.Job,System.Func{Tgstation.Server.Host.Models.Job,Tgstation.Server.Host.Models.IDatabaseContext,System.Action{System.Int32},System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Registers a given <see cref="T:Tgstation.Server.Host.Models.Job"/> and begins running it
            </summary>
            <param name="job">The <see cref="T:Tgstation.Server.Host.Models.Job"/></param>
            <param name="operation">The operation to run taking the started <see cref="T:Tgstation.Server.Host.Models.Job"/>, a <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/>, progress reporter <see cref="T:System.Action`1"/> and a <see cref="T:System.Threading.CancellationToken"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing a running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IJobManager.WaitForJobCompletion(Tgstation.Server.Host.Models.Job,Tgstation.Server.Host.Models.User,System.Threading.CancellationToken,System.Threading.CancellationToken)">
            <summary>
            Wait for a given <paramref name="job"/> to complete
            </summary>
            <param name="job">The <see cref="T:Tgstation.Server.Host.Models.Job"/> to wait for </param>
            <param name="canceller">The <see cref="T:Tgstation.Server.Host.Models.User"/> to cancel the <paramref name="job"/></param>
            <param name="jobCancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that will cancel the <paramref name="job"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the <see cref="T:Tgstation.Server.Host.Models.Job"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IJobManager.CancelJob(Tgstation.Server.Host.Models.Job,Tgstation.Server.Host.Models.User,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Cancels a give <paramref name="job"/>
            </summary>
            <param name="job">The <see cref="T:Tgstation.Server.Host.Models.Job"/> to cancel</param>
            <param name="user">The <see cref="T:Tgstation.Server.Host.Models.User"/> who cancelled the <paramref name="job"/></param>
            <param name="blocking">If the operation should wait until the job exits before completing</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in <see langword="true"/> if the <paramref name="job"/> was cancelled, <see langword="false"/> if it couldn't be found</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Core.IPlatformIdentifier">
            <summary>
            For identifying the current platform
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Core.IPlatformIdentifier.IsWindows">
            <summary>
            If the current platform is a Windows platform
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Core.IPlatformIdentifier.ScriptFileExtension">
            <summary>
            The extension of executable script files for the system
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Core.IProcess">
            <summary>
            Abstraction over a <see cref="T:System.Diagnostics.Process"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Core.IProcess.Id">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IProcess"/>' ID
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Core.IProcess.Startup">
            <summary>
            The <see cref="T:System.Threading.Tasks.Task"/> representing the time until the <see cref="T:Tgstation.Server.Host.Core.IProcess"/> becomes "idle"
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IProcess.GetErrorOutput">
            <summary>
            Get the stderr output of the <see cref="T:Tgstation.Server.Host.Core.IProcess"/>
            </summary>
            <returns>The stderr output of the <see cref="T:Tgstation.Server.Host.Core.IProcess"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IProcess.GetStandardOutput">
            <summary>
            Get the stdout output of the <see cref="T:Tgstation.Server.Host.Core.IProcess"/>
            </summary>
            <returns>The stdout output of the <see cref="T:Tgstation.Server.Host.Core.IProcess"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IProcess.GetCombinedOutput">
            <summary>
            Get the stderr and stdout output of the <see cref="T:Tgstation.Server.Host.Core.IProcess"/>
            </summary>
            <returns>The stderr and stdout output of the <see cref="T:Tgstation.Server.Host.Core.IProcess"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IProcess.Terminate">
            <summary>
            Terminates the process
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Core.IProcessBase">
            <summary>
            Represents process lifetime
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Core.IProcessBase.Lifetime">
            <summary>
            The <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the exit code of the process
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IProcessBase.SetHighPriority">
            <summary>
            Set's the owned <see cref="P:System.Diagnostics.Process.PriorityClass"/> to <see cref="F:System.Diagnostics.ProcessPriorityClass.AboveNormal"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Core.IProcessExecutor">
            <summary>
            For launching <see cref="T:Tgstation.Server.Host.Core.IProcess"/>'
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IProcessExecutor.LaunchProcess(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Launch a <see cref="T:Tgstation.Server.Host.Core.IProcess"/>
            </summary>
            <param name="fileName">The full path to the executable file</param>
            <param name="workingDirectory">The working directory for the <see cref="T:Tgstation.Server.Host.Core.IProcess"/></param>
            <param name="arguments">The arguments for the <see cref="T:Tgstation.Server.Host.Core.IProcess"/></param>
            <param name="readOutput">If standard output should be read</param>
            <param name="readError">If standard error should be read</param>
            <param name="noShellExecute">If shell execute should not be used. Ignored if <paramref name="readError"/> or <paramref name="readOutput"/> are set</param>
            <returns>A new <see cref="T:Tgstation.Server.Host.Core.IProcess"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IProcessExecutor.GetProcess(System.Int32)">
            <summary>
            Get a <see cref="T:Tgstation.Server.Host.Core.IProcess"/> by <paramref name="id"/>
            </summary>
            <param name="id">The <see cref="P:Tgstation.Server.Host.Core.IProcess.Id"/></param>
            <returns>The <see cref="T:Tgstation.Server.Host.Core.IProcess"/> represented by <paramref name="id"/> on success, <see langword="null"/> on failure</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Core.IRestartHandler">
            <summary>
            Handler for server restarts
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IRestartHandler.HandleRestart(System.Version,System.Threading.CancellationToken)">
            <summary>
            Handle a restart of the server
            </summary>
            <param name="updateVersion">The <see cref="T:System.Version"/> being updated to, <see langword="null"/> if not being changed</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Core.IRestartRegistration">
            <summary>
            Represents the lifetime of a <see cref="T:Tgstation.Server.Host.Core.IRestartHandler"/> registration
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Core.IServerControl">
            <summary>
            Represents a service that may take an updated <see cref="N:Tgstation.Server.Host"/> assembly and run it, stopping the current assembly in the process
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Core.IServerControl.WatchdogPresent">
            <summary>
            <see langword="true"/> if live updates are supported, <see langword="false"/>. <see cref="M:Tgstation.Server.Host.Core.IServerControl.ApplyUpdate(System.Version,System.Uri,Tgstation.Server.Host.IO.IIOManager)"/> and <see cref="M:Tgstation.Server.Host.Core.IServerControl.Restart"/> will fail if this is <see langword="false"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IServerControl.ApplyUpdate(System.Version,System.Uri,Tgstation.Server.Host.IO.IIOManager)">
            <summary>
            Run a new <see cref="N:Tgstation.Server.Host"/> assembly and stop the current one. This will likely trigger all active <see cref="T:System.Threading.CancellationToken"/>s
            </summary>
            <param name="version">The <see cref="T:System.Version"/> the <see cref="T:Tgstation.Server.Host.Core.IServerControl"/> is updating to</param>
            <param name="updateZipUrl">The <see cref="T:System.Uri"/> that points to the .zip file that contains the new <see cref="N:Tgstation.Server.Host"/> assembly</param>
            <param name="ioManager">The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the operation</param>
            <returns><see langword="true"/> if the update started successfully, <see langword="false"/> if there was another update in progress</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IServerControl.RegisterForRestart(Tgstation.Server.Host.Core.IRestartHandler)">
            <summary>
            Register a given <paramref name="handler"/> to run before stopping the server for a restart
            </summary>
            <param name="handler">The <see cref="T:Tgstation.Server.Host.Core.IRestartHandler"/> to register</param>
            <returns>A new <see cref="T:Tgstation.Server.Host.Core.IRestartRegistration"/> representing the scope of the registration</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.IServerControl.Restart">
            <summary>
            Restarts the <see cref="N:Tgstation.Server.Host"/>
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Core.ISetupWizard">
            <summary>
            The command line <see cref="N:Tgstation.Server.Host.Configuration"/> setup wizard
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.ISetupWizard.CheckRunWizard(System.Threading.CancellationToken)">
            <summary>
            Run the setup wizard if necessary
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in <see langword="true"/> if the wizard ran, <see langword="false"/> otherwise</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Core.JobException">
            <summary>
            Operation exceptions thrown from the context of a <see cref="T:Tgstation.Server.Host.Models.Job"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.JobException.#ctor">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Core.JobException"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.JobException.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Core.JobException"/> with a <paramref name="message"/>
            </summary>
            <param name="message">The message for the <see cref="T:System.Exception"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Core.JobException.#ctor(System.String,System.Exception)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Core.JobException"/> with a <paramref name="message"/> and <paramref name="innerException"/>
            </summary>
            <param name="message">The message for the <see cref="T:System.Exception"/></param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> for the nase <see cref="T:System.Exception"/></param>
        </member>
        <member name="T:Tgstation.Server.Host.Core.JobHandler">
            <summary>
            Class for pairing <see cref="T:System.Threading.Tasks.Task"/>s with <see cref="T:System.Threading.CancellationTokenSource"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Core.JobHandler.cancellationTokenSource">
            <summary>
            The <see cref="T:System.Threading.CancellationTokenSource"/> for <see cref="F:Tgstation.Server.Host.Core.JobHandler.task"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Core.JobHandler.task">
            <summary>
            The <see cref="T:System.Threading.Tasks.Task"/> being run
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.JobHandler.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Core.JobHandler"/>
            </summary>
            <param name="job">A <see cref="T:System.Func`2"/> taking a <see cref="T:System.Threading.CancellationToken"/> and returning a <see cref="T:System.Threading.Tasks.Task"/> that the <see cref="T:Tgstation.Server.Host.Core.JobHandler"/> will wrap</param>
        </member>
        <member name="M:Tgstation.Server.Host.Core.JobHandler.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Core.JobHandler.Progress">
            <summary>
            The progress of the job
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.JobHandler.Wait(System.Threading.CancellationToken)">
            <summary>
            Wait for <see cref="F:Tgstation.Server.Host.Core.JobHandler.task"/> to complete
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.JobHandler.Cancel">
            <summary>
            Cancels <see cref="F:Tgstation.Server.Host.Core.JobHandler.task"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Core.JobManager">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Core.JobManager.databaseContextFactory">
            <summary>
            The <see cref="T:System.IServiceProvider"/> for the <see cref="T:Tgstation.Server.Host.Core.JobManager"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Core.JobManager.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Core.JobManager"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Core.JobManager.jobs">
            <summary>
            <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="P:Tgstation.Server.Api.Models.Internal.Job.Id"/> to running <see cref="T:Tgstation.Server.Host.Core.JobHandler"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.JobManager.#ctor(Tgstation.Server.Host.Core.IDatabaseContextFactory,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Core.JobManager})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Core.JobManager"/>
            </summary>
            <param name="databaseContextFactory">The value of <see cref="F:Tgstation.Server.Host.Core.JobManager.databaseContextFactory"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Core.JobManager.logger"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Core.JobManager.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Core.JobManager.CheckGetJob(Tgstation.Server.Host.Models.Job)">
            <summary>
            Gets the <see cref="T:Tgstation.Server.Host.Core.JobHandler"/> for a given <paramref name="job"/> if it exists
            </summary>
            <param name="job">The <see cref="T:Tgstation.Server.Host.Models.Job"/> to get the <see cref="T:Tgstation.Server.Host.Core.JobHandler"/> for</param>
            <returns>The <see cref="T:Tgstation.Server.Host.Core.JobHandler"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.JobManager.RunJob(Tgstation.Server.Host.Models.Job,System.Func{Tgstation.Server.Host.Models.Job,Tgstation.Server.Host.Models.IDatabaseContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Runner for <see cref="T:Tgstation.Server.Host.Core.JobHandler"/>s
            </summary>
            <param name="job">The <see cref="T:Tgstation.Server.Host.Models.Job"/> being run</param>
            <param name="operation">The operation for the <paramref name="job"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.JobManager.RegisterOperation(Tgstation.Server.Host.Models.Job,System.Func{Tgstation.Server.Host.Models.Job,Tgstation.Server.Host.Models.IDatabaseContext,System.Action{System.Int32},System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Core.JobManager.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Core.JobManager.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Core.JobManager.CancelJob(Tgstation.Server.Host.Models.Job,Tgstation.Server.Host.Models.User,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Core.JobManager.JobProgress(Tgstation.Server.Host.Models.Job)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Core.JobManager.WaitForJobCompletion(Tgstation.Server.Host.Models.Job,Tgstation.Server.Host.Models.User,System.Threading.CancellationToken,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Core.PlatformIdentifier">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Core.PlatformIdentifier.IsWindows">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Core.PlatformIdentifier.ScriptFileExtension">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Core.PlatformIdentifier.#ctor">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Core.PlatformIdentifier"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Core.Process">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Core.Process.Id">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Core.Process.Startup">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Core.Process.Lifetime">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Core.Process.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Core.Process"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.Process.#ctor(System.Diagnostics.Process,System.Threading.Tasks.Task{System.Int32},System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Core.Process},System.Boolean)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Core.Process"/>
            </summary>
            <param name="handle">The value of <see cref="F:Tgstation.Server.Host.Core.Process.handle"/></param>
            <param name="lifetime">The value of <see cref="P:Tgstation.Server.Host.Core.Process.Lifetime"/></param>
            <param name="outputStringBuilder">The value of <see cref="F:Tgstation.Server.Host.Core.Process.outputStringBuilder"/></param>
            <param name="errorStringBuilder">The value of <see cref="F:Tgstation.Server.Host.Core.Process.errorStringBuilder"/></param>
            <param name="combinedStringBuilder">The value of <see cref="F:Tgstation.Server.Host.Core.Process.combinedStringBuilder"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Core.Process.logger"/></param>
            <param name="preExisting">If <paramref name="handle"/> was NOT just created</param>
        </member>
        <member name="M:Tgstation.Server.Host.Core.Process.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Core.Process.GetCombinedOutput">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Core.Process.GetErrorOutput">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Core.Process.GetStandardOutput">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Core.Process.Terminate">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Core.Process.SetHighPriority">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Core.ProcessExecutor">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Core.ProcessExecutor.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Core.ProcessExecutor"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Core.ProcessExecutor.loggerFactory">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> for the <see cref="T:Tgstation.Server.Host.Core.ProcessExecutor"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.ProcessExecutor.AttachExitHandler(System.Diagnostics.Process)">
            <summary>
            Create a <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the exit code of a given <paramref name="handle"/>
            </summary>
            <param name="handle">The <see cref="T:System.Diagnostics.Process"/> to attach the <see cref="T:System.Threading.Tasks.Task`1"/> for</param>
            <returns>A new <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the exit code of <paramref name="handle"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.ProcessExecutor.#ctor(Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Core.ProcessExecutor},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Core.ProcessExecutor"/>
            </summary>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Core.ProcessExecutor.logger"/></param>
            <param name="loggerFactory">The value of <see cref="F:Tgstation.Server.Host.Core.ProcessExecutor.loggerFactory"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Core.ProcessExecutor.GetProcess(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Core.ProcessExecutor.LaunchProcess(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Core.RestartRegistration">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Core.RestartRegistration.onDispose">
            <summary>
            The <see cref="M:Tgstation.Server.Host.Core.RestartRegistration.Dispose"/> <see cref="T:System.Action"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.RestartRegistration.#ctor(System.Action)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Core.RestartRegistration"/>
            </summary>
            <param name="onDispose">The value of <see cref="F:Tgstation.Server.Host.Core.RestartRegistration.onDispose"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Core.RestartRegistration.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Core.SemaphoreSlimContext">
            <summary>
            Async lock context helper
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.SemaphoreSlimContext.Lock(System.Threading.SemaphoreSlim,System.Threading.CancellationToken)">
            <summary>
            Asyncronously locks a <paramref name="semaphore"/>
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> to lock</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:Tgstation.Server.Host.Core.SemaphoreSlimContext"/> for the lock</returns>
        </member>
        <member name="F:Tgstation.Server.Host.Core.SemaphoreSlimContext.lockedSemaphore">
            <summary>
            The locked <see cref="T:System.Threading.SemaphoreSlim"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Core.SemaphoreSlimContext.disposed">
            <summary>
            If <see cref="M:Tgstation.Server.Host.Core.SemaphoreSlimContext.Dispose"/> has been called
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.SemaphoreSlimContext.#ctor(System.Threading.SemaphoreSlim)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Core.SemaphoreSlimContext"/>
            </summary>
            <param name="lockedSemaphore">The value of <see cref="F:Tgstation.Server.Host.Core.SemaphoreSlimContext.lockedSemaphore"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Core.SemaphoreSlimContext.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Tgstation.Server.Host.Core.SemaphoreSlimContext"/> class.
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.SemaphoreSlimContext.Dispose">
            <summary>
            Release the lock on <see cref="F:Tgstation.Server.Host.Core.SemaphoreSlimContext.lockedSemaphore"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Core.SetupWizard">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Core.SetupWizard.ioManager">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> for the <see cref="T:Tgstation.Server.Host.Core.SetupWizard"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Core.SetupWizard.console">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IO.IConsole"/> for the <see cref="T:Tgstation.Server.Host.Core.SetupWizard"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Core.SetupWizard.hostingEnvironment">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Hosting.IHostingEnvironment"/> for the <see cref="T:Tgstation.Server.Host.Core.SetupWizard"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Core.SetupWizard.application">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IApplication"/> for the <see cref="T:Tgstation.Server.Host.Core.SetupWizard"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Core.SetupWizard.dbConnectionFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IDBConnectionFactory"/> for the <see cref="T:Tgstation.Server.Host.Core.SetupWizard"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Core.SetupWizard.platformIdentifier">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IPlatformIdentifier"/> for the <see cref="T:Tgstation.Server.Host.Core.SetupWizard"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Core.SetupWizard.asyncDelayer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IAsyncDelayer"/> for the <see cref="T:Tgstation.Server.Host.Core.SetupWizard"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Core.SetupWizard.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Core.SetupWizard"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Core.SetupWizard.generalConfiguration">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Configuration.GeneralConfiguration"/> for the <see cref="T:Tgstation.Server.Host.Core.SetupWizard"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Core.SetupWizard.#ctor(Tgstation.Server.Host.IO.IIOManager,Tgstation.Server.Host.IO.IConsole,Microsoft.AspNetCore.Hosting.IHostingEnvironment,Tgstation.Server.Host.Core.IApplication,Tgstation.Server.Host.Core.IDBConnectionFactory,Tgstation.Server.Host.Core.IPlatformIdentifier,Tgstation.Server.Host.Core.IAsyncDelayer,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Core.SetupWizard},Microsoft.Extensions.Options.IOptions{Tgstation.Server.Host.Configuration.GeneralConfiguration})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Core.SetupWizard"/>
            </summary>
            <param name="ioManager">The value of <see cref="F:Tgstation.Server.Host.Core.SetupWizard.ioManager"/></param>
            <param name="console">The value of <see cref="F:Tgstation.Server.Host.Core.SetupWizard.console"/></param>
            <param name="hostingEnvironment">The value of <see cref="F:Tgstation.Server.Host.Core.SetupWizard.hostingEnvironment"/></param>
            <param name="application">The value of <see cref="F:Tgstation.Server.Host.Core.SetupWizard.application"/></param>
            <param name="dbConnectionFactory">The value of <see cref="F:Tgstation.Server.Host.Core.SetupWizard.dbConnectionFactory"/></param>
            <param name="platformIdentifier">The value of <see cref="F:Tgstation.Server.Host.Core.SetupWizard.platformIdentifier"/></param>
            <param name="asyncDelayer">The value of <see cref="F:Tgstation.Server.Host.Core.SetupWizard.asyncDelayer"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Core.SetupWizard.logger"/></param>
            <param name="generalConfigurationOptions">The <see cref="T:Microsoft.Extensions.Options.IOptions`1"/> containing the value of <see cref="F:Tgstation.Server.Host.Core.SetupWizard.generalConfiguration"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Core.SetupWizard.PromptYesNo(System.String,System.Threading.CancellationToken)">
            <summary>
            A prompt for a yes or no value
            </summary>
            <param name="question">The question <see cref="T:System.String"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> resulting in <see langword="true"/> if the user replied yes, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.SetupWizard.PromptForHostingPort(System.Threading.CancellationToken)">
            <summary>
            Prompts the user to enter the port to host TGS on
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> resulting in the hosting port, or <see langword="null"/> to use the default</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.SetupWizard.ConfigureDatabase(System.Threading.CancellationToken)">
            <summary>
            Prompts the user to create a <see cref="T:Tgstation.Server.Host.Configuration.DatabaseConfiguration"/>
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the new <see cref="T:Tgstation.Server.Host.Configuration.DatabaseConfiguration"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.SetupWizard.ConfigureGeneral(System.Threading.CancellationToken)">
            <summary>
            Prompts the user to create a <see cref="T:Tgstation.Server.Host.Configuration.GeneralConfiguration"/>
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the new <see cref="T:Tgstation.Server.Host.Configuration.GeneralConfiguration"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.SetupWizard.ConfigureLogging(System.Threading.CancellationToken)">
            <summary>
            Prompts the user to create a <see cref="T:Tgstation.Server.Host.Configuration.FileLoggingConfiguration"/>
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the new <see cref="T:Tgstation.Server.Host.Configuration.FileLoggingConfiguration"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.SetupWizard.SaveConfiguration(System.String,System.Nullable{System.UInt16},Tgstation.Server.Host.Configuration.DatabaseConfiguration,Tgstation.Server.Host.Configuration.GeneralConfiguration,Tgstation.Server.Host.Configuration.FileLoggingConfiguration,System.Threading.CancellationToken)">
            <summary>
            Saves a given <see cref="N:Tgstation.Server.Host.Configuration"/> set to <paramref name="userConfigFileName"/>
            </summary>
            <param name="userConfigFileName">The file to save the <see cref="N:Tgstation.Server.Host.Configuration"/> to</param>
            <param name="hostingPort">The hosting port to save</param>
            <param name="databaseConfiguration">The <see cref="T:Tgstation.Server.Host.Configuration.DatabaseConfiguration"/> to save</param>
            <param name="newGeneralConfiguration">The <see cref="T:Tgstation.Server.Host.Configuration.GeneralConfiguration"/> to save</param>
            <param name="fileLoggingConfiguration">The <see cref="T:Tgstation.Server.Host.Configuration.FileLoggingConfiguration"/> to save</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.SetupWizard.RunWizard(System.String,System.Threading.CancellationToken)">
            <summary>
            Runs the <see cref="T:Tgstation.Server.Host.Core.SetupWizard"/>
            </summary>
            <param name="userConfigFileName">The path to the settings json to build</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Core.SetupWizard.CheckRunWizard(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.IO.Console">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.IO.Console.Available">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.Console.PressAnyKeyAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.Console.ReadLineAsync(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.Console.WriteAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.IO.DefaultIOManager">
            <summary>
            <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> that resolves paths to <see cref="P:System.Environment.CurrentDirectory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.IO.DefaultIOManager.DefaultBufferSize">
            <summary>
            Default <see cref="T:System.IO.FileStream"/> buffer size used by .NET
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.NormalizeAndDelete(System.IO.DirectoryInfo,System.Threading.CancellationToken)">
            <summary>
            Recursively empty a directory
            </summary>
            <param name="dir"><see cref="T:System.IO.DirectoryInfo"/> of the directory to empty</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.OpenWriteStream(System.String)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> for async writing at a given <paramref name="path"/>
            </summary>
            <param name="path">The path to open the <see cref="T:System.IO.FileStream"/> at</param>
            <returns>A new <see cref="T:System.IO.FileStream"/> ready for async writing</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.CopyDirectoryImpl(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Copies a directory from <paramref name="src"/> to <paramref name="dest"/>
            </summary>
            <param name="src">The source directory path</param>
            <param name="dest">The destination directory path</param>
            <param name="ignore">Files and folders to ignore at the root level</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Threading.Tasks.Task"/>s representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.CopyDirectory(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.ConcatPath(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.CopyFile(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.CreateDirectory(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.DeleteDirectory(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.DeleteFile(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.FileExists(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.DirectoryExists(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.GetDirectoryName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.GetFileName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.GetFileNameWithoutExtension(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.GetFilesWithExtension(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.MoveFile(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.MoveDirectory(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.ReadAllBytes(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.ResolvePath(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.WriteAllBytes(System.String,System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.GetDirectories(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.GetFiles(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.DownloadFile(System.Uri,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.ZipToDirectory(System.String,System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.DefaultIOManager.PathContainsParentAccess(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.IO.IConsole">
            <summary>
            Abstraction for <see cref="T:System.Console"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.IO.IConsole.Available">
            <summary>
            If the <see cref="T:Tgstation.Server.Host.IO.IConsole"/> is visible to the user
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IConsole.WriteAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Write some <paramref name="text"/> to the <see cref="T:Tgstation.Server.Host.IO.IConsole"/>
            </summary>
            <param name="text">The <see cref="T:System.String"/> to write</param>
            <param name="newLine">If there should be a new line after the <paramref name="text"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IConsole.PressAnyKeyAsync(System.Threading.CancellationToken)">
            <summary>
            Wait for a key press on the <see cref="T:Tgstation.Server.Host.IO.IConsole"/>
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operations</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IConsole.ReadLineAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read a line from the <see cref="T:Tgstation.Server.Host.IO.IConsole"/>
            </summary>
            <param name="usePasswordChar">If the input should be retrieved using the '*' character</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:System.String"/> read by the <see cref="T:Tgstation.Server.Host.IO.IConsole"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.IO.IIOManager">
            <summary>
            Interface for using filesystems
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.ResolvePath(System.String)">
            <summary>
            Retrieve the full path of some <paramref name="path"/> given a relative path. Must be used before passing relative paths to other APIs. All other operations in this <see langword="interface"/> call this internally on given paths
            </summary>
            <param name="path">Some path to retrieve the full path of</param>
            <returns><paramref name="path"/> as a full canonical path</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.GetFileName(System.String)">
            <summary>
            Gets the file name portion of a <paramref name="path"/>
            </summary>
            <param name="path">The path to get the file name of</param>
            <returns>The file name portion of <paramref name="path"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.GetFileNameWithoutExtension(System.String)">
            <summary>
            Gets the file name portion of a <paramref name="path"/> with
            </summary>
            <param name="path">The path to get the file name of</param>
            <returns>The file name portion of <paramref name="path"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.PathContainsParentAccess(System.String)">
            <summary>
            Check if a <paramref name="path"/> contains the '..' parent directory accessor
            </summary>
            <param name="path">The path to check</param>
            <returns><see langword="true"/> if <paramref name="path"/> contains a '..' accessor, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.CopyDirectory(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Copies a directory from <paramref name="src"/> to <paramref name="dest"/>
            </summary>
            <param name="src">The source directory path</param>
            <param name="dest">The destination directory path</param>
            <param name="ignore">Files and folders to ignore at the root level</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.FileExists(System.String,System.Threading.CancellationToken)">
            <summary>
            Check that the file at <paramref name="path"/> exists
            </summary>
            <param name="path">The file to check for existence</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> resulting in <see langword="true"/> if the file at <paramref name="path"/> exists, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.DirectoryExists(System.String,System.Threading.CancellationToken)">
            <summary>
            Check that the directory at <paramref name="path"/> exists
            </summary>
            <param name="path">The directory to check for existence</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> resulting in <see langword="true"/> if the directory at <paramref name="path"/> exists, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.ReadAllBytes(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns all the contents of a file at <paramref name="path"/> as a <see cref="T:System.Byte"/> array
            </summary>
            <param name="path">The path of the file to read</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that results in the contents of a file at <paramref name="path"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.GetDirectories(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns directory names in a given <paramref name="path"/>
            </summary>
            <param name="path">The path to search for directories</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the directories in <paramref name="path"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.GetFiles(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns file names in a given <paramref name="path"/>
            </summary>
            <param name="path">The path to search for files</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the files in <paramref name="path"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.WriteAllBytes(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Writes some <paramref name="contents"/> to a file at <paramref name="path"/> overwriting previous content
            </summary>
            <param name="path">The path of the file to write</param>
            <param name="contents">The contents of the file</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.CopyFile(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Copy a file from <paramref name="src"/> to <paramref name="dest"/>
            </summary>
            <param name="src">The source file to copy</param>
            <param name="dest">The destination path</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.GetDirectoryName(System.String)">
            <summary>
            Gets the directory portion of a given <paramref name="path"/>
            </summary>
            <param name="path">A path to check</param>
            <returns>The directory portion of the given <paramref name="path"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.GetFilesWithExtension(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of files in <paramref name="path"/> with the given <paramref name="extension"/>
            </summary>
            <param name="path">The directory which contains the files</param>
            <param name="extension">The extension to look for without the preceeding "."</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> resulting in a list of paths to files in <paramref name="path"/> with the given <paramref name="extension"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.DeleteFile(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a file at <paramref name="path"/>
            </summary>
            <param name="path">The path of the file to delete</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.CreateDirectory(System.String,System.Threading.CancellationToken)">
            <summary>
            Create a directory at <paramref name="path"/>
            </summary>
            <param name="path">The path of the directory to create</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.DeleteDirectory(System.String,System.Threading.CancellationToken)">
            <summary>
            Recursively delete a directory
            </summary>
            <param name="path">The path to the directory to delete</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.ConcatPath(System.String[])">
            <summary>
            Combines an array of strings into a path
            </summary>
            <param name="paths">The paths to combine</param>
            <returns>The combined path</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.MoveFile(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Moves a file at <paramref name="source"/> to <paramref name="destination"/>
            </summary>
            <param name="source">The source file path</param>
            <param name="destination">The destination path</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.MoveDirectory(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Moves a directory at <paramref name="source"/> to <paramref name="destination"/>
            </summary>
            <param name="source">The source directory path</param>
            <param name="destination">The destination path</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.DownloadFile(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Downloads a file from <paramref name="url"/>
            </summary>
            <param name="url">The URL to download</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in the <see cref="T:System.Byte"/>s of the downloaded file</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IIOManager.ZipToDirectory(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Extract a set of <paramref name="zipFileBytes"/> to a given <paramref name="path"/>
            </summary>
            <param name="path">The path to unzip to</param>
            <param name="zipFileBytes">The <see cref="T:System.Byte"/>s of the <see cref="T:System.IO.Compression.ZipArchive"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.IO.IPostWriteHandler">
            <summary>
            Handles changing file modes/permissions after writing
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.IO.IPostWriteHandler.HandleWrite(System.String)">
            <summary>
            For handling system specific necessities after a write
            </summary>
            <param name="filePath">The full path to the file that was written</param>
        </member>
        <member name="T:Tgstation.Server.Host.IO.ISymlinkFactory">
            <summary>
            For creating filesystem symbolic links
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.IO.ISymlinkFactory.CreateSymbolicLink(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Create a symbolic link
            </summary>
            <param name="targetPath">The path to the hard target</param>
            <param name="linkPath">The path to the link</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.IO.ISynchronousIOManager">
            <summary>
            For accessing the disk in a synchronous manner
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.IO.ISynchronousIOManager.GetFiles(System.String,System.Threading.CancellationToken)">
            <summary>
            Enumerate files in a given <paramref name="path"/>
            </summary>
            <param name="path">The path to look for files in</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of file names in <paramref name="path"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.ISynchronousIOManager.GetDirectories(System.String,System.Threading.CancellationToken)">
            <summary>
            Enumerate directories in a given <paramref name="path"/>
            </summary>
            <param name="path">The path to look for directories in</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of directory names in <paramref name="path"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.ISynchronousIOManager.CreateDirectory(System.String,System.Threading.CancellationToken)">
            <summary>
            Create an empty directory at <paramref name="path"/>
            </summary>
            <param name="path">The path to create</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation. Usage may result in partial writes</param>
            <returns><see langword="true"/> if the directory already existed, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.ISynchronousIOManager.ReadFile(System.String)">
            <summary>
            Read the <see cref="T:System.Byte"/>s of a file at a given <paramref name="path"/>
            </summary>
            <param name="path">The path of the file to read</param>
            <returns>A <see cref="T:System.Byte"/> array representing the contents of the file at <paramref name="path"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.ISynchronousIOManager.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory at <paramref name="path"/> if it's empty
            </summary>
            <param name="path">The path of the directory to delete</param>
            <returns><see langword="true"/> if the directory does not exist or is empty and was deleted. <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.ISynchronousIOManager.WriteFileChecked(System.String,System.Byte[],System.String@,System.Threading.CancellationToken)">
            <summary>
            Write <paramref name="data"/> to a file at a given <paramref name="path"/>
            </summary>
            <param name="path">The path to the file to write</param>
            <param name="data">The new contents of the file</param>
            <param name="sha1InOut">The function only succeeds if this parameter matches the SHA-1 hash of the contents of the current file. Contains the SHA1 of the file on disk once the function returns</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns><see langword="true"/> on success, <see langword="false"/> if the operation failed due to <paramref name="sha1InOut"/> not matching the file's contents</returns>
        </member>
        <member name="M:Tgstation.Server.Host.IO.ISynchronousIOManager.IsDirectory(System.String)">
            <summary>
            Checks if a given <paramref name="path"/> is a directory
            </summary>
            <param name="path">The path to check</param>
            <returns><see langword="true"/> if <paramref name="path"/> is a directory, <see langword="false"/> otherwise</returns>
        </member>
        <member name="T:Tgstation.Server.Host.IO.PosixPostWriteHandler">
            <summary>
            <see cref="T:Tgstation.Server.Host.IO.IPostWriteHandler"/> for POSIX systems
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.IO.PosixPostWriteHandler.HandleWrite(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.IO.PosixSymlinkFactory">
            <summary>
            <see cref="T:Tgstation.Server.Host.IO.ISymlinkFactory"/> for posix systems
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.IO.PosixSymlinkFactory.CreateSymbolicLink(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.IO.ResolvingIOManager">
            <summary>
            An <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> that resolve relative paths from another <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> to a subdirectory of that
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.IO.ResolvingIOManager.subdirectory">
            <summary>
            Path to the subdirectory attached to path resolutions
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.IO.ResolvingIOManager.#ctor(Tgstation.Server.Host.IO.IIOManager,System.String)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.IO.ResolvingIOManager"/>
            </summary>
            <param name="parent">The <see cref="T:Tgstation.Server.Host.IO.IIOManager"/> that resolves to the directory to work out of</param>
            <param name="subdirectory">The value of <see cref="F:Tgstation.Server.Host.IO.ResolvingIOManager.subdirectory"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.IO.ResolvingIOManager.ResolvePath(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.IO.SynchronousIOManager">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.SynchronousIOManager.CreateDirectory(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.SynchronousIOManager.DeleteDirectory(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.SynchronousIOManager.GetDirectories(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.SynchronousIOManager.GetFiles(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.SynchronousIOManager.IsDirectory(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.SynchronousIOManager.ReadFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.IO.SynchronousIOManager.WriteFileChecked(System.String,System.Byte[],System.String@,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.IO.WindowsPostWriteHandler">
            <summary>
            <see cref="T:Tgstation.Server.Host.IO.IPostWriteHandler"/> for Windows systems
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.IO.WindowsPostWriteHandler.HandleWrite(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.IO.WindowsSymlinkFactory">
            <summary>
            <see cref="T:Tgstation.Server.Host.IO.ISymlinkFactory"/> for windows systems
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.IO.WindowsSymlinkFactory.CreateSymbolicLink(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.IServer">
            <summary>
            Represents the host
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.IServer.RestartRequested">
            <summary>
            If the <see cref="T:Tgstation.Server.Host.IServer"/> should restart
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.IServer.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Runs the <see cref="T:Tgstation.Server.Host.IServer"/>
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.IServerFactory">
            <summary>
            For creating <see cref="T:Tgstation.Server.Host.IServer"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.IServerFactory.CreateServer(System.String[],System.String)">
            <summary>
            Create a <see cref="T:Tgstation.Server.Host.IServer"/>
            </summary>
            <param name="args">The arguments for the <see cref="T:Tgstation.Server.Host.IServer"/></param>
            <param name="updatePath">The directory in which to install server updates</param>
            <returns>A new <see cref="T:Tgstation.Server.Host.IServer"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Models.ChatBot">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.ChatBot.InstanceId">
            <summary>
            The <see cref="P:Tgstation.Server.Api.Models.Instance.Id"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.ChatBot.Instance">
            <summary>
            The parent <see cref="T:Tgstation.Server.Host.Models.Instance"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.ChatBot.Channels">
            <summary>
            See <see cref="P:Tgstation.Server.Api.Models.ChatBot.Channels"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.ChatBot.ToApi">
            <summary>
            Convert the <see cref="T:Tgstation.Server.Host.Models.ChatBot"/> to it's API form
            </summary>
            <returns>A new <see cref="T:Tgstation.Server.Api.Models.ChatBot"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Models.ChatChannel">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.ChatChannel.Id">
            <summary>
            The row Id
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.ChatChannel.ChatSettingsId">
            <summary>
            The <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.Id"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.ChatChannel.ChatSettings">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.ChatBot"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.ChatChannel.ToApi">
            <summary>
            Convert the <see cref="T:Tgstation.Server.Host.Models.ChatChannel"/> to it's API form
            </summary>
            <returns>A new <see cref="T:Tgstation.Server.Api.Models.ChatChannel"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Models.CompileJob">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.CompileJob.Job">
            <summary>
            See <see cref="P:Tgstation.Server.Api.Models.CompileJob.Job"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.CompileJob.JobId">
            <summary>
            The <see cref="P:Tgstation.Server.Api.Models.Internal.Job.Id"/> of <see cref="P:Tgstation.Server.Host.Models.CompileJob.Job"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.CompileJob.RevisionInformation">
            <summary>
            See <see cref="P:Tgstation.Server.Api.Models.CompileJob.RevisionInformation"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.CompileJob.ByondVersion">
            <summary>
            The <see cref="T:System.Version"/> the <see cref="T:Tgstation.Server.Host.Models.CompileJob"/> was made with in string form
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.CompileJob.ToApi">
            <summary>
            Convert the <see cref="T:Tgstation.Server.Host.Models.CompileJob"/> to it's API form
            </summary>
            <returns>A new <see cref="T:Tgstation.Server.Api.Models.CompileJob"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Models.DatabaseContext`1">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.DatabaseContext`1.Users">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.DatabaseContext`1.Instances">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.DatabaseContext`1.CompileJobs">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.DatabaseContext`1.RevisionInformations">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.DatabaseContext`1.DreamMakerSettings">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.DatabaseContext`1.ChatBots">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.DatabaseContext`1.DreamDaemonSettings">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.DatabaseContext`1.RepositorySettings">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.DatabaseContext`1.InstanceUsers">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.DatabaseContext`1.ChatChannels">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.DatabaseContext`1.Jobs">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.DatabaseContext`1.ReattachInformations">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.DatabaseContext`1.WatchdogReattachInformations">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.DatabaseContext`1.TestMerges">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.TestMerge"/>s in the <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.DatabaseContext`1.RevInfoTestMerges">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.RevInfoTestMerge"/>s om the <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.DatabaseContext`1.Logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.DatabaseContext`1.DatabaseConfiguration">
            <summary>
            The <see cref="P:Tgstation.Server.Host.Models.DatabaseContext`1.DatabaseConfiguration"/> for the <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Models.DatabaseContext`1.databaseSeeder">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.IDatabaseSeeder"/> for the <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.DatabaseContext`1.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{`0},Microsoft.Extensions.Options.IOptions{Tgstation.Server.Host.Configuration.DatabaseConfiguration},Tgstation.Server.Host.Models.IDatabaseSeeder,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/>
            </summary>
            <param name="dbContextOptions">The <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1"/> for the <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/></param>
            <param name="databaseConfigurationOptions">The <see cref="T:Microsoft.Extensions.Options.IOptions`1"/> containing the value of <see cref="P:Tgstation.Server.Host.Models.DatabaseContext`1.DatabaseConfiguration"/></param>
            <param name="databaseSeeder">The value of <see cref="F:Tgstation.Server.Host.Models.DatabaseContext`1.databaseSeeder"/></param>
            <param name="logger">The value of <see cref="P:Tgstation.Server.Host.Models.DatabaseContext`1.Logger"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.DatabaseContext`1.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Models.DatabaseContext`1.Initialize(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Models.DatabaseContext`1.Save(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Models.DatabaseContext`1.UseMySQLMigrations">
            <summary>
            If the MY_ class of migrations should be used instead of the MS_ class
            </summary>
            <returns><see langword="true"/> if the MY_ class of migrations should be used instead of the MS_ class, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Models.DatabaseContext`1.SchemaDowngradeForServerVersion(System.Version,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Models.DatabaseSeeder">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Models.DatabaseSeeder.cryptographySuite">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Security.ICryptographySuite"/> for the <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.DatabaseSeeder.#ctor(Tgstation.Server.Host.Security.ICryptographySuite)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Models.DatabaseSeeder"/>
            </summary>
            <param name="cryptographySuite">The value of <see cref="F:Tgstation.Server.Host.Models.DatabaseSeeder.cryptographySuite"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.DatabaseSeeder.SeedAdminUser(Tgstation.Server.Host.Models.IDatabaseContext)">
            <summary>
            Add a default admin <see cref="T:Tgstation.Server.Host.Models.User"/> to a given <paramref name="databaseContext"/>
            </summary>
            <param name="databaseContext">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> to add an admin <see cref="T:Tgstation.Server.Host.Models.User"/> to</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.DatabaseSeeder.SeedDatabase(Tgstation.Server.Host.Models.IDatabaseContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Models.DatabaseSeeder.ResetAdminPassword(Tgstation.Server.Host.Models.IDatabaseContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Models.DreamDaemonSettings">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.DreamDaemonSettings.Id">
            <summary>
            The row Id
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.DreamDaemonSettings.ProcessId">
            <summary>
            The PID of a currently running DD instance
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.DreamDaemonSettings.AccessToken">
            <summary>
            The access token used for communication with DD
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.DreamDaemonSettings.InstanceId">
            <summary>
            The <see cref="P:Tgstation.Server.Api.Models.Instance.Id"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.DreamDaemonSettings.Instance">
            <summary>
            The parent <see cref="T:Tgstation.Server.Host.Models.Instance"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Models.DreamMakerSettings">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.DreamMakerSettings.Id">
            <summary>
            The row Id
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.DreamMakerSettings.InstanceId">
            <summary>
            The <see cref="P:Tgstation.Server.Api.Models.Instance.Id"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.DreamMakerSettings.Instance">
            <summary>
            The parent <see cref="T:Tgstation.Server.Host.Models.Instance"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.DreamMakerSettings.ToApi">
            <summary>
            Convert the <see cref="T:Tgstation.Server.Host.Models.DreamDaemonSettings"/> to it's API form
            </summary>
            <returns>A new <see cref="T:Tgstation.Server.Api.Models.DreamMaker"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Models.IDatabaseContext">
            <summary>
            Represents the database
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.IDatabaseContext.Users">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.User"/>s in the <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.IDatabaseContext.Instances">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.Instance"/>s in the <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.IDatabaseContext.InstanceUsers">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.InstanceUser"/>s in the <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.IDatabaseContext.Jobs">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.Job"/>s in the <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.IDatabaseContext.CompileJobs">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.CompileJob"/>s in the <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.IDatabaseContext.RevisionInformations">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.RevisionInformation"/>s in the <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.IDatabaseContext.DreamMakerSettings">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.DreamMakerSettings"/> in the <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.IDatabaseContext.DreamDaemonSettings">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.DreamDaemonSettings"/> in the <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.IDatabaseContext.ChatBots">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.ChatBot"/> in the <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.IDatabaseContext.ChatChannels">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.ChatChannel"/> in the <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.IDatabaseContext.RepositorySettings">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.RepositorySettings"/> in the <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.IDatabaseContext.ReattachInformations">
            <summary>
            The <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1"/> for <see cref="T:Tgstation.Server.Host.Models.ReattachInformation"/>s
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.IDatabaseContext.WatchdogReattachInformations">
            <summary>
            The <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1"/> for <see cref="T:Tgstation.Server.Host.Models.WatchdogReattachInformation"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.IDatabaseContext.Save(System.Threading.CancellationToken)">
            <summary>
            Saves changes made to the <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/>
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Models.IDatabaseContext.Initialize(System.Threading.CancellationToken)">
            <summary>
            Creates and migrates the <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/>
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Models.IDatabaseContext.SchemaDowngradeForServerVersion(System.Version,System.Threading.CancellationToken)">
            <summary>
            Attempt to downgrade the schema to the migration used for a given server <paramref name="version"/>
            </summary>
            <param name="version">The tgstation-server <see cref="T:System.Version"/> that the schema should downgrade for</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Models.IDatabaseSeeder">
            <summary>
            For initially seeding a database
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.IDatabaseSeeder.SeedDatabase(Tgstation.Server.Host.Models.IDatabaseContext,System.Threading.CancellationToken)">
            <summary>
            Initially seed a given <paramref name="databaseContext"/>
            </summary>
            <param name="databaseContext">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> to seed</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Models.IDatabaseSeeder.ResetAdminPassword(Tgstation.Server.Host.Models.IDatabaseContext,System.Threading.CancellationToken)">
            <summary>
            Changes the admin password in <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> back to it's default and enables the account
            </summary>
            <param name="databaseContext">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> to reset the admin password for</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Models.Instance">
            <summary>
            Represents an <see cref="T:Tgstation.Server.Api.Models.Instance"/> in the database
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.Instance.DreamMakerSettings">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.DreamMakerSettings"/> for the <see cref="T:Tgstation.Server.Host.Models.Instance"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.Instance.DreamDaemonSettings">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.DreamDaemonSettings"/> for the <see cref="T:Tgstation.Server.Host.Models.Instance"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.Instance.RepositorySettings">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.RepositorySettings"/> for the <see cref="T:Tgstation.Server.Host.Models.Instance"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.Instance.WatchdogReattachInformation">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.WatchdogReattachInformation"/> for the <see cref="T:Tgstation.Server.Host.Models.Instance"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.Instance.InstanceUsers">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.InstanceUser"/>s in the <see cref="T:Tgstation.Server.Host.Models.Instance"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.Instance.ChatSettings">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.ChatBot"/>s for the <see cref="T:Tgstation.Server.Host.Models.Instance"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.Instance.RevisionInformations">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.RevisionInformation"/>s in the <see cref="T:Tgstation.Server.Host.Models.Instance"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.Instance.Jobs">
            <summary>
            The <see cref="P:Tgstation.Server.Host.Models.Instance.Jobs"/> in the <see cref="T:Tgstation.Server.Host.Models.Instance"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Instance.ToApi">
            <summary>
            Convert the <see cref="T:Tgstation.Server.Host.Models.Instance"/> to it's API form
            </summary>
            <returns>A new <see cref="T:Tgstation.Server.Api.Models.Instance"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Models.InstanceUser">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.InstanceUser.Id">
            <summary>
            The row Id
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.InstanceUser.InstanceId">
            <summary>
            The <see cref="P:Tgstation.Server.Api.Models.Instance.Id"/> of <see cref="P:Tgstation.Server.Host.Models.InstanceUser.Instance"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.InstanceUser.Instance">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.Instance"/> the <see cref="T:Tgstation.Server.Host.Models.InstanceUser"/> belongs to
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.InstanceUser.AnyRights">
            <summary>
            If the <see cref="T:Tgstation.Server.Host.Models.InstanceUser"/> has any instance rights
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.InstanceUser.ToApi">
            <summary>
            Convert the <see cref="T:Tgstation.Server.Host.Models.InstanceUser"/> to it's API form
            </summary>
            <returns>A new <see cref="T:Tgstation.Server.Api.Models.InstanceUser"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Models.Job">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.Job.StartedBy">
            <summary>
            See <see cref="P:Tgstation.Server.Api.Models.Job.StartedBy"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.Job.CancelledBy">
            <summary>
            See <see cref="P:Tgstation.Server.Api.Models.Job.CancelledBy"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.Job.Instance">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.Instance"/> the job belongs to if any
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.Job.PostComplete">
            <summary>
            A <see cref="T:System.Threading.Tasks.Task"/> to run after the job completes. This will not affect the <see cref="P:Tgstation.Server.Api.Models.Internal.Job.StoppedAt"/> time, unless it is cancelled or errors
            </summary>
            <remarks>This should only be used where there are database dependencies that also rely on the Job itself completing A.K.A. manually initiated <see cref="T:Tgstation.Server.Host.Models.CompileJob"/>s</remarks>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Job.ToApi">
            <summary>
            Convert the <see cref="T:Tgstation.Server.Host.Models.Job"/> to it's API form
            </summary>
            <returns>A new <see cref="T:Tgstation.Server.Api.Models.Job"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Models.Migrations.MSInitialCreate">
            <summary>
            The initial database migration for MSSQL
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MSInitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Applies the migration
            </summary>
            <param name="migrationBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder"/> to use</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MSInitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Unapplies the migration
            </summary>
            <param name="migrationBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder"/> to use</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MSInitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Builds the target model
            </summary>
            <param name="modelBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder"/> to use</param>
        </member>
        <member name="T:Tgstation.Server.Host.Models.Migrations.MYInitialCreate">
            <summary>
            The initial database migration for MySQL/MariaDB
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MYInitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Applies the migration
            </summary>
            <param name="migrationBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder"/> to use</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MYInitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Unapplies the migration
            </summary>
            <param name="migrationBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder"/> to use</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MYInitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Builds the target model
            </summary>
            <param name="modelBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder"/> to use</param>
        </member>
        <member name="T:Tgstation.Server.Host.Models.Migrations.MYAddMinimumSecurity">
            <summary>
            Add the <see cref="P:Tgstation.Server.Api.Models.Internal.CompileJob.MinimumSecurityLevel"/> and <see cref="P:Tgstation.Server.Api.Models.DreamMaker.ApiValidationSecurityLevel"/> columns for MySQL/MariaDB
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MYAddMinimumSecurity.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Applies the migration
            </summary>
            <param name="migrationBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder"/> to use</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MYAddMinimumSecurity.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Unapplies the migration
            </summary>
            <param name="migrationBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder"/> to use</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MYAddMinimumSecurity.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Builds the target model
            </summary>
            <param name="modelBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder"/> to use</param>
        </member>
        <member name="T:Tgstation.Server.Host.Models.Migrations.MSAddMinimumSecurity">
            <summary>
            Add the <see cref="P:Tgstation.Server.Api.Models.Internal.CompileJob.MinimumSecurityLevel"/> and <see cref="P:Tgstation.Server.Api.Models.DreamMaker.ApiValidationSecurityLevel"/> columns for MSSQL
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MSAddMinimumSecurity.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Applies the migration
            </summary>
            <param name="migrationBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder"/> to use</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MSAddMinimumSecurity.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Unapplies the migration
            </summary>
            <param name="migrationBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder"/> to use</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MSAddMinimumSecurity.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Builds the target model
            </summary>
            <param name="modelBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder"/> to use</param>
        </member>
        <member name="T:Tgstation.Server.Host.Models.Migrations.MYNullableAndForeignKeyCleanup">
            <summary>
            Cleans up of nullable columns and foreign keys MySQL/MariaDB
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MYNullableAndForeignKeyCleanup.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Applies the migration
            </summary>
            <param name="migrationBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder"/> to use</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MYNullableAndForeignKeyCleanup.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Unapplies the migration
            </summary>
            <param name="migrationBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder"/> to use</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MYNullableAndForeignKeyCleanup.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Builds the target model
            </summary>
            <param name="modelBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder"/> to use</param>
        </member>
        <member name="T:Tgstation.Server.Host.Models.Migrations.MSNullableAndForeignKeyCleanup">
            <summary>
            Cleans up of nullable columns and foreign keys MSSQL
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MSNullableAndForeignKeyCleanup.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Applies the migration
            </summary>
            <param name="migrationBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder"/> to use</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MSNullableAndForeignKeyCleanup.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Unapplies the migration
            </summary>
            <param name="migrationBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder"/> to use</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MSNullableAndForeignKeyCleanup.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Builds the target model
            </summary>
            <param name="modelBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder"/> to use</param>
        </member>
        <member name="T:Tgstation.Server.Host.Models.Migrations.MSReattachCompileJobRequired">
            <summary>
            Marks the <see cref="T:Tgstation.Server.Host.Models.CompileJob"/>s of <see cref="T:Tgstation.Server.Host.Models.ReattachInformation"/>s as non-nullable for MSSQL
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MSReattachCompileJobRequired.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Applies the migration
            </summary>
            <param name="migrationBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder"/> to use</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MSReattachCompileJobRequired.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Unapplies the migration
            </summary>
            <param name="migrationBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder"/> to use</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MSReattachCompileJobRequired.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Builds the target model
            </summary>
            <param name="modelBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder"/> to use</param>
        </member>
        <member name="T:Tgstation.Server.Host.Models.Migrations.MYReattachCompileJobRequired">
            <summary>
            Marks the <see cref="T:Tgstation.Server.Host.Models.CompileJob"/>s of <see cref="T:Tgstation.Server.Host.Models.ReattachInformation"/>s as non-nullable for MySQL/MariaDB
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MYReattachCompileJobRequired.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Applies the migration
            </summary>
            <param name="migrationBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder"/> to use</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MYReattachCompileJobRequired.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
            Unapplies the migration
            </summary>
            <param name="migrationBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder"/> to use</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MYReattachCompileJobRequired.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Builds the target model
            </summary>
            <param name="modelBuilder">The <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder"/> to use</param>
        </member>
        <member name="T:Tgstation.Server.Host.Models.Migrations.DesignTimeDbContextFactoryHelpers">
            <summary>
            Contains helpers for creating design time <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Models.Migrations.DesignTimeDbContextFactoryHelpers.RootJson">
            <summary>
            Path to the json file to use for migrations configuration
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Models.Migrations.DesignTimeDbContextFactoryHelpers.DevJson">
            <summary>
            Path to the development json file to use for migrations configuration
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.DesignTimeDbContextFactoryHelpers.GetDbContextOptions">
            <summary>
            Get the <see cref="T:Microsoft.Extensions.Options.IOptions`1"/> for the <see cref="T:Tgstation.Server.Host.Configuration.DatabaseConfiguration"/>
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.Options.IOptions`1"/> for the <see cref="T:Tgstation.Server.Host.Configuration.DatabaseConfiguration"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Models.Migrations.MySqlDesignTimeDbContextFactory">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.MySqlDesignTimeDbContextFactory.CreateDbContext(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Models.Migrations.SqlServerDesignTimeDbContextFactory">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Models.Migrations.SqlServerDesignTimeDbContextFactory.CreateDbContext(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Models.MySqlDatabaseContext">
            <summary>
            <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/> for MySQL
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.MySqlDatabaseContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Tgstation.Server.Host.Models.MySqlDatabaseContext},Microsoft.Extensions.Options.IOptions{Tgstation.Server.Host.Configuration.DatabaseConfiguration},Tgstation.Server.Host.Models.IDatabaseSeeder,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Models.MySqlDatabaseContext})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Models.MySqlDatabaseContext"/>
            </summary>
            <param name="dbContextOptions">The <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1"/> for the <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/></param>
            <param name="databaseConfiguration">The <see cref="T:Microsoft.Extensions.Options.IOptions`1"/> of <see cref="T:Tgstation.Server.Host.Configuration.DatabaseConfiguration"/> for the <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/></param>
            <param name="databaseSeeder">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseSeeder"/> for the <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.MySqlDatabaseContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Models.MySqlDatabaseContext.UseMySQLMigrations">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Models.ReattachInformation">
            <summary>
            Database representation of <see cref="T:Tgstation.Server.Host.Components.Watchdog.ReattachInformation"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.ReattachInformation.Id">
            <summary>
            The row Id
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.ReattachInformation.CompileJob">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.CompileJob"/> for the <see cref="P:Tgstation.Server.Host.Components.Watchdog.ReattachInformation.Dmb"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Models.ReattachInformationBase">
            <summary>
            Base class for <see cref="T:Tgstation.Server.Host.Models.ReattachInformation"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.ReattachInformationBase.AccessIdentifier">
            <summary>
            Used to identify and authenticate the DreamDaemon instance
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.ReattachInformationBase.ProcessId">
            <summary>
            The system process ID
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.ReattachInformationBase.IsPrimary">
            <summary>
            If the <see cref="P:Tgstation.Server.Host.Components.IDmbProvider.PrimaryDirectory"/> of the associated dmb is being used
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.ReattachInformationBase.Port">
            <summary>
            The port DreamDaemon was last listening on
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.ReattachInformationBase.RebootState">
            <summary>
            The current DreamDaemon reboot state
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.ReattachInformationBase.#ctor">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Models.ReattachInformationBase"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.ReattachInformationBase.#ctor(Tgstation.Server.Host.Models.ReattachInformationBase)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Models.ReattachInformationBase"/> from a given <paramref name="copy"/>
            </summary>
            <param name="copy">The <see cref="T:Tgstation.Server.Host.Models.ReattachInformationBase"/> to copy values from</param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.ReattachInformationBase.ToString">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Models.RepositorySettings">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.RepositorySettings.Id">
            <summary>
            The row Id
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.RepositorySettings.InstanceId">
            <summary>
            The <see cref="P:Tgstation.Server.Api.Models.Instance.Id"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.RepositorySettings.Instance">
            <summary>
            The parent <see cref="T:Tgstation.Server.Host.Models.Instance"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.RepositorySettings.ToApi">
            <summary>
            Convert the <see cref="T:Tgstation.Server.Api.Models.Repository"/> to it's API form
            </summary>
            <returns>A new <see cref="T:Tgstation.Server.Api.Models.Repository"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Models.RevInfoTestMerge">
            <summary>
            Many to many relationship for <see cref="T:Tgstation.Server.Host.Models.RevisionInformation"/> and <see cref="T:Tgstation.Server.Host.Models.TestMerge"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.RevInfoTestMerge.Id">
            <summary>
            The row Id
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.RevInfoTestMerge.TestMerge">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.TestMerge"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.RevInfoTestMerge.RevisionInformation">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.RevisionInformation"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Models.RevisionInformation">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.RevisionInformation.Id">
            <summary>
            The row Id
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.RevisionInformation.Instance">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.Instance"/> the <see cref="T:Tgstation.Server.Host.Models.RevisionInformation"/> belongs to
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.RevisionInformation.PrimaryTestMerge">
            <summary>
            See <see cref="P:Tgstation.Server.Api.Models.RevisionInformation.PrimaryTestMerge"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.RevisionInformation.ActiveTestMerges">
            <summary>
            See <see cref="P:Tgstation.Server.Api.Models.RevisionInformation.ActiveTestMerges"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.RevisionInformation.CompileJobs">
            <summary>
            See <see cref="T:Tgstation.Server.Host.Models.CompileJob"/>s made from this <see cref="T:Tgstation.Server.Host.Models.RevisionInformation"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.RevisionInformation.ToApi">
            <summary>
            Convert the <see cref="T:Tgstation.Server.Host.Models.RevisionInformation"/> to it's API form
            </summary>
            <returns>A new <see cref="T:Tgstation.Server.Api.Models.RevisionInformation"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Models.SqlServerDatabaseContext">
            <summary>
            <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/> for Sqlserver
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.SqlServerDatabaseContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Tgstation.Server.Host.Models.SqlServerDatabaseContext},Microsoft.Extensions.Options.IOptions{Tgstation.Server.Host.Configuration.DatabaseConfiguration},Tgstation.Server.Host.Models.IDatabaseSeeder,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Models.SqlServerDatabaseContext})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Models.SqlServerDatabaseContext"/>
            </summary>
            <param name="dbContextOptions">The <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1"/> for the <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/></param>
            <param name="databaseConfiguration">The <see cref="T:Microsoft.Extensions.Options.IOptions`1"/> of <see cref="T:Tgstation.Server.Host.Configuration.DatabaseConfiguration"/> for the <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/></param>
            <param name="databaseSeeder">The <see cref="T:Tgstation.Server.Host.Models.IDatabaseSeeder"/> for the <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Models.DatabaseContext`1"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Models.SqlServerDatabaseContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Models.SqlServerDatabaseContext.UseMySQLMigrations">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Models.TestMerge">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.TestMerge.MergedBy">
            <summary>
            See <see cref="P:Tgstation.Server.Api.Models.TestMerge.MergedBy"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.TestMerge.PrimaryRevisionInformation">
            <summary>
            The initial <see cref="T:Tgstation.Server.Host.Models.RevisionInformation"/> the <see cref="T:Tgstation.Server.Host.Models.TestMerge"/> was merged with
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.TestMerge.PrimaryRevisionInformationId">
            <summary>
            Foreign key for <see cref="P:Tgstation.Server.Host.Models.TestMerge.PrimaryRevisionInformation"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.TestMerge.RevisonInformations">
            <summary>
            All the <see cref="T:Tgstation.Server.Host.Models.RevInfoTestMerge"/> for the <see cref="T:Tgstation.Server.Host.Models.TestMerge"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.TestMerge.ToApi">
            <summary>
            Convert the <see cref="T:Tgstation.Server.Host.Models.TestMerge"/> to it's API form
            </summary>
            <returns>A new <see cref="T:Tgstation.Server.Api.Models.TestMerge"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Models.User">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Models.User.PasswordHash">
            <summary>
            The hash of the user's password
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.User.CreatedBy">
            <summary>
            See <see cref="T:Tgstation.Server.Api.Models.User"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.User.CanonicalName">
            <summary>
            The uppercase invariant of <see cref="P:Tgstation.Server.Api.Models.Internal.User.Name"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.User.LastPasswordUpdate">
            <summary>
            When <see cref="P:Tgstation.Server.Host.Models.User.PasswordHash"/> was last changed
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.User.CreatedUsers">
            <summary>
            <see cref="T:Tgstation.Server.Host.Models.User"/>s created by this <see cref="T:Tgstation.Server.Host.Models.User"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.User.InstanceUsers">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.InstanceUser"/>s for the <see cref="T:Tgstation.Server.Host.Models.User"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.User.TestMerges">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.TestMerge"/>s made by the <see cref="T:Tgstation.Server.Host.Models.User"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.User.ToApi(System.Boolean,System.Boolean)">
            <summary>
            See <see cref="M:Tgstation.Server.Host.Models.User.ToApi(System.Boolean)"/>
            </summary>
            <param name="recursive">If we should recurse on <see cref="P:Tgstation.Server.Host.Models.User.CreatedBy"/></param>
            <param name="showDetails">If rights and system identifier should be shown</param>
            <returns>A new <see cref="T:Tgstation.Server.Api.Models.User"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Models.User.ToApi(System.Boolean)">
            <summary>
            Convert the <see cref="T:Tgstation.Server.Host.Models.User"/> to it's API form
            </summary>
            <param name="showDetails">If rights and system identifier should be shown</param>
            <returns>A new <see cref="T:Tgstation.Server.Api.Models.User"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Models.WatchdogReattachInformation">
            <summary>
            Database representation of <see cref="T:Tgstation.Server.Host.Components.Watchdog.WatchdogReattachInformation"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.WatchdogReattachInformation.Id">
            <summary>
            The row Id
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.WatchdogReattachInformation.InstanceId">
            <summary>
            The <see cref="P:Tgstation.Server.Api.Models.Instance.Id"/> of the <see cref="T:Tgstation.Server.Host.Models.Instance"/> the <see cref="T:Tgstation.Server.Host.Models.WatchdogReattachInformation"/> belongs to
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.WatchdogReattachInformation.Alpha">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.ReattachInformation"/> for the Alpha server
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.WatchdogReattachInformation.Bravo">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.ReattachInformation"/> for the Bravo server
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Models.WatchdogReattachInformationBase">
            <summary>
            Base class for <see cref="T:Tgstation.Server.Host.Models.WatchdogReattachInformation"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Models.WatchdogReattachInformationBase.AlphaIsActive">
            <summary>
            If the Alpha session is the active session
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.WatchdogReattachInformationBase.#ctor">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Models.WatchdogReattachInformationBase"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Models.WatchdogReattachInformationBase.#ctor(Tgstation.Server.Host.Models.WatchdogReattachInformationBase)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Models.WatchdogReattachInformation"/> from a given <paramref name="copy"/>
            </summary>
            <param name="copy">The <see cref="T:Tgstation.Server.Host.Models.WatchdogReattachInformationBase"/> to copy values from</param>
        </member>
        <member name="T:Tgstation.Server.Host.NativeMethods">
            <summary>
            Native methods used by the code
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.NativeMethods.CreateSymbolicLinkFlags">
            <summary>
            See https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-createsymboliclinka#parameters
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.NativeMethods.GetWindowThreadProcessId(System.IntPtr,System.Int32@)">
            <summary>
            See https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getwindowthreadprocessid
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.NativeMethods.FindWindow(System.String,System.String)">
            <summary>
            See https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-findwindoww
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            See https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-sendmessage
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.NativeMethods.EnumWindowProc">
            <summary>
            See https://msdn.microsoft.com/en-us/library/ms633493(v=VS.85).aspx
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.NativeMethods.EnumChildWindows(System.IntPtr,Tgstation.Server.Host.NativeMethods.EnumWindowProc,System.IntPtr)">
            <summary>
            See https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-enumchildwindows
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.NativeMethods.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            See https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getwindowtextw
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.NativeMethods.LogonUser(System.String,System.String,System.String,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            See https://msdn.microsoft.com/en-us/library/windows/desktop/aa378184(v=vs.85).aspx
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.NativeMethods.CreateSymbolicLink(System.String,System.String,Tgstation.Server.Host.NativeMethods.CreateSymbolicLinkFlags)">
            <summary>
            See https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-createsymboliclinkw
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Program">
            <summary>
            Entrypoint for the <see cref="T:System.Diagnostics.Process"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Program.ServerFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.IServerFactory"/> to use
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Program.Main(System.String[])">
            <summary>
            Entrypoint for the <see cref="T:Tgstation.Server.Host.Program"/>
            </summary>
            <param name="args">The command line arguments</param>
            <returns>The <see cref="P:System.Diagnostics.Process.ExitCode"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Security.AuthenticationContext">
            <summary>
            Manages <see cref="T:Tgstation.Server.Api.Models.User"/>s for a scope
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Security.AuthenticationContext.User">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Security.AuthenticationContext.InstanceUser">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Security.AuthenticationContext.SystemIdentity">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Security.AuthenticationContext.#ctor">
            <summary>
            Construct an empty <see cref="T:Tgstation.Server.Host.Security.AuthenticationContext"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Security.AuthenticationContext.#ctor(Tgstation.Server.Host.Security.ISystemIdentity,Tgstation.Server.Host.Models.User,Tgstation.Server.Host.Models.InstanceUser)">
            <summary>
            Construct an <see cref="T:Tgstation.Server.Host.Security.AuthenticationContext"/>
            </summary>
            <param name="systemIdentity">The value of <see cref="P:Tgstation.Server.Host.Security.AuthenticationContext.SystemIdentity"/></param>
            <param name="user">The value of <see cref="P:Tgstation.Server.Host.Security.AuthenticationContext.User"/></param>
            <param name="instanceUser">The value of <see cref="P:Tgstation.Server.Host.Security.AuthenticationContext.InstanceUser"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Security.AuthenticationContext.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Security.AuthenticationContext.GetRight(Tgstation.Server.Api.Rights.RightsType)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Security.AuthenticationContextFactory">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Security.AuthenticationContextFactory.CurrentAuthenticationContext">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Security.AuthenticationContextFactory.systemIdentityFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Security.ISystemIdentityFactory"/> for the <see cref="T:Tgstation.Server.Host.Security.AuthenticationContextFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Security.AuthenticationContextFactory.databaseContext">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> for the <see cref="T:Tgstation.Server.Host.Security.AuthenticationContextFactory"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Security.AuthenticationContextFactory.identityCache">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Security.IIdentityCache"/> for the <see cref="T:Tgstation.Server.Host.Security.AuthenticationContextFactory"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Security.AuthenticationContextFactory.#ctor(Tgstation.Server.Host.Security.ISystemIdentityFactory,Tgstation.Server.Host.Models.IDatabaseContext,Tgstation.Server.Host.Security.IIdentityCache)">
            <summary>
            Construct an <see cref="T:Tgstation.Server.Host.Security.AuthenticationContextFactory"/>
            </summary>
            <param name="systemIdentityFactory">The value of <see cref="F:Tgstation.Server.Host.Security.AuthenticationContextFactory.systemIdentityFactory"/></param>
            <param name="databaseContext">The value of <see cref="F:Tgstation.Server.Host.Security.AuthenticationContextFactory.databaseContext"/></param>
            <param name="identityCache">The value of <see cref="F:Tgstation.Server.Host.Security.AuthenticationContextFactory.identityCache"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Security.AuthenticationContextFactory.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Security.AuthenticationContextFactory.CreateAuthenticationContext(System.Int64,System.Nullable{System.Int64},System.DateTimeOffset,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Security.ClaimsInjector">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Security.ClaimsInjector.databaseContext">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Models.IDatabaseContext"/> for the <see cref="T:Tgstation.Server.Host.Security.ClaimsInjector"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Security.ClaimsInjector.authenticationContextFactory">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContextFactory"/> for the <see cref="T:Tgstation.Server.Host.Security.ClaimsInjector"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Security.ClaimsInjector.#ctor(Tgstation.Server.Host.Models.IDatabaseContext,Tgstation.Server.Host.Security.IAuthenticationContextFactory)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Security.ClaimsInjector"/>
            </summary>
            <param name="databaseContext">The value of <see cref="F:Tgstation.Server.Host.Security.ClaimsInjector.databaseContext"/></param>
            <param name="authenticationContextFactory">The value of <see cref="F:Tgstation.Server.Host.Security.ClaimsInjector.authenticationContextFactory"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Security.ClaimsInjector.InjectClaimsIntoContext(Microsoft.AspNetCore.Authentication.JwtBearer.TokenValidatedContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Security.CryptographySuite">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Security.CryptographySuite.SecureStringLength">
            <summary>
            Length in <see cref="T:System.Byte"/>s of generated base64 secure string
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Security.CryptographySuite.passwordHasher">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.IPasswordHasher`1"/> for the <see cref="T:Tgstation.Server.Host.Security.CryptographySuite"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Security.CryptographySuite.#ctor(Microsoft.AspNetCore.Identity.IPasswordHasher{Tgstation.Server.Host.Models.User})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Security.CryptographySuite"/>
            </summary>
            <param name="passwordHasher">The value of <see cref="F:Tgstation.Server.Host.Security.CryptographySuite.passwordHasher"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Security.CryptographySuite.GetSecureBytes(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Security.CryptographySuite.SetUserPassword(Tgstation.Server.Host.Models.User,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Security.CryptographySuite.CheckUserPassword(Tgstation.Server.Host.Models.User,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Security.CryptographySuite.GetSecureString">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Security.IAuthenticationContext">
            <summary>
            Represents the currently authenticated <see cref="T:Tgstation.Server.Api.Models.User"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Security.IAuthenticationContext.User">
            <summary>
            The authenticated user
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Security.IAuthenticationContext.InstanceUser">
            <summary>
            The <see cref="P:Tgstation.Server.Host.Security.IAuthenticationContext.InstanceUser"/> of <see cref="P:Tgstation.Server.Host.Security.IAuthenticationContext.User"/> if applicable
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Security.IAuthenticationContext.GetRight(Tgstation.Server.Api.Rights.RightsType)">
            <summary>
            Get the value of a given <paramref name="rightsType"/>
            </summary>
            <param name="rightsType">The <see cref="T:Tgstation.Server.Api.Rights.RightsType"/> of the right to get</param>
            <returns>The value of <paramref name="rightsType"/>. Note that if <see cref="P:Tgstation.Server.Host.Security.IAuthenticationContext.InstanceUser"/> is <see langword="null"/> all <see cref="T:Tgstation.Server.Host.Models.Instance"/> based rights will return 0</returns>
        </member>
        <member name="P:Tgstation.Server.Host.Security.IAuthenticationContext.SystemIdentity">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> of <see cref="P:Tgstation.Server.Host.Security.IAuthenticationContext.User"/> if applicable
            </summary>
        </member>
        <member name="T:Tgstation.Server.Host.Security.IAuthenticationContextFactory">
            <summary>
            For creating and accessing authentication contexts
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Security.IAuthenticationContextFactory.CurrentAuthenticationContext">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContext"/> the <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContextFactory"/> created
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Security.IAuthenticationContextFactory.CreateAuthenticationContext(System.Int64,System.Nullable{System.Int64},System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Create an <see cref="T:Tgstation.Server.Host.Security.IAuthenticationContext"/> to populate <see cref="P:Tgstation.Server.Host.Security.IAuthenticationContextFactory.CurrentAuthenticationContext"/>
            </summary>
            <param name="userId">The <see cref="P:Tgstation.Server.Api.Models.Internal.User.Id"/> of the <see cref="P:Tgstation.Server.Host.Security.IAuthenticationContext.User"/></param>
            <param name="instanceId">The <see cref="P:Tgstation.Server.Api.Models.Instance.Id"/> of the operation</param>
            <param name="validAfter">The <see cref="T:System.DateTimeOffset"/> the resulting <see cref="P:Tgstation.Server.Host.Security.IAuthenticationContext.User"/>'s password must be valid after</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Security.IClaimsInjector">
            <summary>
            For injecting <see cref="T:System.Security.Claims.Claim"/>s that <see cref="T:Tgstation.Server.Host.Controllers.TgsAuthorizeAttribute"/> can look for
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Security.IClaimsInjector.InjectClaimsIntoContext(Microsoft.AspNetCore.Authentication.JwtBearer.TokenValidatedContext,System.Threading.CancellationToken)">
            <summary>
            Setup the <see cref="T:System.Security.Claims.Claim"/>s for a given <paramref name="tokenValidatedContext"/>
            </summary>
            <param name="tokenValidatedContext">The <see cref="T:Microsoft.AspNetCore.Authentication.JwtBearer.TokenValidatedContext"/> containing the <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> and <see cref="T:Microsoft.IdentityModel.Tokens.SecurityToken"/> of the request and the <see cref="T:System.Security.Claims.ClaimsPrincipal"/> to add <see cref="T:System.Security.Claims.Claim"/>s to</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Security.ICryptographySuite">
            <summary>
            Contains various cryptographic functions
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Security.ICryptographySuite.GetSecureBytes(System.UInt32)">
            <summary>
            Generates a secure set of <see cref="T:System.Byte"/>s
            </summary>
            <param name="amount">The amount of <see cref="T:System.Byte"/>s to generate</param>
            <returns>A secure set of <see cref="T:System.Byte"/>s</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Security.ICryptographySuite.SetUserPassword(Tgstation.Server.Host.Models.User,System.String,System.Boolean)">
            <summary>
            Sets a <see cref="P:Tgstation.Server.Host.Models.User.PasswordHash"/> for a given <paramref name="user"/>
            </summary>
            <param name="user">The <see cref="T:Tgstation.Server.Host.Models.User"/> whos <see cref="P:Tgstation.Server.Host.Models.User.PasswordHash"/> is to be set</param>
            <param name="newPassword">The new password for the <see cref="T:Tgstation.Server.Host.Models.User"/></param>
            <param name="newUser">If the <paramref name="user"/> is just being created</param>
        </member>
        <member name="M:Tgstation.Server.Host.Security.ICryptographySuite.CheckUserPassword(Tgstation.Server.Host.Models.User,System.String)">
            <summary>
            Checks a given <paramref name="password"/> matches a given <paramref name="user"/>'s <see cref="P:Tgstation.Server.Host.Models.User.PasswordHash"/>. This may result in <see cref="P:Tgstation.Server.Host.Models.User.PasswordHash"/> being modified and this should be persisted
            </summary>
            <param name="user">The <see cref="T:Tgstation.Server.Host.Models.User"/> to check</param>
            <param name="password">The password to check</param>
            <returns><see langword="true"/> if <paramref name="password"/> matches the hash, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Security.ICryptographySuite.GetSecureString">
            <summary>
            Generates a 40-length secure ascii <see cref="T:System.String"/>
            </summary>
            <returns>A 40-length secure ascii <see cref="T:System.String"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Security.IdentityCache">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Security.IdentityCache.asyncDelayer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IAsyncDelayer"/> for the <see cref="T:Tgstation.Server.Host.Security.IdentityCache"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Security.IdentityCache.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Security.IdentityCache"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Security.IdentityCache.cachedIdentities">
            <summary>
            The map of <see cref="P:Tgstation.Server.Api.Models.Internal.User.Id"/>s to <see cref="T:Tgstation.Server.Host.Security.IdentityCacheObject"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Security.IdentityCache.#ctor(Tgstation.Server.Host.Core.IAsyncDelayer,Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Security.IdentityCache})">
            <summary>
            Construct an <see cref="T:Tgstation.Server.Host.Security.IdentityCache"/>
            </summary>
            <param name="asyncDelayer">The value of <see cref="F:Tgstation.Server.Host.Security.IdentityCache.asyncDelayer"/></param>
            <param name="logger">The value of <see cref="F:Tgstation.Server.Host.Security.IdentityCache.logger"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Security.IdentityCache.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Security.IdentityCache.CacheSystemIdentity(Tgstation.Server.Host.Models.User,Tgstation.Server.Host.Security.ISystemIdentity,System.DateTimeOffset)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Security.IdentityCache.LoadCachedIdentity(Tgstation.Server.Host.Models.User)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Security.IdentityCacheObject">
            <summary>
            For keeping a specific <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> alive for a period of time
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Security.IdentityCacheObject.SystemIdentity">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> the <see cref="T:Tgstation.Server.Host.Security.IdentityCache"/> manages
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Security.IdentityCacheObject.cancellationTokenSource">
            <summary>
            The <see cref="F:Tgstation.Server.Host.Security.IdentityCacheObject.cancellationTokenSource"/> for the <see cref="T:Tgstation.Server.Host.Security.IdentityCache"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Security.IdentityCacheObject.task">
            <summary>
            The <see cref="T:System.Threading.Tasks.Task"/> to clean up <see cref="P:Tgstation.Server.Host.Security.IdentityCacheObject.SystemIdentity"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Security.IdentityCacheObject.#ctor(Tgstation.Server.Host.Security.ISystemIdentity,Tgstation.Server.Host.Core.IAsyncDelayer,System.Action,System.DateTimeOffset)">
            <summary>
            Construct an <see cref="T:Tgstation.Server.Host.Security.IdentityCache"/>
            </summary>
            <param name="systemIdentity">The value of <see cref="P:Tgstation.Server.Host.Security.IdentityCacheObject.SystemIdentity"/></param>
            <param name="asyncDelayer">The <see cref="T:Tgstation.Server.Host.Core.IAsyncDelayer"/> used to delay the expiry</param>
            <param name="onExpiry">The <see cref="T:System.Action"/> to take on expiry</param>
            <param name="expiry">The <see cref="T:System.DateTimeOffset"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Security.IdentityCacheObject.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Security.IIdentityCache">
            <summary>
            For caching <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Security.IIdentityCache.CacheSystemIdentity(Tgstation.Server.Host.Models.User,Tgstation.Server.Host.Security.ISystemIdentity,System.DateTimeOffset)">
            <summary>
            Keep a <paramref name="user"/>'s <paramref name="systemIdentity"/> alive until an <paramref name="expiry"/> time
            </summary>
            <param name="user">The <see cref="T:Tgstation.Server.Host.Models.User"/> the <paramref name="systemIdentity"/> belongs to</param>
            <param name="systemIdentity">The <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> to cache</param>
            <param name="expiry">When the <paramref name="systemIdentity"/> should expire</param>
        </member>
        <member name="M:Tgstation.Server.Host.Security.IIdentityCache.LoadCachedIdentity(Tgstation.Server.Host.Models.User)">
            <summary>
            Attempt to load a cached <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/>
            </summary>
            <param name="user">The <see cref="T:Tgstation.Server.Host.Models.User"/> the <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> belongs to</param>
            <returns>The cached <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> or <see langword="null"/> if it doesn't exist or expired</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Security.ISystemIdentity">
            <summary>
            Represents a user on the current <see cref="T:System.Runtime.InteropServices.OSPlatform"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Security.ISystemIdentity.Uid">
            <summary>
            A unique identifier for the user
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Security.ISystemIdentity.Username">
            <summary>
            The user's name
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Security.ISystemIdentity.Clone">
            <summary>
            Clone the <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> creating another copy that must have <see cref="M:System.IDisposable.Dispose"/> called on it
            </summary>
            <returns>A new <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> mirroring the current one</returns>
        </member>
        <member name="M:Tgstation.Server.Host.Security.ISystemIdentity.RunImpersonated(System.Action,System.Threading.CancellationToken)">
            <summary>
            Runs a given <paramref name="action"/> in the context of the <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/>
            </summary>
            <param name="action">The <see cref="T:System.Action"/> to perform, should be simple and not use any <see cref="T:System.Threading.Tasks.Task"/>s or threading</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.Security.ISystemIdentityFactory">
            <summary>
            Factory for <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Security.ISystemIdentityFactory.CreateSystemIdentity(Tgstation.Server.Host.Models.User,System.Threading.CancellationToken)">
            <summary>
            Create a <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> for a given <paramref name="user"/>
            </summary>
            <param name="user">The user to create a <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> for</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A new <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> or <see langword="null"/> if the <paramref name="user"/> has no <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/></returns>
        </member>
        <member name="M:Tgstation.Server.Host.Security.ISystemIdentityFactory.CreateSystemIdentity(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Create a <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> for a given username and password
            </summary>
            <param name="username">The username of the user</param>
            <param name="password">The password of the user</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A new <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Security.ITokenFactory">
            <summary>
            For creating <see cref="T:Tgstation.Server.Api.Models.Token"/>s
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Security.ITokenFactory.ValidationParameters">
            <summary>
            The <see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters"/> for the <see cref="T:Tgstation.Server.Host.Security.ITokenFactory"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Security.ITokenFactory.CreateToken(Tgstation.Server.Host.Models.User,System.Threading.CancellationToken)">
            <summary>
            Create a <see cref="T:Tgstation.Server.Api.Models.Token"/> for a given <paramref name="user"/>
            </summary>
            <param name="user">The <see cref="T:Tgstation.Server.Host.Models.User"/> to create the token for. Must have the <see cref="P:Tgstation.Server.Api.Models.Internal.User.Id"/> field available</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the operation</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> resulting in a new <see cref="T:Tgstation.Server.Api.Models.Token"/></returns>
        </member>
        <member name="T:Tgstation.Server.Host.Security.PosixSystemIdentityFactory">
            <summary>
            <see cref="T:Tgstation.Server.Host.Security.ISystemIdentityFactory"/> for posix systems
            </summary>
            <remarks>TODO: Blocked by https://github.com/dotnet/corefx/issues/3187</remarks>
        </member>
        <member name="M:Tgstation.Server.Host.Security.PosixSystemIdentityFactory.CreateSystemIdentity(Tgstation.Server.Host.Models.User,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Security.PosixSystemIdentityFactory.CreateSystemIdentity(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Security.TokenFactory">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Security.TokenFactory.TokenExpiryMinutes">
            <summary>
            Amount of minutes until generated <see cref="T:Tgstation.Server.Api.Models.Token"/>s expire
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Security.TokenFactory.TokenClockSkewMinutes">
            <summary>
            Amount of minutes to skew the clock for <see cref="T:Tgstation.Server.Api.Models.Token"/> validation
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Security.TokenFactory.TokenSigningKeyByteAmount">
            <summary>
            Amount of bytes to use in the <see cref="P:Microsoft.IdentityModel.Tokens.TokenValidationParameters.IssuerSigningKey"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Security.TokenFactory.ValidationParameters">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Security.TokenFactory.asyncDelayer">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IAsyncDelayer"/> for the <see cref="T:Tgstation.Server.Host.Security.TokenFactory"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Security.TokenFactory.#ctor(Tgstation.Server.Host.Core.IAsyncDelayer,Tgstation.Server.Host.Security.ICryptographySuite)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Security.TokenFactory"/>
            </summary>
            <param name="asyncDelayer">The value of <see cref="F:Tgstation.Server.Host.Security.TokenFactory.asyncDelayer"/></param>
            <param name="cryptographySuite">The <see cref="T:Tgstation.Server.Host.Security.ICryptographySuite"/> used for generating the <see cref="P:Tgstation.Server.Host.Security.TokenFactory.ValidationParameters"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Security.TokenFactory.CreateToken(Tgstation.Server.Host.Models.User,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Security.WindowsSystemIdentity">
            <summary>
            <see cref="T:Tgstation.Server.Host.Security.ISystemIdentity"/> for windows systems
            </summary>
        </member>
        <member name="P:Tgstation.Server.Host.Security.WindowsSystemIdentity.Uid">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Security.WindowsSystemIdentity.Username">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Security.WindowsSystemIdentity.identity">
            <summary>
            The <see cref="T:System.Security.Principal.WindowsIdentity"/> for the <see cref="T:Tgstation.Server.Host.Security.WindowsSystemIdentity"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Security.WindowsSystemIdentity.userPrincipal">
            <summary>
            The <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal"/> for the <see cref="T:Tgstation.Server.Host.Security.WindowsSystemIdentity"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Security.WindowsSystemIdentity.#ctor(System.Security.Principal.WindowsIdentity)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Security.WindowsSystemIdentity"/> using a <see cref="T:System.Security.Principal.WindowsIdentity"/>
            </summary>
            <param name="identity">The value of <see cref="F:Tgstation.Server.Host.Security.WindowsSystemIdentity.identity"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Security.WindowsSystemIdentity.#ctor(System.DirectoryServices.AccountManagement.UserPrincipal)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Security.WindowsSystemIdentity"/> using a <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal"/>
            </summary>
            <param name="userPrincipal">The value of <see cref="F:Tgstation.Server.Host.Security.WindowsSystemIdentity.userPrincipal"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Security.WindowsSystemIdentity.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Security.WindowsSystemIdentity.Clone">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Security.WindowsSystemIdentity.RunImpersonated(System.Action,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Security.WindowsSystemIdentityFactory">
            <summary>
            <see cref="T:Tgstation.Server.Host.Security.ISystemIdentityFactory"/> for windows systems. Uses long running tasks due to potential networked domains
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Security.WindowsSystemIdentityFactory.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Security.WindowsSystemIdentityFactory"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Security.WindowsSystemIdentityFactory.GetUserAndDomainName(System.String,System.String@,System.String@)">
            <summary>
            Extract the username and domain name from a <see cref="T:System.String"/> in the format "username\\domainname"
            </summary>
            <param name="input">The input <see cref="T:System.String"/></param>
            <param name="username">The output username</param>
            <param name="domainName">The output domain name. May be <see langword="null"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Security.WindowsSystemIdentityFactory.#ctor(Microsoft.Extensions.Logging.ILogger{Tgstation.Server.Host.Security.WindowsSystemIdentityFactory})">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Security.WindowsSystemIdentityFactory"/>
            </summary>
            <param name="logger">The value of logger</param>
        </member>
        <member name="M:Tgstation.Server.Host.Security.WindowsSystemIdentityFactory.CreateSystemIdentity(Tgstation.Server.Host.Models.User,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Security.WindowsSystemIdentityFactory.CreateSystemIdentity(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Host.Server">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Server.RestartRequested">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Host.Server.WatchdogPresent">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Host.Server.webHostBuilder">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/> for the <see cref="T:Tgstation.Server.Host.Server"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Server.restartHandlers">
            <summary>
            The <see cref="T:Tgstation.Server.Host.Core.IRestartHandler"/>s to run when the <see cref="T:Tgstation.Server.Host.Server"/> restarts
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Server.updatePath">
            <summary>
            The absolute path to install updates to
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Server.logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for the <see cref="T:Tgstation.Server.Host.Server"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Server.cancellationTokenSource">
            <summary>
            The <see cref="F:Tgstation.Server.Host.Server.cancellationTokenSource"/> for the <see cref="T:Tgstation.Server.Host.Server"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Host.Server.updating">
            <summary>
            If a server update has been or is being applied
            </summary>
        </member>
        <member name="M:Tgstation.Server.Host.Server.#ctor(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Host.Server"/>
            </summary>
            <param name="webHostBuilder">The value of <see cref="F:Tgstation.Server.Host.Server.webHostBuilder"/></param>
            <param name="updatePath">The value of <see cref="F:Tgstation.Server.Host.Server.updatePath"/></param>
        </member>
        <member name="M:Tgstation.Server.Host.Server.CheckSanity(System.Boolean)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the <see cref="T:Tgstation.Server.Host.Core.IServerControl"/> cannot be used
            </summary>
            <param name="checkWatchdog">If <see cref="P:Tgstation.Server.Host.Server.WatchdogPresent"/> should be checked</param>
        </member>
        <member name="M:Tgstation.Server.Host.Server.RunAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Server.ApplyUpdate(System.Version,System.Uri,Tgstation.Server.Host.IO.IIOManager)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Server.RegisterForRestart(Tgstation.Server.Host.Core.IRestartHandler)">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Server.Restart">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.Server.Restart(System.Version)">
            <summary>
            Implements <see cref="M:Tgstation.Server.Host.Server.Restart"/>
            </summary>
            <param name="newVersion">The <see cref="T:System.Version"/> of any potential updates being applied</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the running operation</returns>
        </member>
        <member name="T:Tgstation.Server.Host.ServerFactory">
            <inheritdoc />
        </member>
        <member name="M:Tgstation.Server.Host.ServerFactory.CreateServer(System.String[],System.String)">
            <inheritdoc />
        </member>
    </members>
</doc>
