// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Tgstation.Server.Host.Models;

namespace Tgstation.Server.Host.Models.Migrations.SqlServer
{
    [DbContext(typeof(SqlServerDatabaseContext))]
    partial class SqlServerDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview2-30571")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tgstation.Server.Host.Models.ChatChannel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ChatSettingsId");

                    b.Property<long?>("ChatSettingsId1");

                    b.Property<long>("DiscordChannelId");

                    b.Property<string>("IrcChannel");

                    b.HasKey("Id");

                    b.HasIndex("ChatSettingsId");

                    b.HasIndex("ChatSettingsId1");

                    b.ToTable("ChatChannels");
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.ChatSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DiscordBotToken");

                    b.Property<bool>("DiscordEnabled");

                    b.Property<long>("InstanceId");

                    b.Property<bool>("IrcEnabled");

                    b.Property<string>("IrcHost")
                        .IsRequired();

                    b.Property<string>("IrcNickServPassword");

                    b.Property<int>("IrcPort");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId")
                        .IsUnique();

                    b.ToTable("ChatSettings");
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.CompileJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ExitCode");

                    b.Property<DateTimeOffset>("FinishedAt");

                    b.Property<long?>("InstanceId");

                    b.Property<string>("Output");

                    b.Property<long>("RevisionInformationId");

                    b.Property<DateTimeOffset>("StartedAt");

                    b.Property<bool?>("TargetedPrimaryDirectory");

                    b.Property<long>("TriggeredById");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.HasIndex("RevisionInformationId");

                    b.HasIndex("TriggeredById");

                    b.ToTable("CompileJobs");
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.DreamDaemonSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessToken");

                    b.Property<bool>("AllowWebClient");

                    b.Property<bool>("AutoStart");

                    b.Property<long?>("CompileJobId");

                    b.Property<long>("InstanceId");

                    b.Property<int>("PrimaryPort");

                    b.Property<int?>("ProcessId");

                    b.Property<int>("SecondaryPort");

                    b.Property<int>("SecurityLevel");

                    b.Property<bool>("SoftRestart");

                    b.Property<bool>("SoftShutdown");

                    b.HasKey("Id");

                    b.HasIndex("CompileJobId");

                    b.HasIndex("InstanceId")
                        .IsUnique();

                    b.ToTable("DreamDaemonSettings");
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.DreamMakerSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AutoCompileInterval");

                    b.Property<long?>("CompileJobId");

                    b.Property<long>("InstanceId");

                    b.Property<string>("TargetDme");

                    b.HasKey("Id");

                    b.HasIndex("CompileJobId");

                    b.HasIndex("InstanceId")
                        .IsUnique();

                    b.ToTable("DreamMakerSettings");
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.Instance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ConfigurationAllowed");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Online");

                    b.Property<string>("Path")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Instances");
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.InstanceUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ByondRights");

                    b.Property<int>("ChatSettingsRights");

                    b.Property<int>("ConfigurationRights");

                    b.Property<int>("DreamDaemonRights");

                    b.Property<int>("DreamMakerRights");

                    b.Property<long?>("InstanceId");

                    b.Property<int>("RepositoryRights");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.HasIndex("UserId");

                    b.ToTable("InstanceUsers");
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Cancelled");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<long>("InstanceId");

                    b.Property<DateTimeOffset>("StartedAt");

                    b.Property<long>("StartedById");

                    b.Property<DateTimeOffset>("StoppedAt");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.HasIndex("StartedById");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.RepositorySettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessToken");

                    b.Property<string>("AccessUser");

                    b.Property<int?>("AutoUpdateInterval");

                    b.Property<string>("CommitterEmail")
                        .IsRequired();

                    b.Property<string>("CommitterName")
                        .IsRequired();

                    b.Property<long>("InstanceId");

                    b.Property<string>("Origin");

                    b.Property<bool>("PushTestMergeCommits");

                    b.Property<long?>("RevisionInformationId");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId")
                        .IsUnique();

                    b.HasIndex("RevisionInformationId");

                    b.ToTable("RepositorySettings");
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.RevisionInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("OriginRevision")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("Revision")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("Revision")
                        .IsUnique();

                    b.ToTable("RevisionInformations");
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.ServerSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("EnableTelemetry");

                    b.Property<string>("SystemAuthenticationGroup");

                    b.Property<string>("UpstreamRepository");

                    b.HasKey("Id");

                    b.ToTable("ServerSettings");
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.TestMerge", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author")
                        .IsRequired();

                    b.Property<string>("BodyAtMerge")
                        .IsRequired();

                    b.Property<long?>("InstanceId");

                    b.Property<DateTimeOffset>("MergedAt");

                    b.Property<long>("MergedById");

                    b.Property<long?>("RevisionInformationId");

                    b.Property<string>("TitleAtMerge")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.HasIndex("MergedById");

                    b.HasIndex("RevisionInformationId");

                    b.ToTable("TestMerges");
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdministrationRights");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("InstanceManagerRights");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PasswordHash");

                    b.Property<string>("SystemIdentifier");

                    b.Property<string>("TokenSecret")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("SystemIdentifier")
                        .IsUnique()
                        .HasFilter("[SystemIdentifier] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ZNetCS.AspNetCore.Logging.EntityFrameworkCore.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventId");

                    b.Property<int>("Level");

                    b.Property<string>("Message");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.ChatChannel", b =>
                {
                    b.HasOne("Tgstation.Server.Host.Models.ChatSettings")
                        .WithMany("AdminChannels")
                        .HasForeignKey("ChatSettingsId");

                    b.HasOne("Tgstation.Server.Host.Models.ChatSettings")
                        .WithMany("GeneralChannels")
                        .HasForeignKey("ChatSettingsId1");
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.ChatSettings", b =>
                {
                    b.HasOne("Tgstation.Server.Host.Models.Instance", "Instance")
                        .WithOne("ChatSettings")
                        .HasForeignKey("Tgstation.Server.Host.Models.ChatSettings", "InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.CompileJob", b =>
                {
                    b.HasOne("Tgstation.Server.Host.Models.Instance")
                        .WithMany("CompileJobs")
                        .HasForeignKey("InstanceId");

                    b.HasOne("Tgstation.Server.Host.Models.RevisionInformation", "RevisionInformation")
                        .WithMany()
                        .HasForeignKey("RevisionInformationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tgstation.Server.Host.Models.User", "TriggeredBy")
                        .WithMany()
                        .HasForeignKey("TriggeredById")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.DreamDaemonSettings", b =>
                {
                    b.HasOne("Tgstation.Server.Host.Models.CompileJob", "CompileJob")
                        .WithMany()
                        .HasForeignKey("CompileJobId");

                    b.HasOne("Tgstation.Server.Host.Models.Instance", "Instance")
                        .WithOne("DreamDaemonSettings")
                        .HasForeignKey("Tgstation.Server.Host.Models.DreamDaemonSettings", "InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.DreamMakerSettings", b =>
                {
                    b.HasOne("Tgstation.Server.Host.Models.CompileJob", "CompileJob")
                        .WithMany()
                        .HasForeignKey("CompileJobId");

                    b.HasOne("Tgstation.Server.Host.Models.Instance", "Instance")
                        .WithOne("DreamMakerSettings")
                        .HasForeignKey("Tgstation.Server.Host.Models.DreamMakerSettings", "InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.InstanceUser", b =>
                {
                    b.HasOne("Tgstation.Server.Host.Models.Instance")
                        .WithMany("InstanceUsers")
                        .HasForeignKey("InstanceId");

                    b.HasOne("Tgstation.Server.Host.Models.User")
                        .WithMany("InstanceUsers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.Job", b =>
                {
                    b.HasOne("Tgstation.Server.Host.Models.Instance", "Instance")
                        .WithMany("Jobs")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tgstation.Server.Host.Models.User", "StartedBy")
                        .WithMany()
                        .HasForeignKey("StartedById")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.RepositorySettings", b =>
                {
                    b.HasOne("Tgstation.Server.Host.Models.Instance", "Instance")
                        .WithOne("RepositorySettings")
                        .HasForeignKey("Tgstation.Server.Host.Models.RepositorySettings", "InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tgstation.Server.Host.Models.RevisionInformation", "RevisionInformation")
                        .WithMany()
                        .HasForeignKey("RevisionInformationId");
                });

            modelBuilder.Entity("Tgstation.Server.Host.Models.TestMerge", b =>
                {
                    b.HasOne("Tgstation.Server.Host.Models.Instance")
                        .WithMany("TestMerges")
                        .HasForeignKey("InstanceId");

                    b.HasOne("Tgstation.Server.Host.Models.User", "MergedBy")
                        .WithMany()
                        .HasForeignKey("MergedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tgstation.Server.Host.Models.RevisionInformation")
                        .WithMany("TestMerges")
                        .HasForeignKey("RevisionInformationId");
                });
#pragma warning restore 612, 618
        }
    }
}
