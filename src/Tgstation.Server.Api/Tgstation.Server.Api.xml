<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tgstation.Server.Api</name>
    </assembly>
    <members>
        <member name="T:Tgstation.Server.Api.ApiHeaders">
            <summary>
            Represents the header that must be present for every server request
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.ApiHeaders.ApplicationJson">
            <summary>
            TODO: Remove this when https://github.com/dotnet/corefx/pull/26701 makes it into the sdk
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.ApiHeaders.ApiVersionHeader">
            <summary>
            The <see cref="P:Tgstation.Server.Api.ApiHeaders.ApiVersion"/> header key
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.ApiHeaders.UsernameHeader">
            <summary>
            The <see cref="P:Tgstation.Server.Api.ApiHeaders.Username"/> header key
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.ApiHeaders.InstanceIdHeader">
            <summary>
            The <see cref="P:Tgstation.Server.Api.ApiHeaders.InstanceId"/> header key
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.ApiHeaders.JwtAuthenticationScheme">
            <summary>
            The JWT authentication header scheme
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.ApiHeaders.PasswordAuthenticationScheme">
            <summary>
            The password authentication header scheme
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.ApiHeaders.AssemblyName">
            <summary>
            The current <see cref="T:System.Reflection.AssemblyName"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.ApiHeaders.Version">
            <summary>
            Get the version of the <see cref="N:Tgstation.Server.Api"/> the caller is using
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.ApiHeaders.InstanceId">
            <summary>
            The <see cref="P:Tgstation.Server.Api.Models.Instance.Id"/> being accessed
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.ApiHeaders.UserAgent">
            <summary>
            The client's user agent
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.ApiHeaders.ApiVersion">
            <summary>
            The client's API version
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.ApiHeaders.Token">
            <summary>
            The client's JWT
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.ApiHeaders.Username">
            <summary>
            The client's username
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.ApiHeaders.Password">
            <summary>
            The client's password
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.ApiHeaders.IsTokenAuthentication">
            <summary>
            If the header uses password or JWT authentication
            </summary>
        </member>
        <member name="M:Tgstation.Server.Api.ApiHeaders.CheckCompatibility(System.Version)">
            <summary>
            Checks if a given <paramref name="otherVersion"/> is compatible with our own
            </summary>
            <param name="otherVersion">The <see cref="P:Tgstation.Server.Api.ApiHeaders.Version"/> to test</param>
            <returns><see langword="true"/> if the given version is compatible with the API. <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Api.ApiHeaders.#ctor(System.Net.Http.Headers.ProductHeaderValue,System.String)">
            <summary>
            Construct <see cref="T:Tgstation.Server.Api.ApiHeaders"/> for JWT authentication
            </summary>
            <param name="userAgent">The value of <see cref="P:Tgstation.Server.Api.ApiHeaders.UserAgent"/></param>
            <param name="token">The value of <see cref="P:Tgstation.Server.Api.ApiHeaders.Token"/></param>
        </member>
        <member name="M:Tgstation.Server.Api.ApiHeaders.#ctor(System.Net.Http.Headers.ProductHeaderValue,System.String,System.String)">
            <summary>
            Construct <see cref="T:Tgstation.Server.Api.ApiHeaders"/> for password authentication
            </summary>
            <param name="userAgent">The value of <see cref="P:Tgstation.Server.Api.ApiHeaders.UserAgent"/></param>
            <param name="username">The value of <see cref="P:Tgstation.Server.Api.ApiHeaders.Username"/></param>
            <param name="password">The value of <see cref="P:Tgstation.Server.Api.ApiHeaders.Password"/></param>
        </member>
        <member name="M:Tgstation.Server.Api.ApiHeaders.#ctor(Microsoft.AspNetCore.Http.Headers.RequestHeaders)">
            <summary>
            Construct and validates <see cref="T:Tgstation.Server.Api.ApiHeaders"/> from a set of <paramref name="requestHeaders"/>
            </summary>
            <param name="requestHeaders">The <see cref="T:Microsoft.AspNetCore.Http.Headers.RequestHeaders"/> containing the <see cref="T:Tgstation.Server.Api.ApiHeaders"/></param>
        </member>
        <member name="M:Tgstation.Server.Api.ApiHeaders.#ctor(System.Net.Http.Headers.ProductHeaderValue,System.String,System.String,System.String)">
            <summary>
            Construct <see cref="T:Tgstation.Server.Api.ApiHeaders"/>
            </summary>
            <param name="userAgent">The value of <see cref="P:Tgstation.Server.Api.ApiHeaders.UserAgent"/></param>
            <param name="token">The value of <see cref="P:Tgstation.Server.Api.ApiHeaders.Token"/></param>
            <param name="username">The value of <see cref="P:Tgstation.Server.Api.ApiHeaders.Username"/></param>
            <param name="password">The value of <see cref="P:Tgstation.Server.Api.ApiHeaders.Password"/></param>
        </member>
        <member name="M:Tgstation.Server.Api.ApiHeaders.Compatible">
            <summary>
            Checks if the <see cref="P:Tgstation.Server.Api.ApiHeaders.ApiVersion"/> is compatible with <see cref="P:Tgstation.Server.Api.ApiHeaders.Version"/>
            </summary>
            <returns><see langword="true"/> if the API is compatible, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Tgstation.Server.Api.ApiHeaders.SetRequestHeaders(System.Net.Http.Headers.HttpRequestHeaders,System.Nullable{System.Int64})">
            <summary>
            Set <see cref="T:System.Net.Http.Headers.HttpRequestHeaders"/> using the <see cref="T:Tgstation.Server.Api.ApiHeaders"/>. This initially clears <paramref name="headers"/>
            </summary>
            <param name="headers">The <see cref="T:System.Net.Http.Headers.HttpRequestHeaders"/> to set</param>
            <param name="instanceId">The <see cref="P:Tgstation.Server.Api.Models.Instance.Id"/> for the request</param>
        </member>
        <member name="T:Tgstation.Server.Api.Models.Administration">
            <summary>
            Represents administrative server information
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Administration.WindowsHost">
            <summary>
            If the server is running on a windows operating system
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Administration.TrackedRepositoryUrl">
            <summary>
            The GitHub repository the server is built to recieve updates from
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Administration.LatestVersion">
            <summary>
            The latest available version of the Tgstation.Server.Host assembly from the upstream repository. If <see cref="P:System.Version.Minor"/> is higher than <see cref="P:Tgstation.Server.Api.Models.Administration.NewVersion"/>'s the update cannot be applied due to API changes
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Administration.NewVersion">
            <summary>
            Changes the version of Tgstation.Server.Host to the given version from the upstream repository
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.Byond">
            <summary>
            Represents a BYOND installation
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Byond.Version">
            <summary>
            The <see cref="T:System.Version"/> of the <see cref="T:Tgstation.Server.Api.Models.Byond"/> installation used for new compiles. Will be <see langword="null"/> if the user does not have permission to view it or there is no BYOND version installed. Only considers the <see cref="P:System.Version.Major"/> and <see cref="P:System.Version.Minor"/> numbers
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Byond.InstallJob">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Job"/> being used to install a new <see cref="P:Tgstation.Server.Api.Models.Byond.Version"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.ChatBot">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Api.Models.ChatBot.Channels">
            <summary>
            Channels the Discord bot should listen/announce in
            </summary>
        </member>
        <member name="M:Tgstation.Server.Api.Models.ChatBot.ValidateProviderChannelTypes">
            <summary>
            Validates <see cref="P:Tgstation.Server.Api.Models.ChatBot.Channels"/> are correct for the <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.Provider"/>
            </summary>
            <returns><see langword="true"/> if the <see cref="P:Tgstation.Server.Api.Models.ChatBot.Channels"/> are valid for the <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.Provider"/>, <see langword="false"/> otherwise</returns>
        </member>
        <member name="T:Tgstation.Server.Api.Models.ChatChannel">
            <summary>
            Indicates a chat channel
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.ChatChannel.IrcChannel">
            <summary>
            The IRC channel name
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.ChatChannel.DiscordChannelId">
            <summary>
            The Discord channel ID
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.ChatChannel.IsAdminChannel">
            <summary>
            If the <see cref="T:Tgstation.Server.Api.Models.ChatChannel"/> is an admin channel
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.ChatChannel.IsWatchdogChannel">
            <summary>
            If the <see cref="T:Tgstation.Server.Api.Models.ChatChannel"/> is a watchdog channel
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.ChatChannel.IsUpdatesChannel">
            <summary>
            If the <see cref="T:Tgstation.Server.Api.Models.ChatChannel"/> is an updates channel
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.ChatChannel.Tag">
            <summary>
            A custom tag users can define to group channels together
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.ChatProvider">
            <summary>
            Represents a chat service provider
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Models.ChatProvider.Irc">
            <summary>
            Internet relay chat
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Models.ChatProvider.Discord">
            <summary>
            Superior chat service
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.CompileJob">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Api.Models.CompileJob.Job">
            <summary>
            The <see cref="P:Tgstation.Server.Api.Models.CompileJob.Job"/> relating to this job
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.CompileJob.RevisionInformation">
            <summary>
            Git revision the compiler ran on. Not modifiable
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.CompileJob.ByondVersion">
            <summary>
            The <see cref="P:Tgstation.Server.Api.Models.Byond.Version"/> the <see cref="T:Tgstation.Server.Api.Models.CompileJob"/> was made with
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.ConfigurationFile">
            <summary>
            Represents a game configuration file. Create and delete actions uncerimonuously overwrite/delete files
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.ConfigurationFile.Path">
            <summary>
            The path to the <see cref="T:Tgstation.Server.Api.Models.ConfigurationFile"/> file
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.ConfigurationFile.AccessDenied">
            <summary>
            If access to the <see cref="T:Tgstation.Server.Api.Models.ConfigurationFile"/> file was denied for the operation
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.ConfigurationFile.IsDirectory">
            <summary>
            If <see cref="P:Tgstation.Server.Api.Models.ConfigurationFile.Path"/> represents a directory
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.ConfigurationFile.LastReadHash">
            <summary>
            The MD5 hash of the file when last read by the user. If this doesn't match during update actions, the write will be denied with <see cref="F:System.Net.HttpStatusCode.Conflict"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.ConfigurationFile.Content">
            <summary>
            The content of the <see cref="T:Tgstation.Server.Api.Models.ConfigurationFile"/>. Will be <see langword="null"/> if <see cref="P:Tgstation.Server.Api.Models.ConfigurationFile.AccessDenied"/> is <see langword="true"/> or during listing and write operations
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.ConfigurationType">
            <summary>
            The type of configuration allowed on an <see cref="T:Tgstation.Server.Api.Models.Instance"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Models.ConfigurationType.Disallowed">
            <summary>
            Configuration editing is not allowed
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Models.ConfigurationType.HostWrite">
            <summary>
            Configuration editing is allowed by all users on all files
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Models.ConfigurationType.SystemIdentityWrite">
            <summary>
            Co
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.DiscordConnectionStringBuilder">
            <summary>
            <see cref="T:Tgstation.Server.Api.Models.Internal.ChatConnectionStringBuilder"/> for <see cref="F:Tgstation.Server.Api.Models.ChatProvider.Discord"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.DiscordConnectionStringBuilder.Valid">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Api.Models.DiscordConnectionStringBuilder.BotToken">
            <summary>
            The Discord bot token
            </summary>
            <remarks>See https://discordapp.com/developers/docs/topics/oauth2#bots</remarks>
        </member>
        <member name="M:Tgstation.Server.Api.Models.DiscordConnectionStringBuilder.#ctor">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Api.Models.DiscordConnectionStringBuilder"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Api.Models.DiscordConnectionStringBuilder.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Api.Models.DiscordConnectionStringBuilder"/> from a <paramref name="connectionString"/>
            </summary>
            <param name="connectionString">The connection string</param>
        </member>
        <member name="M:Tgstation.Server.Api.Models.DiscordConnectionStringBuilder.ToString">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Api.Models.DreamDaemon">
            <summary>
            Represents an instance of BYOND's DreamDaemon game server. Create action starts the server. Delete action shuts down the server
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.DreamDaemon.ActiveCompileJob">
            <summary>
            The live revision
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.DreamDaemon.StagedCompileJob">
            <summary>
            The next revision to go live
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.DreamDaemon.Running">
            <summary>
            The current status of <see cref="T:Tgstation.Server.Api.Models.DreamDaemon"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.DreamDaemon.CurrentSecurity">
            <summary>
            The current <see cref="T:Tgstation.Server.Api.Models.DreamDaemonSecurity"/> of <see cref="T:Tgstation.Server.Api.Models.DreamDaemon"/>. May be downgraded due to requirements of <see cref="P:Tgstation.Server.Api.Models.DreamDaemon.ActiveCompileJob"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.DreamDaemon.CurrentPort">
            <summary>
            The port the running <see cref="T:Tgstation.Server.Api.Models.DreamDaemon"/> instance is set to
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.DreamDaemon.CurrentAllowWebclient">
            <summary>
            The webclient status the running <see cref="T:Tgstation.Server.Api.Models.DreamDaemon"/> instance is set to
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.DreamDaemonSecurity">
            <summary>
            DreamDaemon's security level
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Models.DreamDaemonSecurity.Trusted">
            <summary>
            Server is unrestricted in terms of file access and shell commands
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Models.DreamDaemonSecurity.Safe">
            <summary>
            Server will not be able to run shell commands or access files outside it's working directory
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Models.DreamDaemonSecurity.Ultrasafe">
            <summary>
            Server will not be able to run shell commands or access anything but temporary files. Currently unsupported!
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.DreamDaemonStatus">
            <summary>
            The status of <see cref="T:Tgstation.Server.Api.Models.DreamDaemon"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Models.DreamDaemonStatus.Offline">
            <summary>
            Server is not running
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Models.DreamDaemonStatus.HardRebooting">
            <summary>
            Server is being rebooted
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Models.DreamDaemonStatus.Online">
            <summary>
            Server is running
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.DreamMaker">
            <summary>
            Represents the state of the DreamMaker compiler. Create action starts a new compile. Delete action cancels the current compile
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.DreamMaker.ProjectName">
            <summary>
            The .dme file <see cref="T:Tgstation.Server.Api.Models.DreamMaker"/> tries to compile with without the extension
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.DreamMaker.ApiValidationPort">
            <summary>
            The port used during compilation to validate the DMAPI
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.DreamMaker.ApiValidationSecurityLevel">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.DreamDaemonSecurity"/> level used to validate the DMAPI
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.ErrorMessage">
            <summary>
            Represents an error message returned by the server
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.ErrorMessage.Message">
            <summary>
            A human readable description of the error
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.ErrorMessage.SeverApiVersion">
            <summary>
            The version of the API the server is using
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.Instance">
            <summary>
            Metadata about a server instance
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Instance.Id">
            <summary>
            The id of the <see cref="T:Tgstation.Server.Api.Models.Instance"/>. Not modifiable
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Instance.Name">
            <summary>
            The name of the <see cref="T:Tgstation.Server.Api.Models.Instance"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Instance.Path">
            <summary>
            The path to where the <see cref="T:Tgstation.Server.Api.Models.Instance"/> is located. Can only be changed while the <see cref="T:Tgstation.Server.Api.Models.Instance"/> is offline. Must not exist when the instance is created
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Instance.Online">
            <summary>
            If the <see cref="T:Tgstation.Server.Api.Models.Instance"/> is online
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Instance.ConfigurationType">
            <summary>
            If <see cref="T:Tgstation.Server.Api.Models.ConfigurationFile"/> can be used on the <see cref="T:Tgstation.Server.Api.Models.Instance"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Instance.AutoUpdateInterval">
            <summary>
            The time interval in minutes the repository is automatically pulled and compiles. 0 disables
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Instance.MoveJob">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Job"/> representing a change of <see cref="P:Tgstation.Server.Api.Models.Instance.Path"/>
            </summary>
            <remarks>Due to how <see cref="T:Tgstation.Server.Api.Models.Job"/>s are children of <see cref="T:Tgstation.Server.Api.Models.Instance"/>s but moving one requires the <see cref="T:Tgstation.Server.Api.Models.Instance"/> to be offline, interactions with this <see cref="T:Tgstation.Server.Api.Models.Job"/> are performed in a non-standard fashion. The <see cref="T:Tgstation.Server.Api.Models.Job"/> is read by querying the <see cref="T:Tgstation.Server.Api.Models.Instance"/> again (either via list or ID lookup) and cancelled by making any sort of update to the <see cref="T:Tgstation.Server.Api.Models.Instance"/>. Once the <see cref="T:Tgstation.Server.Api.Models.Instance"/> comes back <see cref="P:Tgstation.Server.Api.Models.Instance.Online"/> it can be queried like a normal job</remarks>
        </member>
        <member name="M:Tgstation.Server.Api.Models.Instance.CloneMetadata">
            <summary>
            Create a clone of the essential <see cref="T:Tgstation.Server.Api.Models.Instance"/> metadata
            </summary>
            <returns>A clone of the essential <see cref="T:Tgstation.Server.Api.Models.Instance"/> metadata</returns>
        </member>
        <member name="T:Tgstation.Server.Api.Models.InstanceUser">
            <summary>
            Represents a <see cref="T:Tgstation.Server.Api.Models.User"/>s permissions in an <see cref="T:Tgstation.Server.Api.Models.Instance"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.InstanceUser.UserId">
            <summary>
            The <see cref="P:Tgstation.Server.Api.Models.Internal.User.Id"/> of the <see cref="T:Tgstation.Server.Api.Models.User"/> the <see cref="T:Tgstation.Server.Api.Models.InstanceUser"/> belongs to
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.InstanceUser.InstanceUserRights">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Rights.InstanceUserRights"/> of the <see cref="T:Tgstation.Server.Api.Models.InstanceUser"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.InstanceUser.ByondRights">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Rights.ByondRights"/> of the <see cref="T:Tgstation.Server.Api.Models.InstanceUser"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.InstanceUser.DreamDaemonRights">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Rights.DreamDaemonRights"/> of the <see cref="T:Tgstation.Server.Api.Models.InstanceUser"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.InstanceUser.DreamMakerRights">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Rights.DreamMakerRights"/> of the <see cref="T:Tgstation.Server.Api.Models.InstanceUser"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.InstanceUser.RepositoryRights">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Rights.RepositoryRights"/> of the <see cref="T:Tgstation.Server.Api.Models.InstanceUser"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.InstanceUser.ChatBotRights">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Rights.ChatBotRights"/> of the <see cref="T:Tgstation.Server.Api.Models.InstanceUser"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.InstanceUser.ConfigurationRights">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Rights.ConfigurationRights"/> of the <see cref="T:Tgstation.Server.Api.Models.InstanceUser"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.Internal.ChatBot">
            <summary>
            Manage the server chat bots
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.ChatBot.Id">
            <summary>
            The settings id
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.ChatBot.Name">
            <summary>
            The name of the connection
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.ChatBot.Enabled">
            <summary>
            If the connection is enabled
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.ChatBot.Provider">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.ChatProvider"/> used for the connection
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.ChatBot.ConnectionString">
            <summary>
            The information used to connect to the <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.Provider"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.ChatBot.ConnectionStringBuilder">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Internal.ChatConnectionStringBuilder"/> which maps to the <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.ConnectionString"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.Internal.ChatConnectionStringBuilder">
            <summary>
            Helper for building <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.ConnectionString"/>s
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.ChatConnectionStringBuilder.Valid">
            <summary>
            If the <see cref="T:Tgstation.Server.Api.Models.Internal.ChatConnectionStringBuilder"/> evaluates to a valid <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.ConnectionString"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Api.Models.Internal.ChatConnectionStringBuilder.ToString">
            <summary>
            Gets the <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.ConnectionString"/> associated with the <see cref="T:Tgstation.Server.Api.Models.Internal.ChatConnectionStringBuilder"/>
            </summary>
            <returns>The <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.ConnectionString"/> associated with the <see cref="T:Tgstation.Server.Api.Models.Internal.ChatConnectionStringBuilder"/></returns>
        </member>
        <member name="T:Tgstation.Server.Api.Models.Internal.CompileJob">
            <summary>
            Represents a run of <see cref="T:Tgstation.Server.Api.Models.DreamMaker"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.CompileJob.Id">
            <summary>
            The ID of the job
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.CompileJob.DmeName">
            <summary>
            The .dme file used for compilation
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.CompileJob.Output">
            <summary>
            Textual output of DM
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.CompileJob.DirectoryName">
            <summary>
            The Game folder the results were compiled into
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.CompileJob.MinimumSecurityLevel">
            <summary>
            The minimum <see cref="T:Tgstation.Server.Api.Models.DreamDaemonSecurity"/> required to run the <see cref="T:Tgstation.Server.Api.Models.Internal.CompileJob"/>'s output
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters">
            <summary>
            Launch settings for DreamDaemon
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters.AllowWebClient">
            <summary>
            If the BYOND web client can be used to connect to the game server
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters.SecurityLevel">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.DreamDaemonSecurity"/> level of <see cref="T:Tgstation.Server.Api.Models.DreamDaemon"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters.PrimaryPort">
            <summary>
            The first port <see cref="T:Tgstation.Server.Api.Models.DreamDaemon"/> uses. This should be the publically advertised port
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters.SecondaryPort">
            <summary>
            The second port <see cref="T:Tgstation.Server.Api.Models.DreamDaemon"/> uses
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters.StartupTimeout">
            <summary>
            The DreamDaemon startup timeout in seconds
            </summary>
        </member>
        <member name="M:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters.Match(Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters)">
            <summary>
            Check if we match a given set of <paramref name="otherParameters"/>
            </summary>
            <param name="otherParameters">The <see cref="T:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters"/> to compare against</param>
            <returns><see langword="true"/> if they match, <see langword="false"/> otherwise</returns>
        </member>
        <member name="T:Tgstation.Server.Api.Models.Internal.DreamDaemonSettings">
            <summary>
            Configurable settings for <see cref="T:Tgstation.Server.Api.Models.DreamDaemon"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.DreamDaemonSettings.AutoStart">
            <summary>
            If <see cref="T:Tgstation.Server.Api.Models.DreamDaemon"/> starts when it's <see cref="T:Tgstation.Server.Api.Models.Instance"/> starts
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.DreamDaemonSettings.SoftRestart">
            <summary>
            If the server is undergoing a soft reset. This may be automatically set by changes to other fields
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.DreamDaemonSettings.SoftShutdown">
            <summary>
            If the server is undergoing a soft shutdown
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.Internal.Job">
            <summary>
            Represents a long running job
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.Job.Id">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Internal.Job"/> ID
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.Job.Description">
            <summary>
            English description of the <see cref="T:Tgstation.Server.Api.Models.Internal.Job"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.Job.ExceptionDetails">
            <summary>
            Details of any exceptions caught during the <see cref="T:Tgstation.Server.Api.Models.Internal.Job"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.Job.StartedAt">
            <summary>
            When the <see cref="T:Tgstation.Server.Api.Models.Internal.Job"/> was started
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.Job.StoppedAt">
            <summary>
            When the <see cref="T:Tgstation.Server.Api.Models.Internal.Job"/> stopped
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.Job.Cancelled">
            <summary>
            If the <see cref="T:Tgstation.Server.Api.Models.Internal.Job"/> was cancelled
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.Job.CancelRightsType">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Rights.RightsType"/> of <see cref="P:Tgstation.Server.Api.Models.Internal.Job.CancelRight"/> if it can be cancelled
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.Job.CancelRight">
            <summary>
            The <see cref="N:Tgstation.Server.Api.Rights"/> required to cancel the <see cref="T:Tgstation.Server.Api.Models.Internal.Job"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.Internal.RepositorySettings">
            <summary>
            Represents configurable settings for a <see cref="T:Tgstation.Server.Api.Models.Repository"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.RepositorySettings.CommitterName">
            <summary>
            The name of the committer
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.RepositorySettings.CommitterEmail">
            <summary>
            The e-mail of the committer
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessUser">
            <summary>
            The username to access the git repository with
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken">
            <summary>
            The token/password to access the git repository with
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.RepositorySettings.PushTestMergeCommits">
            <summary>
            If commits created from testmerges are pushed to the remote
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.RepositorySettings.ShowTestMergeCommitters">
            <summary>
            If test merge commits are signed with the username of the person who merged it. Note this only affects future commits
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.RepositorySettings.AutoUpdatesKeepTestMerges">
            <summary>
            If test merge commits should be kept when auto updating. May cause merge conflicts which will block the update
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.RepositorySettings.AutoUpdatesSynchronize">
            <summary>
            If synchronization should occur when auto updating
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.Internal.RevisionInformation">
            <summary>
            Represents information about a current git revison
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.RevisionInformation.CommitSha">
            <summary>
            The revision sha
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.RevisionInformation.OriginCommitSha">
            <summary>
            The sha of the most recent remote commit
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.Internal.TestMerge">
            <summary>
            Represents a merge of a GitHub pull request
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.TestMerge.Id">
            <summary>
            The ID of the <see cref="T:Tgstation.Server.Api.Models.Internal.TestMerge"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.TestMerge.MergedAt">
            <summary>
            When the <see cref="T:Tgstation.Server.Api.Models.Internal.TestMerge"/> was created
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.Internal.TestMergeBase">
            <summary>
            Layer of test merge data required internally
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.TestMergeBase.TitleAtMerge">
            <summary>
            The title of the pull request
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.TestMergeBase.BodyAtMerge">
            <summary>
            The body of the pull request
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.TestMergeBase.Url">
            <summary>
            The URL of the pull request
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.TestMergeBase.Author">
            <summary>
            The author of the pull request
            </summary>
        </member>
        <member name="M:Tgstation.Server.Api.Models.Internal.TestMergeBase.#ctor">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Api.Models.Internal.TestMergeBase"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Api.Models.Internal.TestMergeBase.#ctor(Tgstation.Server.Api.Models.Internal.TestMergeBase)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Api.Models.Internal.TestMergeBase"/> from a <paramref name="copy"/>
            </summary>
            <param name="copy">The <see cref="T:Tgstation.Server.Api.Models.Internal.TestMergeBase"/> to copy data from</param>
        </member>
        <member name="T:Tgstation.Server.Api.Models.Internal.User">
            <summary>
            Represents a server <see cref="T:Tgstation.Server.Api.Models.Internal.User"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.User.Id">
            <summary>
            The ID of the <see cref="T:Tgstation.Server.Api.Models.Internal.User"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.User.Enabled">
            <summary>
            If the <see cref="T:Tgstation.Server.Api.Models.Internal.User"/> is enabled since users cannot be deleted. System users cannot be disabled
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.User.CreatedAt">
            <summary>
            When the <see cref="T:Tgstation.Server.Api.Models.Internal.User"/> was created
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.User.SystemIdentifier">
            <summary>
            The SID/UID of the <see cref="T:Tgstation.Server.Api.Models.Internal.User"/> on Windows/POSIX respectively
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.User.Name">
            <summary>
            The name of the <see cref="T:Tgstation.Server.Api.Models.Internal.User"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.User.AdministrationRights">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Rights.AdministrationRights"/> for the <see cref="T:Tgstation.Server.Api.Models.Internal.User"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Internal.User.InstanceManagerRights">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Rights.InstanceManagerRights"/> for the <see cref="T:Tgstation.Server.Api.Models.Internal.User"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.IrcConnectionStringBuilder">
            <summary>
            <see cref="T:Tgstation.Server.Api.Models.Internal.ChatConnectionStringBuilder"/> for <see cref="F:Tgstation.Server.Api.Models.ChatProvider.Irc"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.IrcConnectionStringBuilder.Valid">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Api.Models.IrcConnectionStringBuilder.Address">
            <summary>
            The IP address or URL of the IRC server
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.IrcConnectionStringBuilder.Port">
            <summary>
            The port the server runs on
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.IrcConnectionStringBuilder.Nickname">
            <summary>
            The nickname for the bot to use
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.IrcConnectionStringBuilder.UseSsl">
            <summary>
            If the connection should be made using SSL
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.IrcConnectionStringBuilder.PasswordType">
            <summary>
            The optional <see cref="T:Tgstation.Server.Api.Models.IrcPasswordType"/> to use
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.IrcConnectionStringBuilder.Password">
            <summary>
            The optional password to use
            </summary>
        </member>
        <member name="M:Tgstation.Server.Api.Models.IrcConnectionStringBuilder.#ctor">
            <summary>
            Construct an <see cref="T:Tgstation.Server.Api.Models.IrcConnectionStringBuilder"/>
            </summary>
        </member>
        <member name="M:Tgstation.Server.Api.Models.IrcConnectionStringBuilder.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:Tgstation.Server.Api.Models.DiscordConnectionStringBuilder"/> from a <paramref name="connectionString"/>
            </summary>
            <param name="connectionString">The connection string</param>
        </member>
        <member name="M:Tgstation.Server.Api.Models.IrcConnectionStringBuilder.ToString">
            <inheritdoc />
        </member>
        <member name="T:Tgstation.Server.Api.Models.IrcPasswordType">
            <summary>
            Represents the type of a password for a <see cref="F:Tgstation.Server.Api.Models.ChatProvider.Irc"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Models.IrcPasswordType.Server">
            <summary>
            Use server authentication
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Models.IrcPasswordType.Sasl">
            <summary>
            Use PLAIN sasl authentication
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Models.IrcPasswordType.NickServ">
            <summary>
            Use NickServ authentication
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.Job">
            <summary>
            Represents a long running job on the server. Model is read-only, updates attempt to cancel the job
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Job.StartedBy">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.User"/> that started the job
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Job.CancelledBy">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.User"/> that cancelled the job
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Job.Progress">
            <summary>
            Optional progress between 0 and 100 inclusive
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.Repository">
            <summary>
            Represents a git repository
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Repository.Origin">
            <summary>
            The origin URL. If <see langword="null"/>, the <see cref="T:Tgstation.Server.Api.Models.Repository"/> does not exist
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Repository.CheckoutSha">
            <summary>
            The commit HEAD should point to. Not populated in responses, use <see cref="P:Tgstation.Server.Api.Models.Repository.RevisionInformation"/> instead for retrieval
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Repository.RevisionInformation">
            <summary>
            The current <see cref="T:Tgstation.Server.Api.Models.RevisionInformation"/> for the <see cref="T:Tgstation.Server.Api.Models.Repository"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Repository.GitHubOwner">
            <summary>
            If the repository was cloned from GitHub.com this will be set with the owner of the repository
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Repository.GitHubName">
            <summary>
            If the repository was cloned from GitHub.com this will be set with the name of the repository
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Repository.ActiveJob">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Job"/> started by the <see cref="T:Tgstation.Server.Api.Models.Repository"/> if any
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Repository.UpdateFromOrigin">
            <summary>
            Do the equivalent of a git pull. Will attempt to merge unless <see cref="P:Tgstation.Server.Api.Models.Repository.Reference"/> is also specified in which case a hard reset will be performed after checking out
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Repository.Reference">
            <summary>
            The branch or tag HEAD points to
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Repository.NewTestMerges">
            <summary>
            <see cref="T:Tgstation.Server.Api.Models.TestMergeParameters"/> for new <see cref="T:Tgstation.Server.Api.Models.TestMerge"/>s. Note that merges that conflict will not be performed
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.RevisionInformation">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Api.Models.RevisionInformation.PrimaryTestMerge">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.TestMerge"/> that was created with this <see cref="T:Tgstation.Server.Api.Models.RevisionInformation"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.RevisionInformation.ActiveTestMerges">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.TestMerge"/>s active in the <see cref="T:Tgstation.Server.Api.Models.RevisionInformation"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.RevisionInformation.CompileJobs">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.CompileJob"/>s made from the <see cref="T:Tgstation.Server.Api.Models.RevisionInformation"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.ServerInformation">
            <summary>
            Represents basic server information
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.ServerInformation.Version">
            <summary>
            The version of the host
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.ServerInformation.ApiVersion">
            <summary>
            The <see cref="N:Tgstation.Server.Api"/> version of the host
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.TestMerge">
            <inheritdoc />
        </member>
        <member name="P:Tgstation.Server.Api.Models.TestMerge.MergedBy">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.User"/> who created the <see cref="T:Tgstation.Server.Api.Models.TestMerge"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.TestMergeParameters">
            <summary>
            Parameters for creating a <see cref="T:Tgstation.Server.Api.Models.TestMerge"/>
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.TestMergeParameters.Number">
            <summary>
            The number of the pull request
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.TestMergeParameters.PullRequestRevision">
            <summary>
            The sha of the pull request revision to merge. If not specified, the latest commit shall be used (semi-unsafe)
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.TestMergeParameters.Comment">
            <summary>
            Optional comment about the test
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.Token">
            <summary>
            Represents a JWT returned by the API
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Token.Bearer">
            <summary>
            The value of the JWT
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.Token.ExpiresAt">
            <summary>
            When the <see cref="T:Tgstation.Server.Api.Models.Token"/> expires
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.User">
            <inheritdoc />
        </member>
        <member name="F:Tgstation.Server.Api.Models.User.AdminName">
            <summary>
            The name of the default admin user
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Models.User.DefaultAdminPassword">
            <summary>
            The default admin password
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.User.CreatedBy">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.User"/> who created this <see cref="T:Tgstation.Server.Api.Models.User"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Models.UserUpdate">
            <summary>
            For editing a given <see cref="T:Tgstation.Server.Api.Models.User"/>. Will never be returned by the API
            </summary>
        </member>
        <member name="P:Tgstation.Server.Api.Models.UserUpdate.Password">
            <summary>
            Cleartext password of the <see cref="T:Tgstation.Server.Api.Models.User"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Rights.AdministrationRights">
            <summary>
            Rights for <see cref="T:Tgstation.Server.Api.Models.Administration"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.AdministrationRights.None">
            <summary>
            User has no rights
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.AdministrationRights.WriteUsers">
            <summary>
            User can edit themself and other <see cref="T:Tgstation.Server.Api.Models.User"/>s and also create others
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.AdministrationRights.RestartHost">
            <summary>
            User can gracefully restart the host
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.AdministrationRights.ChangeVersion">
            <summary>
            User can change <see cref="P:Tgstation.Server.Api.Models.Administration.NewVersion"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.AdministrationRights.EditOwnPassword">
            <summary>
            User can change their password
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.AdministrationRights.ReadUsers">
            <summary>
            User can read info and rights of other users
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Rights.ByondRights">
            <summary>
            Rights for <see cref="T:Tgstation.Server.Api.Models.Byond"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ByondRights.None">
            <summary>
            User has no rights
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ByondRights.ReadActive">
            <summary>
            User may check the active installed BYOND version
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ByondRights.ListInstalled">
            <summary>
            User may list all installed BYOND versions
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ByondRights.ChangeVersion">
            <summary>
            User may change the active BYOND version
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ByondRights.CancelInstall">
            <summary>
            User may cancel version installations
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Rights.ChatBotRights">
            <summary>
            Rights for <see cref="T:Tgstation.Server.Api.Models.ChatBot"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ChatBotRights.None">
            <summary>
            User has no rights
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ChatBotRights.WriteEnabled">
            <summary>
            User can change <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.Enabled"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ChatBotRights.WriteProvider">
            <summary>
            User can change <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.Provider"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ChatBotRights.WriteChannels">
            <summary>
            User can change <see cref="P:Tgstation.Server.Api.Models.ChatBot.Channels"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ChatBotRights.WriteConnectionString">
            <summary>
            User can change <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.ConnectionString"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ChatBotRights.ReadConnectionString">
            <summary>
            User can read <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.ConnectionString"/> requires <see cref="F:Tgstation.Server.Api.Rights.ChatBotRights.Read"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ChatBotRights.Read">
            <summary>
            User can read all chat settings except <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.ConnectionString"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ChatBotRights.Create">
            <summary>
            User can create new <see cref="T:Tgstation.Server.Api.Models.ChatBot"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ChatBotRights.Delete">
            <summary>
            User can delete <see cref="T:Tgstation.Server.Api.Models.ChatBot"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ChatBotRights.WriteName">
            <summary>
            User can change <see cref="P:Tgstation.Server.Api.Models.Internal.ChatBot.Name"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Rights.ConfigurationRights">
            <summary>
            Rights for <see cref="T:Tgstation.Server.Api.Models.ConfigurationFile"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ConfigurationRights.None">
            <summary>
            User has no rights
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ConfigurationRights.Read">
            <summary>
            User may read files
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ConfigurationRights.Write">
            <summary>
            User may write files
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ConfigurationRights.List">
            <summary>
            User may list files
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.ConfigurationRights.Delete">
            <summary>
            User may delete empty folders
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Rights.DreamDaemonRights">
            <summary>
            Rights for <see cref="T:Tgstation.Server.Api.Models.DreamDaemon"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamDaemonRights.None">
            <summary>
            User has no rights
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamDaemonRights.ReadRevision">
            <summary>
            User can read <see cref="P:Tgstation.Server.Api.Models.DreamDaemon.ActiveCompileJob"/> and <see cref="P:Tgstation.Server.Api.Models.DreamDaemon.StagedCompileJob"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamDaemonRights.SetPorts">
            <summary>
            User can change both primary and secondary ports
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamDaemonRights.SetAutoStart">
            <summary>
            User can change <see cref="P:Tgstation.Server.Api.Models.Internal.DreamDaemonSettings.AutoStart"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamDaemonRights.SetSecurity">
            <summary>
            User set <see cref="P:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters.SecurityLevel"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamDaemonRights.ReadMetadata">
            <summary>
            User can read all ports, <see cref="P:Tgstation.Server.Api.Models.Internal.DreamDaemonSettings.SoftRestart"/>, <see cref="P:Tgstation.Server.Api.Models.Internal.DreamDaemonSettings.SoftShutdown"/>, <see cref="P:Tgstation.Server.Api.Models.DreamDaemon.Running"/>, <see cref="P:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters.AllowWebClient"/>, and <see cref="P:Tgstation.Server.Api.Models.Internal.DreamDaemonSettings.AutoStart"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamDaemonRights.SetWebClient">
            <summary>
            User can change <see cref="P:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters.AllowWebClient"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamDaemonRights.SoftRestart">
            <summary>
            User can enable <see cref="P:Tgstation.Server.Api.Models.Internal.DreamDaemonSettings.SoftRestart"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamDaemonRights.SoftShutdown">
            <summary>
            User can enable <see cref="P:Tgstation.Server.Api.Models.Internal.DreamDaemonSettings.SoftShutdown"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamDaemonRights.Restart">
            <summary>
            User can immediately restart <see cref="T:Tgstation.Server.Api.Models.DreamDaemon"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamDaemonRights.Shutdown">
            <summary>
            User can immediately shutdown <see cref="T:Tgstation.Server.Api.Models.DreamDaemon"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamDaemonRights.Start">
            <summary>
            User can start <see cref="T:Tgstation.Server.Api.Models.DreamDaemon"/> and disable <see cref="P:Tgstation.Server.Api.Models.Internal.DreamDaemonSettings.SoftRestart"/> and <see cref="P:Tgstation.Server.Api.Models.Internal.DreamDaemonSettings.SoftShutdown"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamDaemonRights.SetStartupTimeout">
            <summary>
            User can change <see cref="P:Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters.StartupTimeout"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Rights.DreamMakerRights">
            <summary>
            Rights for <see cref="T:Tgstation.Server.Api.Models.DreamMaker"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamMakerRights.None">
            <summary>
            User has no rights
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamMakerRights.Read">
            <summary>
            User may read <see cref="T:Tgstation.Server.Api.Models.DreamMaker"/> status
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamMakerRights.Compile">
            <summary>
            User may trigger compiles
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamMakerRights.CancelCompile">
            <summary>
            User may cancel compiles
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamMakerRights.SetDme">
            <summary>
            User may modify <see cref="P:Tgstation.Server.Api.Models.DreamMaker.ProjectName"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamMakerRights.SetApiValidationPort">
            <summary>
            User may modify <see cref="P:Tgstation.Server.Api.Models.DreamMaker.ApiValidationPort"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamMakerRights.CompileJobs">
            <summary>
            User may list and read all <see cref="T:Tgstation.Server.Api.Models.CompileJob"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.DreamMakerRights.SetSecurityLevel">
            <summary>
            User may modify <see cref="P:Tgstation.Server.Api.Models.DreamMaker.ApiValidationSecurityLevel"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Rights.InstanceManagerRights">
            <summary>
            Rights for managing <see cref="T:Tgstation.Server.Api.Models.Instance"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.InstanceManagerRights.None">
            <summary>
            User has no rights
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.InstanceManagerRights.Read">
            <summary>
            User can view <see cref="T:Tgstation.Server.Api.Models.Instance"/>s which they have any rights for
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.InstanceManagerRights.Create">
            <summary>
            User can create <see cref="T:Tgstation.Server.Api.Models.Instance"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.InstanceManagerRights.Rename">
            <summary>
            User can rename <see cref="T:Tgstation.Server.Api.Models.Instance"/>s they can view
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.InstanceManagerRights.Relocate">
            <summary>
            User can relocate <see cref="T:Tgstation.Server.Api.Models.Instance"/>s they can view
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.InstanceManagerRights.SetOnline">
            <summary>
            User can online <see cref="T:Tgstation.Server.Api.Models.Instance"/>s they can view
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.InstanceManagerRights.Delete">
            <summary>
            User can delete <see cref="T:Tgstation.Server.Api.Models.Instance"/>s they can view
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.InstanceManagerRights.List">
            <summary>
            User can view all <see cref="T:Tgstation.Server.Api.Models.Instance"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.InstanceManagerRights.SetConfiguration">
            <summary>
            User can change <see cref="P:Tgstation.Server.Api.Models.Instance.ConfigurationType"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.InstanceManagerRights.SetAutoUpdate">
            <summary>
            User can change <see cref="P:Tgstation.Server.Api.Models.Instance.AutoUpdateInterval"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Rights.InstanceUserRights">
            <summary>
            Rights for an <see cref="T:Tgstation.Server.Api.Models.Instance"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.InstanceUserRights.None">
            <summary>
            User has no rights
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.InstanceUserRights.ReadUsers">
            <summary>
            Allow read access to <see cref="T:Tgstation.Server.Api.Models.InstanceUser"/> for the <see cref="T:Tgstation.Server.Api.Models.Instance"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.InstanceUserRights.WriteUsers">
            <summary>
            Allow write and delete access to <see cref="T:Tgstation.Server.Api.Models.InstanceUser"/> for the <see cref="T:Tgstation.Server.Api.Models.Instance"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.InstanceUserRights.CreateUsers">
            <summary>
            Allow adding additional <see cref="T:Tgstation.Server.Api.Models.InstanceUser"/> to the <see cref="T:Tgstation.Server.Api.Models.Instance"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Rights.RepositoryRights">
            <summary>
            Rights for a <see cref="T:Tgstation.Server.Api.Models.Repository"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RepositoryRights.None">
            <summary>
            User has no rights
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RepositoryRights.CancelPendingChanges">
            <summary>
            User may cancel synchronize operations
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RepositoryRights.SetOrigin">
            <summary>
            User may create the <see cref="T:Tgstation.Server.Api.Models.Repository"/> if it does not exist
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RepositoryRights.SetSha">
            <summary>
            User may directly set the sha the <see cref="T:Tgstation.Server.Api.Models.Repository"/>'s HEAD points to
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RepositoryRights.MergePullRequest">
            <summary>
            User may fetch and merge GitHub pull requests
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RepositoryRights.UpdateBranch">
            <summary>
            User may use the update feature
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RepositoryRights.ChangeCommitter">
            <summary>
            User may change <see cref="P:Tgstation.Server.Api.Models.Internal.RepositorySettings.CommitterName"/> and <see cref="P:Tgstation.Server.Api.Models.Internal.RepositorySettings.CommitterEmail"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RepositoryRights.ChangeTestMergeCommits">
            <summary>
            User may change <see cref="P:Tgstation.Server.Api.Models.Internal.RepositorySettings.PushTestMergeCommits"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RepositoryRights.ChangeCredentials">
            <summary>
            User may read and change <see cref="P:Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessUser"/> and <see cref="P:Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RepositoryRights.SetReference">
            <summary>
            User may set <see cref="P:Tgstation.Server.Api.Models.Repository.Reference"/> to another git reference (not a SHA)
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RepositoryRights.Read">
            <summary>
            User may read all fields in the <see cref="T:Tgstation.Server.Api.Models.Repository"/> with the exception of <see cref="P:Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RepositoryRights.ChangeAutoUpdateSettings">
            <summary>
            User may change <see cref="P:Tgstation.Server.Api.Models.Internal.RepositorySettings.AutoUpdatesKeepTestMerges"/> and  <see cref="P:Tgstation.Server.Api.Models.Internal.RepositorySettings.AutoUpdatesSynchronize"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RepositoryRights.Delete">
            <summary>
            User may delete the <see cref="T:Tgstation.Server.Api.Models.Repository"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RepositoryRights.CancelClone">
            <summary>
            User may cancel clone operations
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Rights.RightsHelper">
            <summary>
            Helper for <see cref="T:Tgstation.Server.Api.Rights.RightsType"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RightsHelper.TypeMap">
            <summary>
            Map of <see cref="T:Tgstation.Server.Api.Rights.RightsType"/>s to their respective flag <see cref="T:System.Enum"/>s
            </summary>
        </member>
        <member name="M:Tgstation.Server.Api.Rights.RightsHelper.RightToType(Tgstation.Server.Api.Rights.RightsType)">
            <summary>
            Map a given <paramref name="rightsType"/> to its respective <see cref="T:System.Enum"/> <see cref="T:System.Type"/>
            </summary>
            <param name="rightsType">The <see cref="T:Tgstation.Server.Api.Rights.RightsType"/> to lookup</param>
            <returns>The <see cref="T:System.Enum"/> <see cref="T:System.Type"/> of the given <paramref name="rightsType"/></returns>
        </member>
        <member name="M:Tgstation.Server.Api.Rights.RightsHelper.RoleNames``1(``0)">
            <summary>
            Gets the role claim name used for a given <paramref name="right"/>
            </summary>
            <typeparam name="TRight">The <see cref="T:Tgstation.Server.Api.Rights.RightsType"/></typeparam>
            <param name="right">The <typeparamref name="TRight"/></param>
            <returns>A <see cref="T:System.String"/> representing the claim role name</returns>
        </member>
        <member name="M:Tgstation.Server.Api.Rights.RightsHelper.RoleName(Tgstation.Server.Api.Rights.RightsType,System.Enum)">
            <summary>
            Gets the role claim name used for a given <paramref name="rightsType"/> and <paramref name="right"/>
            </summary>
            <param name="rightsType">The <see cref="T:Tgstation.Server.Api.Rights.RightsType"/></param>
            <param name="right">The right value</param>
            <returns>A <see cref="T:System.String"/> representing the claim role name</returns>
        </member>
        <member name="M:Tgstation.Server.Api.Rights.RightsHelper.IsInstanceRight(Tgstation.Server.Api.Rights.RightsType)">
            <summary>
            Check if a given <paramref name="rightsType"/> is meant for an <see cref="T:Tgstation.Server.Api.Models.Instance"/>
            </summary>
            <param name="rightsType">The <see cref="T:Tgstation.Server.Api.Rights.RightsType"/> to check</param>
            <returns><see langword="true"/> if <paramref name="rightsType"/> is an instance right, <see langword="false"/> otherwise</returns>
        </member>
        <member name="T:Tgstation.Server.Api.Rights.RightsType">
            <summary>
            The type of rights a model uses
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RightsType.Administration">
            <summary>
            <see cref="T:Tgstation.Server.Api.Rights.AdministrationRights"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RightsType.InstanceManager">
            <summary>
            <see cref="T:Tgstation.Server.Api.Rights.InstanceManagerRights"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RightsType.Repository">
            <summary>
            <see cref="T:Tgstation.Server.Api.Rights.RepositoryRights"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RightsType.Byond">
            <summary>
            <see cref="T:Tgstation.Server.Api.Rights.ByondRights"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RightsType.DreamMaker">
            <summary>
            <see cref="T:Tgstation.Server.Api.Rights.DreamMakerRights"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RightsType.DreamDaemon">
            <summary>
            <see cref="T:Tgstation.Server.Api.Rights.DreamDaemonRights"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RightsType.ChatBots">
            <summary>
            <see cref="T:Tgstation.Server.Api.Rights.ChatBotRights"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RightsType.Configuration">
            <summary>
            <see cref="T:Tgstation.Server.Api.Rights.ConfigurationRights"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Rights.RightsType.InstanceUser">
            <summary>
            <see cref="T:Tgstation.Server.Api.Rights.InstanceUserRights"/>
            </summary>
        </member>
        <member name="T:Tgstation.Server.Api.Routes">
            <summary>
            Routes to a server actions
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Routes.Root">
            <summary>
            The root controller
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Routes.Administration">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Administration"/> controller
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Routes.User">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.User"/> controller
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Routes.InstanceManager">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Instance"/> controller
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Routes.Byond">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Byond"/> controller
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Routes.Repository">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Repository"/> controller
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Routes.DreamDaemon">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.DreamDaemon"/> controller
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Routes.Configuration">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.ConfigurationFile"/> controller
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Routes.File">
            <summary>
            To be paired with <see cref="F:Tgstation.Server.Api.Routes.Configuration"/> for accessing <see cref="T:Tgstation.Server.Api.Models.ConfigurationFile"/>s
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Routes.ConfigurationFile">
            <summary>
            Full combination of <see cref="F:Tgstation.Server.Api.Routes.Configuration"/> and <see cref="F:Tgstation.Server.Api.Routes.File"/>
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Routes.InstanceUser">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.InstanceUser"/> controller
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Routes.Chat">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.ChatBot"/> controller
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Routes.DreamMaker">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.DreamMaker"/> controller
            </summary>
        </member>
        <member name="F:Tgstation.Server.Api.Routes.Jobs">
            <summary>
            The <see cref="T:Tgstation.Server.Api.Models.Job"/> controller
            </summary>
        </member>
        <member name="M:Tgstation.Server.Api.Routes.SetID(System.String,System.Int64)">
            <summary>
            Apply an <paramref name="id"/> postfix to a <paramref name="route"/>
            </summary>
            <param name="route">The route</param>
            <param name="id">The ID</param>
            <returns>The <paramref name="route"/> with <paramref name="id"/> appended</returns>
        </member>
        <member name="M:Tgstation.Server.Api.Routes.List(System.String)">
            <summary>
            Get the /List postfix for a <paramref name="route"/>
            </summary>
            <param name="route">The route</param>
            <returns>The <paramref name="route"/> with /List appended</returns>
        </member>
    </members>
</doc>
